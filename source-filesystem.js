var Kd = Object.defineProperty
var Wd = Object.prototype.hasOwnProperty
var Ns = Object.getOwnPropertySymbols,
  Jd = Object.prototype.propertyIsEnumerable
var js = (e, i, t) =>
    i in e
      ? Kd(e, i, { enumerable: !0, configurable: !0, writable: !0, value: t })
      : (e[i] = t),
  k = (e, i) => {
    for (var t in i || (i = {})) Wd.call(i, t) && js(e, t, i[t])
    if (Ns) for (var t of Ns(i)) Jd.call(i, t) && js(e, t, i[t])
    return e
  }
var y = (e, i) => () => (i || e((i = { exports: {} }).exports, i), i.exports)
var ue = y(_n => {
  'use strict'
  _n.fromCallback = function (e) {
    return Object.defineProperty(
      function (...i) {
        if (typeof i[i.length - 1] == 'function') e.apply(this, i)
        else
          return new Promise((t, n) => {
            e.apply(this, i.concat([(a, s) => (a ? n(a) : t(s))]))
          })
      },
      'name',
      { value: e.name }
    )
  }
  _n.fromPromise = function (e) {
    return Object.defineProperty(
      function (...i) {
        let t = i[i.length - 1]
        if (typeof t != 'function') return e.apply(this, i)
        e.apply(this, i.slice(0, -1)).then(n => t(null, n), t)
      },
      'name',
      { value: e.name }
    )
  }
})
var Ds = y((CE, Ts) => {
  var De = require('constants'),
    Yd = process.cwd,
    vt = null,
    Xd = process.env.GRACEFUL_FS_PLATFORM || process.platform
  process.cwd = function () {
    return vt || (vt = Yd.call(process)), vt
  }
  try {
    process.cwd()
  } catch (e) {}
  var Vd = process.chdir
  process.chdir = function (e) {
    ;(vt = null), Vd.call(process, e)
  }
  Ts.exports = Zd
  function Zd (e) {
    De.hasOwnProperty('O_SYMLINK') &&
      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./) &&
      i(e),
      e.lutimes || t(e),
      (e.chown = s(e.chown)),
      (e.fchown = s(e.fchown)),
      (e.lchown = s(e.lchown)),
      (e.chmod = n(e.chmod)),
      (e.fchmod = n(e.fchmod)),
      (e.lchmod = n(e.lchmod)),
      (e.chownSync = r(e.chownSync)),
      (e.fchownSync = r(e.fchownSync)),
      (e.lchownSync = r(e.lchownSync)),
      (e.chmodSync = a(e.chmodSync)),
      (e.fchmodSync = a(e.fchmodSync)),
      (e.lchmodSync = a(e.lchmodSync)),
      (e.stat = o(e.stat)),
      (e.fstat = o(e.fstat)),
      (e.lstat = o(e.lstat)),
      (e.statSync = c(e.statSync)),
      (e.fstatSync = c(e.fstatSync)),
      (e.lstatSync = c(e.lstatSync)),
      e.lchmod ||
        ((e.lchmod = function (l, p, u) {
          u && process.nextTick(u)
        }),
        (e.lchmodSync = function () {})),
      e.lchown ||
        ((e.lchown = function (l, p, u, m) {
          m && process.nextTick(m)
        }),
        (e.lchownSync = function () {})),
      Xd === 'win32' &&
        (e.rename = (function (l) {
          return function (p, u, m) {
            var f = Date.now(),
              h = 0
            l(p, u, function x (v) {
              if (
                v &&
                (v.code === 'EACCES' || v.code === 'EPERM') &&
                Date.now() - f < 6e4
              ) {
                setTimeout(function () {
                  e.stat(u, function (w, C) {
                    w && w.code === 'ENOENT' ? l(p, u, x) : m(v)
                  })
                }, h),
                  h < 100 && (h += 10)
                return
              }
              m && m(v)
            })
          }
        })(e.rename)),
      (e.read = (function (l) {
        function p (u, m, f, h, x, v) {
          var w
          if (v && typeof v == 'function') {
            var C = 0
            w = function (Q, L, D) {
              if (Q && Q.code === 'EAGAIN' && C < 10)
                return C++, l.call(e, u, m, f, h, x, w)
              v.apply(this, arguments)
            }
          }
          return l.call(e, u, m, f, h, x, w)
        }
        return (p.__proto__ = l), p
      })(e.read)),
      (e.readSync = (function (l) {
        return function (p, u, m, f, h) {
          for (var x = 0; ; )
            try {
              return l.call(e, p, u, m, f, h)
            } catch (v) {
              if (v.code === 'EAGAIN' && x < 10) {
                x++
                continue
              }
              throw v
            }
        }
      })(e.readSync))
    function i (l) {
      ;(l.lchmod = function (p, u, m) {
        l.open(p, De.O_WRONLY | De.O_SYMLINK, u, function (f, h) {
          if (f) {
            m && m(f)
            return
          }
          l.fchmod(h, u, function (x) {
            l.close(h, function (v) {
              m && m(x || v)
            })
          })
        })
      }),
        (l.lchmodSync = function (p, u) {
          var m = l.openSync(p, De.O_WRONLY | De.O_SYMLINK, u),
            f = !0,
            h
          try {
            ;(h = l.fchmodSync(m, u)), (f = !1)
          } finally {
            if (f)
              try {
                l.closeSync(m)
              } catch (x) {}
            else l.closeSync(m)
          }
          return h
        })
    }
    function t (l) {
      De.hasOwnProperty('O_SYMLINK')
        ? ((l.lutimes = function (p, u, m, f) {
            l.open(p, De.O_SYMLINK, function (h, x) {
              if (h) {
                f && f(h)
                return
              }
              l.futimes(x, u, m, function (v) {
                l.close(x, function (w) {
                  f && f(v || w)
                })
              })
            })
          }),
          (l.lutimesSync = function (p, u, m) {
            var f = l.openSync(p, De.O_SYMLINK),
              h,
              x = !0
            try {
              ;(h = l.futimesSync(f, u, m)), (x = !1)
            } finally {
              if (x)
                try {
                  l.closeSync(f)
                } catch (v) {}
              else l.closeSync(f)
            }
            return h
          }))
        : ((l.lutimes = function (p, u, m, f) {
            f && process.nextTick(f)
          }),
          (l.lutimesSync = function () {}))
    }
    function n (l) {
      return (
        l &&
        function (p, u, m) {
          return l.call(e, p, u, function (f) {
            d(f) && (f = null), m && m.apply(this, arguments)
          })
        }
      )
    }
    function a (l) {
      return (
        l &&
        function (p, u) {
          try {
            return l.call(e, p, u)
          } catch (m) {
            if (!d(m)) throw m
          }
        }
      )
    }
    function s (l) {
      return (
        l &&
        function (p, u, m, f) {
          return l.call(e, p, u, m, function (h) {
            d(h) && (h = null), f && f.apply(this, arguments)
          })
        }
      )
    }
    function r (l) {
      return (
        l &&
        function (p, u, m) {
          try {
            return l.call(e, p, u, m)
          } catch (f) {
            if (!d(f)) throw f
          }
        }
      )
    }
    function o (l) {
      return (
        l &&
        function (p, u, m) {
          typeof u == 'function' && ((m = u), (u = null))
          function f (h, x) {
            x &&
              (x.uid < 0 && (x.uid += 4294967296),
              x.gid < 0 && (x.gid += 4294967296)),
              m && m.apply(this, arguments)
          }
          return u ? l.call(e, p, u, f) : l.call(e, p, f)
        }
      )
    }
    function c (l) {
      return (
        l &&
        function (p, u) {
          var m = u ? l.call(e, p, u) : l.call(e, p)
          return (
            m.uid < 0 && (m.uid += 4294967296),
            m.gid < 0 && (m.gid += 4294967296),
            m
          )
        }
      )
    }
    function d (l) {
      if (!l || l.code === 'ENOSYS') return !0
      var p = !process.getuid || process.getuid() !== 0
      return !!(p && (l.code === 'EINVAL' || l.code === 'EPERM'))
    }
  }
})
var Hs = y((_E, qs) => {
  var Ps = require('stream').Stream
  qs.exports = em
  function em (e) {
    return { ReadStream: i, WriteStream: t }
    function i (n, a) {
      if (!(this instanceof i)) return new i(n, a)
      Ps.call(this)
      var s = this
      ;(this.path = n),
        (this.fd = null),
        (this.readable = !0),
        (this.paused = !1),
        (this.flags = 'r'),
        (this.mode = 438),
        (this.bufferSize = 64 * 1024),
        (a = a || {})
      for (var r = Object.keys(a), o = 0, c = r.length; o < c; o++) {
        var d = r[o]
        this[d] = a[d]
      }
      if (
        (this.encoding && this.setEncoding(this.encoding),
        this.start !== void 0)
      ) {
        if (typeof this.start != 'number')
          throw TypeError('start must be a Number')
        if (this.end === void 0) this.end = Infinity
        else if (typeof this.end != 'number')
          throw TypeError('end must be a Number')
        if (this.start > this.end) throw new Error('start must be <= end')
        this.pos = this.start
      }
      if (this.fd !== null) {
        process.nextTick(function () {
          s._read()
        })
        return
      }
      e.open(this.path, this.flags, this.mode, function (l, p) {
        if (l) {
          s.emit('error', l), (s.readable = !1)
          return
        }
        ;(s.fd = p), s.emit('open', p), s._read()
      })
    }
    function t (n, a) {
      if (!(this instanceof t)) return new t(n, a)
      Ps.call(this),
        (this.path = n),
        (this.fd = null),
        (this.writable = !0),
        (this.flags = 'w'),
        (this.encoding = 'binary'),
        (this.mode = 438),
        (this.bytesWritten = 0),
        (a = a || {})
      for (var s = Object.keys(a), r = 0, o = s.length; r < o; r++) {
        var c = s[r]
        this[c] = a[c]
      }
      if (this.start !== void 0) {
        if (typeof this.start != 'number')
          throw TypeError('start must be a Number')
        if (this.start < 0) throw new Error('start must be >= zero')
        this.pos = this.start
      }
      ;(this.busy = !1),
        (this._queue = []),
        this.fd === null &&
          ((this._open = e.open),
          this._queue.push([
            this._open,
            this.path,
            this.flags,
            this.mode,
            void 0
          ]),
          this.flush())
    }
  }
})
var $s = y((kE, Ms) => {
  'use strict'
  Ms.exports = im
  function im (e) {
    if (e === null || typeof e != 'object') return e
    if (e instanceof Object) var i = { __proto__: e.__proto__ }
    else var i = Object.create(null)
    return (
      Object.getOwnPropertyNames(e).forEach(function (t) {
        Object.defineProperty(i, t, Object.getOwnPropertyDescriptor(e, t))
      }),
      i
    )
  }
})
var ne = y((BE, kn) => {
  var ee = require('fs'),
    tm = Ds(),
    nm = Hs(),
    am = $s(),
    gt = require('util'),
    Ce,
    At
  typeof Symbol == 'function' && typeof Symbol.for == 'function'
    ? ((Ce = Symbol.for('graceful-fs.queue')),
      (At = Symbol.for('graceful-fs.previous')))
    : ((Ce = '___graceful-fs.queue'), (At = '___graceful-fs.previous'))
  function sm () {}
  function Gs (e, i) {
    Object.defineProperty(e, Ce, {
      get: function () {
        return i
      }
    })
  }
  var Ii = sm
  gt.debuglog
    ? (Ii = gt.debuglog('gfs4'))
    : /\bgfs4\b/i.test(process.env.NODE_DEBUG || '') &&
      (Ii = function () {
        var e = gt.format.apply(gt, arguments)
        ;(e =
          'GFS4: ' +
          e.split(/\n/).join(`
GFS4: `)),
          console.error(e)
      })
  ee[Ce] ||
    ((Us = global[Ce] || []),
    Gs(ee, Us),
    (ee.close = (function (e) {
      function i (t, n) {
        return e.call(ee, t, function (a) {
          a || Ye(), typeof n == 'function' && n.apply(this, arguments)
        })
      }
      return Object.defineProperty(i, At, { value: e }), i
    })(ee.close)),
    (ee.closeSync = (function (e) {
      function i (t) {
        e.apply(ee, arguments), Ye()
      }
      return Object.defineProperty(i, At, { value: e }), i
    })(ee.closeSync)),
    /\bgfs4\b/i.test(process.env.NODE_DEBUG || '') &&
      process.on('exit', function () {
        Ii(ee[Ce]), require('assert').equal(ee[Ce].length, 0)
      }))
  var Us
  global[Ce] || Gs(global, ee[Ce])
  kn.exports = Bn(am(ee))
  process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH &&
    !ee.__patched &&
    ((kn.exports = Bn(ee)), (ee.__patched = !0))
  function Bn (e) {
    tm(e),
      (e.gracefulify = Bn),
      (e.createReadStream = C),
      (e.createWriteStream = Q)
    var i = e.readFile
    e.readFile = t
    function t (E, B, R) {
      return typeof B == 'function' && ((R = B), (B = null)), N(E, B, R)
      function N (g, F, T) {
        return i(g, F, function ($) {
          $ && ($.code === 'EMFILE' || $.code === 'ENFILE')
            ? Ri([N, [g, F, T]])
            : (typeof T == 'function' && T.apply(this, arguments), Ye())
        })
      }
    }
    var n = e.writeFile
    e.writeFile = a
    function a (E, B, R, N) {
      return typeof R == 'function' && ((N = R), (R = null)), g(E, B, R, N)
      function g (F, T, $, A) {
        return n(F, T, $, function (b) {
          b && (b.code === 'EMFILE' || b.code === 'ENFILE')
            ? Ri([g, [F, T, $, A]])
            : (typeof A == 'function' && A.apply(this, arguments), Ye())
        })
      }
    }
    var s = e.appendFile
    s && (e.appendFile = r)
    function r (E, B, R, N) {
      return typeof R == 'function' && ((N = R), (R = null)), g(E, B, R, N)
      function g (F, T, $, A) {
        return s(F, T, $, function (b) {
          b && (b.code === 'EMFILE' || b.code === 'ENFILE')
            ? Ri([g, [F, T, $, A]])
            : (typeof A == 'function' && A.apply(this, arguments), Ye())
        })
      }
    }
    var o = e.readdir
    e.readdir = c
    function c (E, B, R) {
      var N = [E]
      return typeof B != 'function' ? N.push(B) : (R = B), N.push(g), d(N)
      function g (F, T) {
        T && T.sort && T.sort(),
          F && (F.code === 'EMFILE' || F.code === 'ENFILE')
            ? Ri([d, [N]])
            : (typeof R == 'function' && R.apply(this, arguments), Ye())
      }
    }
    function d (E) {
      return o.apply(e, E)
    }
    if (process.version.substr(0, 4) === 'v0.8') {
      var l = nm(e)
      ;(h = l.ReadStream), (v = l.WriteStream)
    }
    var p = e.ReadStream
    p && ((h.prototype = Object.create(p.prototype)), (h.prototype.open = x))
    var u = e.WriteStream
    u && ((v.prototype = Object.create(u.prototype)), (v.prototype.open = w)),
      Object.defineProperty(e, 'ReadStream', {
        get: function () {
          return h
        },
        set: function (E) {
          h = E
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(e, 'WriteStream', {
        get: function () {
          return v
        },
        set: function (E) {
          v = E
        },
        enumerable: !0,
        configurable: !0
      })
    var m = h
    Object.defineProperty(e, 'FileReadStream', {
      get: function () {
        return m
      },
      set: function (E) {
        m = E
      },
      enumerable: !0,
      configurable: !0
    })
    var f = v
    Object.defineProperty(e, 'FileWriteStream', {
      get: function () {
        return f
      },
      set: function (E) {
        f = E
      },
      enumerable: !0,
      configurable: !0
    })
    function h (E, B) {
      return this instanceof h
        ? (p.apply(this, arguments), this)
        : h.apply(Object.create(h.prototype), arguments)
    }
    function x () {
      var E = this
      D(E.path, E.flags, E.mode, function (B, R) {
        B
          ? (E.autoClose && E.destroy(), E.emit('error', B))
          : ((E.fd = R), E.emit('open', R), E.read())
      })
    }
    function v (E, B) {
      return this instanceof v
        ? (u.apply(this, arguments), this)
        : v.apply(Object.create(v.prototype), arguments)
    }
    function w () {
      var E = this
      D(E.path, E.flags, E.mode, function (B, R) {
        B ? (E.destroy(), E.emit('error', B)) : ((E.fd = R), E.emit('open', R))
      })
    }
    function C (E, B) {
      return new e.ReadStream(E, B)
    }
    function Q (E, B) {
      return new e.WriteStream(E, B)
    }
    var L = e.open
    e.open = D
    function D (E, B, R, N) {
      return typeof R == 'function' && ((N = R), (R = null)), g(E, B, R, N)
      function g (F, T, $, A) {
        return L(F, T, $, function (b, z) {
          b && (b.code === 'EMFILE' || b.code === 'ENFILE')
            ? Ri([g, [F, T, $, A]])
            : (typeof A == 'function' && A.apply(this, arguments), Ye())
        })
      }
    }
    return e
  }
  function Ri (e) {
    Ii('ENQUEUE', e[0].name, e[1]), ee[Ce].push(e)
  }
  function Ye () {
    var e = ee[Ce].shift()
    e && (Ii('RETRY', e[0].name, e[1]), e[0].apply(null, e[1]))
  }
})
var Fi = y(qe => {
  'use strict'
  var zs = ue().fromCallback,
    le = ne(),
    rm = [
      'access',
      'appendFile',
      'chmod',
      'chown',
      'close',
      'copyFile',
      'fchmod',
      'fchown',
      'fdatasync',
      'fstat',
      'fsync',
      'ftruncate',
      'futimes',
      'lchmod',
      'lchown',
      'link',
      'lstat',
      'mkdir',
      'mkdtemp',
      'open',
      'opendir',
      'readdir',
      'readFile',
      'readlink',
      'realpath',
      'rename',
      'rmdir',
      'stat',
      'symlink',
      'truncate',
      'unlink',
      'utimes',
      'writeFile'
    ].filter(e => typeof le[e] == 'function')
  Object.keys(le).forEach(e => {
    e !== 'promises' && (qe[e] = le[e])
  })
  rm.forEach(e => {
    qe[e] = zs(le[e])
  })
  qe.exists = function (e, i) {
    return typeof i == 'function'
      ? le.exists(e, i)
      : new Promise(t => le.exists(e, t))
  }
  qe.read = function (e, i, t, n, a, s) {
    return typeof s == 'function'
      ? le.read(e, i, t, n, a, s)
      : new Promise((r, o) => {
          le.read(e, i, t, n, a, (c, d, l) => {
            if (c) return o(c)
            r({ bytesRead: d, buffer: l })
          })
        })
  }
  qe.write = function (e, i, ...t) {
    return typeof t[t.length - 1] == 'function'
      ? le.write(e, i, ...t)
      : new Promise((n, a) => {
          le.write(e, i, ...t, (s, r, o) => {
            if (s) return a(s)
            n({ bytesWritten: r, buffer: o })
          })
        })
  }
  typeof le.writev == 'function' &&
    (qe.writev = function (e, i, ...t) {
      return typeof t[t.length - 1] == 'function'
        ? le.writev(e, i, ...t)
        : new Promise((n, a) => {
            le.writev(e, i, ...t, (s, r, o) => {
              if (s) return a(s)
              n({ bytesWritten: r, buffers: o })
            })
          })
    })
  typeof le.realpath.native == 'function' &&
    (qe.realpath.native = zs(le.realpath.native))
})
var Sn = y((QE, Ks) => {
  Ks.exports = e => {
    let i = process.versions.node.split('.').map(t => parseInt(t, 10))
    return (
      (e = e.split('.').map(t => parseInt(t, 10))),
      i[0] > e[0] ||
        (i[0] === e[0] && (i[1] > e[1] || (i[1] === e[1] && i[2] >= e[2])))
    )
  }
})
var Vs = y((IE, Qn) => {
  'use strict'
  var oi = Fi(),
    Re = require('path'),
    om = Sn(),
    Ws = om('10.12.0'),
    Js = e => {
      if (
        process.platform === 'win32' &&
        /[<>:"|?*]/.test(e.replace(Re.parse(e).root, ''))
      ) {
        let t = new Error(`Path contains invalid characters: ${e}`)
        throw ((t.code = 'EINVAL'), t)
      }
    },
    Ys = e => {
      let i = { mode: 511 }
      return typeof e == 'number' && (e = { mode: e }), k(k({}, i), e)
    },
    Xs = e => {
      let i = new Error(`operation not permitted, mkdir '${e}'`)
      return (
        (i.code = 'EPERM'),
        (i.errno = -4048),
        (i.path = e),
        (i.syscall = 'mkdir'),
        i
      )
    }
  Qn.exports.makeDir = async (e, i) => {
    if ((Js(e), (i = Ys(i)), Ws)) {
      let n = Re.resolve(e)
      return oi.mkdir(n, { mode: i.mode, recursive: !0 })
    }
    let t = async n => {
      try {
        await oi.mkdir(n, i.mode)
      } catch (a) {
        if (a.code === 'EPERM') throw a
        if (a.code === 'ENOENT') {
          if (Re.dirname(n) === n) throw Xs(n)
          if (a.message.includes('null bytes')) throw a
          return await t(Re.dirname(n)), t(n)
        }
        try {
          if (!(await oi.stat(n)).isDirectory())
            throw new Error('The path is not a directory')
        } catch {
          throw a
        }
      }
    }
    return t(Re.resolve(e))
  }
  Qn.exports.makeDirSync = (e, i) => {
    if ((Js(e), (i = Ys(i)), Ws)) {
      let n = Re.resolve(e)
      return oi.mkdirSync(n, { mode: i.mode, recursive: !0 })
    }
    let t = n => {
      try {
        oi.mkdirSync(n, i.mode)
      } catch (a) {
        if (a.code === 'EPERM') throw a
        if (a.code === 'ENOENT') {
          if (Re.dirname(n) === n) throw Xs(n)
          if (a.message.includes('null bytes')) throw a
          return t(Re.dirname(n)), t(n)
        }
        try {
          if (!oi.statSync(n).isDirectory())
            throw new Error('The path is not a directory')
        } catch {
          throw a
        }
      }
    }
    return t(Re.resolve(e))
  }
})
var _e = y((RE, Zs) => {
  'use strict'
  var cm = ue().fromPromise,
    { makeDir: lm, makeDirSync: In } = Vs(),
    Rn = cm(lm)
  Zs.exports = {
    mkdirs: Rn,
    mkdirsSync: In,
    mkdirp: Rn,
    mkdirpSync: In,
    ensureDir: Rn,
    ensureDirSync: In
  }
})
var Fn = y((FE, er) => {
  'use strict'
  var ci = ne()
  function pm (e, i, t, n) {
    ci.open(e, 'r+', (a, s) => {
      if (a) return n(a)
      ci.futimes(s, i, t, r => {
        ci.close(s, o => {
          n && n(r || o)
        })
      })
    })
  }
  function um (e, i, t) {
    let n = ci.openSync(e, 'r+')
    return ci.futimesSync(n, i, t), ci.closeSync(n)
  }
  er.exports = { utimesMillis: pm, utimesMillisSync: um }
})
var Oi = y((OE, ir) => {
  'use strict'
  var li = Fi(),
    de = require('path'),
    dm = require('util'),
    mm = Sn(),
    bt = mm('10.5.0'),
    tr = e => (bt ? li.stat(e, { bigint: !0 }) : li.stat(e)),
    On = e => (bt ? li.statSync(e, { bigint: !0 }) : li.statSync(e))
  function fm (e, i) {
    return Promise.all([
      tr(e),
      tr(i).catch(t => {
        if (t.code === 'ENOENT') return null
        throw t
      })
    ]).then(([t, n]) => ({ srcStat: t, destStat: n }))
  }
  function hm (e, i) {
    let t,
      n = On(e)
    try {
      t = On(i)
    } catch (a) {
      if (a.code === 'ENOENT') return { srcStat: n, destStat: null }
      throw a
    }
    return { srcStat: n, destStat: t }
  }
  function xm (e, i, t, n) {
    dm.callbackify(fm)(e, i, (a, s) => {
      if (a) return n(a)
      let { srcStat: r, destStat: o } = s
      return o && yt(r, o)
        ? n(new Error('Source and destination must not be the same.'))
        : r.isDirectory() && Ln(e, i)
        ? n(new Error(Et(e, i, t)))
        : n(null, { srcStat: r, destStat: o })
    })
  }
  function vm (e, i, t) {
    let { srcStat: n, destStat: a } = hm(e, i)
    if (a && yt(n, a))
      throw new Error('Source and destination must not be the same.')
    if (n.isDirectory() && Ln(e, i)) throw new Error(Et(e, i, t))
    return { srcStat: n, destStat: a }
  }
  function nr (e, i, t, n, a) {
    let s = de.resolve(de.dirname(e)),
      r = de.resolve(de.dirname(t))
    if (r === s || r === de.parse(r).root) return a()
    let o = (c, d) =>
      c
        ? c.code === 'ENOENT'
          ? a()
          : a(c)
        : yt(i, d)
        ? a(new Error(Et(e, t, n)))
        : nr(e, i, r, n, a)
    bt ? li.stat(r, { bigint: !0 }, o) : li.stat(r, o)
  }
  function ar (e, i, t, n) {
    let a = de.resolve(de.dirname(e)),
      s = de.resolve(de.dirname(t))
    if (s === a || s === de.parse(s).root) return
    let r
    try {
      r = On(s)
    } catch (o) {
      if (o.code === 'ENOENT') return
      throw o
    }
    if (yt(i, r)) throw new Error(Et(e, t, n))
    return ar(e, i, s, n)
  }
  function yt (e, i) {
    return !!(
      i.ino &&
      i.dev &&
      i.ino === e.ino &&
      i.dev === e.dev &&
      (bt ||
        i.ino < Number.MAX_SAFE_INTEGER ||
        (i.size === e.size &&
          i.mode === e.mode &&
          i.nlink === e.nlink &&
          i.atimeMs === e.atimeMs &&
          i.mtimeMs === e.mtimeMs &&
          i.ctimeMs === e.ctimeMs &&
          i.birthtimeMs === e.birthtimeMs))
    )
  }
  function Ln (e, i) {
    let t = de
        .resolve(e)
        .split(de.sep)
        .filter(a => a),
      n = de
        .resolve(i)
        .split(de.sep)
        .filter(a => a)
    return t.reduce((a, s, r) => a && n[r] === s, !0)
  }
  function Et (e, i, t) {
    return `Cannot ${t} '${e}' to a subdirectory of itself, '${i}'.`
  }
  ir.exports = {
    checkPaths: xm,
    checkPathsSync: vm,
    checkParentPaths: nr,
    checkParentPathsSync: ar,
    isSrcSubdir: Ln
  }
})
var lr = y((LE, sr) => {
  'use strict'
  var ae = ne(),
    Li = require('path'),
    gm = _e().mkdirsSync,
    Am = Fn().utimesMillisSync,
    Ni = Oi()
  function ym (e, i, t) {
    typeof t == 'function' && (t = { filter: t }),
      (t = t || {}),
      (t.clobber = 'clobber' in t ? !!t.clobber : !0),
      (t.overwrite = 'overwrite' in t ? !!t.overwrite : t.clobber),
      t.preserveTimestamps &&
        process.arch === 'ia32' &&
        console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`)
    let { srcStat: n, destStat: a } = Ni.checkPathsSync(e, i, 'copy')
    return Ni.checkParentPathsSync(e, n, i, 'copy'), bm(a, e, i, t)
  }
  function bm (e, i, t, n) {
    if (n.filter && !n.filter(i, t)) return
    let a = Li.dirname(t)
    return ae.existsSync(a) || gm(a), rr(e, i, t, n)
  }
  function rr (e, i, t, n) {
    if (!(n.filter && !n.filter(i, t))) return Em(e, i, t, n)
  }
  function Em (e, i, t, n) {
    let s = (n.dereference ? ae.statSync : ae.lstatSync)(i)
    if (s.isDirectory()) return Cm(s, e, i, t, n)
    if (s.isFile() || s.isCharacterDevice() || s.isBlockDevice())
      return wm(s, e, i, t, n)
    if (s.isSymbolicLink()) return _m(e, i, t, n)
  }
  function wm (e, i, t, n, a) {
    return i ? km(e, t, n, a) : or(e, t, n, a)
  }
  function km (e, i, t, n) {
    if (n.overwrite) return ae.unlinkSync(t), or(e, i, t, n)
    if (n.errorOnExist) throw new Error(`'${t}' already exists`)
  }
  function or (e, i, t, n) {
    return (
      ae.copyFileSync(i, t),
      n.preserveTimestamps && Bm(e.mode, i, t),
      Nn(t, e.mode)
    )
  }
  function Bm (e, i, t) {
    return Sm(e) && Qm(t, e), Im(i, t)
  }
  function Sm (e) {
    return (e & 128) == 0
  }
  function Qm (e, i) {
    return Nn(e, i | 128)
  }
  function Nn (e, i) {
    return ae.chmodSync(e, i)
  }
  function Im (e, i) {
    let t = ae.statSync(e)
    return Am(i, t.atime, t.mtime)
  }
  function Cm (e, i, t, n, a) {
    if (!i) return Rm(e.mode, t, n, a)
    if (i && !i.isDirectory())
      throw new Error(
        `Cannot overwrite non-directory '${n}' with directory '${t}'.`
      )
    return cr(t, n, a)
  }
  function Rm (e, i, t, n) {
    return ae.mkdirSync(t), cr(i, t, n), Nn(t, e)
  }
  function cr (e, i, t) {
    ae.readdirSync(e).forEach(n => Fm(n, e, i, t))
  }
  function Fm (e, i, t, n) {
    let a = Li.join(i, e),
      s = Li.join(t, e),
      { destStat: r } = Ni.checkPathsSync(a, s, 'copy')
    return rr(r, a, s, n)
  }
  function _m (e, i, t, n) {
    let a = ae.readlinkSync(i)
    if ((n.dereference && (a = Li.resolve(process.cwd(), a)), e)) {
      let s
      try {
        s = ae.readlinkSync(t)
      } catch (r) {
        if (r.code === 'EINVAL' || r.code === 'UNKNOWN')
          return ae.symlinkSync(a, t)
        throw r
      }
      if (
        (n.dereference && (s = Li.resolve(process.cwd(), s)),
        Ni.isSrcSubdir(a, s))
      )
        throw new Error(
          `Cannot copy '${a}' to a subdirectory of itself, '${s}'.`
        )
      if (ae.statSync(t).isDirectory() && Ni.isSrcSubdir(s, a))
        throw new Error(`Cannot overwrite '${s}' with '${a}'.`)
      return Om(a, t)
    } else return ae.symlinkSync(a, t)
  }
  function Om (e, i) {
    return ae.unlinkSync(i), ae.symlinkSync(e, i)
  }
  sr.exports = ym
})
var jn = y((NE, pr) => {
  'use strict'
  pr.exports = { copySync: lr() }
})
var Pe = y((jE, ur) => {
  'use strict'
  var Lm = ue().fromPromise,
    dr = Fi()
  function Nm (e) {
    return dr
      .access(e)
      .then(() => !0)
      .catch(() => !1)
  }
  ur.exports = { pathExists: Lm(Nm), pathExistsSync: dr.existsSync }
})
var yr = y((TE, mr) => {
  'use strict'
  var me = ne(),
    ji = require('path'),
    jm = _e().mkdirs,
    Tm = Pe().pathExists,
    Dm = Fn().utimesMillis,
    Ti = Oi()
  function qm (e, i, t, n) {
    typeof t == 'function' && !n
      ? ((n = t), (t = {}))
      : typeof t == 'function' && (t = { filter: t }),
      (n = n || function () {}),
      (t = t || {}),
      (t.clobber = 'clobber' in t ? !!t.clobber : !0),
      (t.overwrite = 'overwrite' in t ? !!t.overwrite : t.clobber),
      t.preserveTimestamps &&
        process.arch === 'ia32' &&
        console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`),
      Ti.checkPaths(e, i, 'copy', (a, s) => {
        if (a) return n(a)
        let { srcStat: r, destStat: o } = s
        Ti.checkParentPaths(e, r, i, 'copy', c =>
          c ? n(c) : t.filter ? hr(fr, o, e, i, t, n) : fr(o, e, i, t, n)
        )
      })
  }
  function fr (e, i, t, n, a) {
    let s = ji.dirname(t)
    Tm(s, (r, o) => {
      if (r) return a(r)
      if (o) return Tn(e, i, t, n, a)
      jm(s, c => (c ? a(c) : Tn(e, i, t, n, a)))
    })
  }
  function hr (e, i, t, n, a, s) {
    Promise.resolve(a.filter(t, n)).then(
      r => (r ? e(i, t, n, a, s) : s()),
      r => s(r)
    )
  }
  function Tn (e, i, t, n, a) {
    return n.filter ? hr(xr, e, i, t, n, a) : xr(e, i, t, n, a)
  }
  function xr (e, i, t, n, a) {
    ;(n.dereference ? me.stat : me.lstat)(i, (r, o) => {
      if (r) return a(r)
      if (o.isDirectory()) return Hm(o, e, i, t, n, a)
      if (o.isFile() || o.isCharacterDevice() || o.isBlockDevice())
        return Pm(o, e, i, t, n, a)
      if (o.isSymbolicLink()) return Mm(e, i, t, n, a)
    })
  }
  function Pm (e, i, t, n, a, s) {
    return i ? $m(e, t, n, a, s) : vr(e, t, n, a, s)
  }
  function $m (e, i, t, n, a) {
    if (n.overwrite) me.unlink(t, s => (s ? a(s) : vr(e, i, t, n, a)))
    else return n.errorOnExist ? a(new Error(`'${t}' already exists`)) : a()
  }
  function vr (e, i, t, n, a) {
    me.copyFile(i, t, s =>
      s ? a(s) : n.preserveTimestamps ? Gm(e.mode, i, t, a) : wt(t, e.mode, a)
    )
  }
  function Gm (e, i, t, n) {
    return Um(e) ? zm(t, e, a => (a ? n(a) : gr(e, i, t, n))) : gr(e, i, t, n)
  }
  function Um (e) {
    return (e & 128) == 0
  }
  function zm (e, i, t) {
    return wt(e, i | 128, t)
  }
  function gr (e, i, t, n) {
    Km(i, t, a => (a ? n(a) : wt(t, e, n)))
  }
  function wt (e, i, t) {
    return me.chmod(e, i, t)
  }
  function Km (e, i, t) {
    me.stat(e, (n, a) => (n ? t(n) : Dm(i, a.atime, a.mtime, t)))
  }
  function Hm (e, i, t, n, a, s) {
    return i
      ? i && !i.isDirectory()
        ? s(
            new Error(
              `Cannot overwrite non-directory '${n}' with directory '${t}'.`
            )
          )
        : Ar(t, n, a, s)
      : Wm(e.mode, t, n, a, s)
  }
  function Wm (e, i, t, n, a) {
    me.mkdir(t, s => {
      if (s) return a(s)
      Ar(i, t, n, r => (r ? a(r) : wt(t, e, a)))
    })
  }
  function Ar (e, i, t, n) {
    me.readdir(e, (a, s) => (a ? n(a) : br(s, e, i, t, n)))
  }
  function br (e, i, t, n, a) {
    let s = e.pop()
    return s ? Jm(e, s, i, t, n, a) : a()
  }
  function Jm (e, i, t, n, a, s) {
    let r = ji.join(t, i),
      o = ji.join(n, i)
    Ti.checkPaths(r, o, 'copy', (c, d) => {
      if (c) return s(c)
      let { destStat: l } = d
      Tn(l, r, o, a, p => (p ? s(p) : br(e, t, n, a, s)))
    })
  }
  function Mm (e, i, t, n, a) {
    me.readlink(i, (s, r) => {
      if (s) return a(s)
      if ((n.dereference && (r = ji.resolve(process.cwd(), r)), e))
        me.readlink(t, (o, c) =>
          o
            ? o.code === 'EINVAL' || o.code === 'UNKNOWN'
              ? me.symlink(r, t, a)
              : a(o)
            : (n.dereference && (c = ji.resolve(process.cwd(), c)),
              Ti.isSrcSubdir(r, c)
                ? a(
                    new Error(
                      `Cannot copy '${r}' to a subdirectory of itself, '${c}'.`
                    )
                  )
                : e.isDirectory() && Ti.isSrcSubdir(c, r)
                ? a(new Error(`Cannot overwrite '${c}' with '${r}'.`))
                : Ym(r, t, a))
        )
      else return me.symlink(r, t, a)
    })
  }
  function Ym (e, i, t) {
    me.unlink(i, n => (n ? t(n) : me.symlink(e, i, t)))
  }
  mr.exports = qm
})
var Dn = y((DE, Er) => {
  'use strict'
  var Xm = ue().fromCallback
  Er.exports = { copy: Xm(yr()) }
})
var Rr = y((qE, wr) => {
  'use strict'
  var Cr = ne(),
    _r = require('path'),
    M = require('assert'),
    Di = process.platform === 'win32'
  function kr (e) {
    ;['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'].forEach(t => {
      ;(e[t] = e[t] || Cr[t]), (t = t + 'Sync'), (e[t] = e[t] || Cr[t])
    }),
      (e.maxBusyTries = e.maxBusyTries || 3)
  }
  function qn (e, i, t) {
    let n = 0
    typeof i == 'function' && ((t = i), (i = {})),
      M(e, 'rimraf: missing path'),
      M.strictEqual(typeof e, 'string', 'rimraf: path should be a string'),
      M.strictEqual(typeof t, 'function', 'rimraf: callback function required'),
      M(i, 'rimraf: invalid options argument provided'),
      M.strictEqual(typeof i, 'object', 'rimraf: options should be object'),
      kr(i),
      Br(e, i, function a (s) {
        if (s) {
          if (
            (s.code === 'EBUSY' ||
              s.code === 'ENOTEMPTY' ||
              s.code === 'EPERM') &&
            n < i.maxBusyTries
          ) {
            n++
            let r = n * 100
            return setTimeout(() => Br(e, i, a), r)
          }
          s.code === 'ENOENT' && (s = null)
        }
        t(s)
      })
  }
  function Br (e, i, t) {
    M(e),
      M(i),
      M(typeof t == 'function'),
      i.lstat(e, (n, a) => {
        if (n && n.code === 'ENOENT') return t(null)
        if (n && n.code === 'EPERM' && Di) return Sr(e, i, n, t)
        if (a && a.isDirectory()) return Ct(e, i, n, t)
        i.unlink(e, s => {
          if (s) {
            if (s.code === 'ENOENT') return t(null)
            if (s.code === 'EPERM') return Di ? Sr(e, i, s, t) : Ct(e, i, s, t)
            if (s.code === 'EISDIR') return Ct(e, i, s, t)
          }
          return t(s)
        })
      })
  }
  function Sr (e, i, t, n) {
    M(e),
      M(i),
      M(typeof n == 'function'),
      i.chmod(e, 438, a => {
        a
          ? n(a.code === 'ENOENT' ? null : t)
          : i.stat(e, (s, r) => {
              s
                ? n(s.code === 'ENOENT' ? null : t)
                : r.isDirectory()
                ? Ct(e, i, t, n)
                : i.unlink(e, n)
            })
      })
  }
  function Qr (e, i, t) {
    let n
    M(e), M(i)
    try {
      i.chmodSync(e, 438)
    } catch (a) {
      if (a.code === 'ENOENT') return
      throw t
    }
    try {
      n = i.statSync(e)
    } catch (a) {
      if (a.code === 'ENOENT') return
      throw t
    }
    n.isDirectory() ? _t(e, i, t) : i.unlinkSync(e)
  }
  function Ct (e, i, t, n) {
    M(e),
      M(i),
      M(typeof n == 'function'),
      i.rmdir(e, a => {
        a &&
        (a.code === 'ENOTEMPTY' || a.code === 'EEXIST' || a.code === 'EPERM')
          ? Vm(e, i, n)
          : a && a.code === 'ENOTDIR'
          ? n(t)
          : n(a)
      })
  }
  function Vm (e, i, t) {
    M(e),
      M(i),
      M(typeof t == 'function'),
      i.readdir(e, (n, a) => {
        if (n) return t(n)
        let s = a.length,
          r
        if (s === 0) return i.rmdir(e, t)
        a.forEach(o => {
          qn(_r.join(e, o), i, c => {
            if (!r) {
              if (c) return t((r = c))
              --s == 0 && i.rmdir(e, t)
            }
          })
        })
      })
  }
  function Ir (e, i) {
    let t
    ;(i = i || {}),
      kr(i),
      M(e, 'rimraf: missing path'),
      M.strictEqual(typeof e, 'string', 'rimraf: path should be a string'),
      M(i, 'rimraf: missing options'),
      M.strictEqual(typeof i, 'object', 'rimraf: options should be object')
    try {
      t = i.lstatSync(e)
    } catch (n) {
      if (n.code === 'ENOENT') return
      n.code === 'EPERM' && Di && Qr(e, i, n)
    }
    try {
      t && t.isDirectory() ? _t(e, i, null) : i.unlinkSync(e)
    } catch (n) {
      if (n.code === 'ENOENT') return
      if (n.code === 'EPERM') return Di ? Qr(e, i, n) : _t(e, i, n)
      if (n.code !== 'EISDIR') throw n
      _t(e, i, n)
    }
  }
  function _t (e, i, t) {
    M(e), M(i)
    try {
      i.rmdirSync(e)
    } catch (n) {
      if (n.code === 'ENOTDIR') throw t
      if (n.code === 'ENOTEMPTY' || n.code === 'EEXIST' || n.code === 'EPERM')
        Zm(e, i)
      else if (n.code !== 'ENOENT') throw n
    }
  }
  function Zm (e, i) {
    if ((M(e), M(i), i.readdirSync(e).forEach(t => Ir(_r.join(e, t), i)), Di)) {
      let t = Date.now()
      do
        try {
          return i.rmdirSync(e, i)
        } catch {}
      while (Date.now() - t < 500)
    } else return i.rmdirSync(e, i)
  }
  wr.exports = qn
  qn.sync = Ir
})
var qi = y((PE, Fr) => {
  'use strict'
  var ef = ue().fromCallback,
    Or = Rr()
  Fr.exports = { remove: ef(Or), removeSync: Or.sync }
})
var Hr = y((HE, Lr) => {
  'use strict'
  var tf = ue().fromCallback,
    Nr = ne(),
    jr = require('path'),
    Tr = _e(),
    Dr = qi(),
    qr = tf(function (i, t) {
      ;(t = t || function () {}),
        Nr.readdir(i, (n, a) => {
          if (n) return Tr.mkdirs(i, t)
          ;(a = a.map(r => jr.join(i, r))), s()
          function s () {
            let r = a.pop()
            if (!r) return t()
            Dr.remove(r, o => {
              if (o) return t(o)
              s()
            })
          }
        })
    })
  function Pr (e) {
    let i
    try {
      i = Nr.readdirSync(e)
    } catch {
      return Tr.mkdirsSync(e)
    }
    i.forEach(t => {
      ;(t = jr.join(e, t)), Dr.removeSync(t)
    })
  }
  Lr.exports = {
    emptyDirSync: Pr,
    emptydirSync: Pr,
    emptyDir: qr,
    emptydir: qr
  }
})
var Ur = y((ME, Mr) => {
  'use strict'
  var nf = ue().fromCallback,
    $r = require('path'),
    He = ne(),
    Gr = _e()
  function af (e, i) {
    function t () {
      He.writeFile(e, '', n => {
        if (n) return i(n)
        i()
      })
    }
    He.stat(e, (n, a) => {
      if (!n && a.isFile()) return i()
      let s = $r.dirname(e)
      He.stat(s, (r, o) => {
        if (r)
          return r.code === 'ENOENT'
            ? Gr.mkdirs(s, c => {
                if (c) return i(c)
                t()
              })
            : i(r)
        o.isDirectory()
          ? t()
          : He.readdir(s, c => {
              if (c) return i(c)
            })
      })
    })
  }
  function sf (e) {
    let i
    try {
      i = He.statSync(e)
    } catch {}
    if (i && i.isFile()) return
    let t = $r.dirname(e)
    try {
      He.statSync(t).isDirectory() || He.readdirSync(t)
    } catch (n) {
      if (n && n.code === 'ENOENT') Gr.mkdirsSync(t)
      else throw n
    }
    He.writeFileSync(e, '')
  }
  Mr.exports = { createFile: nf(af), createFileSync: sf }
})
var Yr = y(($E, zr) => {
  'use strict'
  var rf = ue().fromCallback,
    Kr = require('path'),
    Xe = ne(),
    Wr = _e(),
    Jr = Pe().pathExists
  function of (e, i, t) {
    function n (a, s) {
      Xe.link(a, s, r => {
        if (r) return t(r)
        t(null)
      })
    }
    Jr(i, (a, s) => {
      if (a) return t(a)
      if (s) return t(null)
      Xe.lstat(e, r => {
        if (r)
          return (r.message = r.message.replace('lstat', 'ensureLink')), t(r)
        let o = Kr.dirname(i)
        Jr(o, (c, d) => {
          if (c) return t(c)
          if (d) return n(e, i)
          Wr.mkdirs(o, l => {
            if (l) return t(l)
            n(e, i)
          })
        })
      })
    })
  }
  function cf (e, i) {
    if (Xe.existsSync(i)) return
    try {
      Xe.lstatSync(e)
    } catch (s) {
      throw ((s.message = s.message.replace('lstat', 'ensureLink')), s)
    }
    let n = Kr.dirname(i)
    return Xe.existsSync(n) || Wr.mkdirsSync(n), Xe.linkSync(e, i)
  }
  zr.exports = { createLink: rf(of), createLinkSync: cf }
})
var Vr = y((GE, Xr) => {
  'use strict'
  var Me = require('path'),
    Pi = ne(),
    lf = Pe().pathExists
  function pf (e, i, t) {
    if (Me.isAbsolute(e))
      return Pi.lstat(e, n =>
        n
          ? ((n.message = n.message.replace('lstat', 'ensureSymlink')), t(n))
          : t(null, { toCwd: e, toDst: e })
      )
    {
      let n = Me.dirname(i),
        a = Me.join(n, e)
      return lf(a, (s, r) =>
        s
          ? t(s)
          : r
          ? t(null, { toCwd: a, toDst: e })
          : Pi.lstat(e, o =>
              o
                ? ((o.message = o.message.replace('lstat', 'ensureSymlink')),
                  t(o))
                : t(null, { toCwd: e, toDst: Me.relative(n, e) })
            )
      )
    }
  }
  function uf (e, i) {
    let t
    if (Me.isAbsolute(e)) {
      if (((t = Pi.existsSync(e)), !t))
        throw new Error('absolute srcpath does not exist')
      return { toCwd: e, toDst: e }
    } else {
      let n = Me.dirname(i),
        a = Me.join(n, e)
      if (((t = Pi.existsSync(a)), t)) return { toCwd: a, toDst: e }
      if (((t = Pi.existsSync(e)), !t))
        throw new Error('relative srcpath does not exist')
      return { toCwd: e, toDst: Me.relative(n, e) }
    }
  }
  Xr.exports = { symlinkPaths: pf, symlinkPathsSync: uf }
})
var io = y((UE, Zr) => {
  'use strict'
  var eo = ne()
  function df (e, i, t) {
    if (
      ((t = typeof i == 'function' ? i : t),
      (i = typeof i == 'function' ? !1 : i),
      i)
    )
      return t(null, i)
    eo.lstat(e, (n, a) => {
      if (n) return t(null, 'file')
      ;(i = a && a.isDirectory() ? 'dir' : 'file'), t(null, i)
    })
  }
  function mf (e, i) {
    let t
    if (i) return i
    try {
      t = eo.lstatSync(e)
    } catch {
      return 'file'
    }
    return t && t.isDirectory() ? 'dir' : 'file'
  }
  Zr.exports = { symlinkType: df, symlinkTypeSync: mf }
})
var co = y((zE, to) => {
  'use strict'
  var ff = ue().fromCallback,
    no = require('path'),
    pi = ne(),
    ao = _e(),
    hf = ao.mkdirs,
    xf = ao.mkdirsSync,
    so = Vr(),
    vf = so.symlinkPaths,
    gf = so.symlinkPathsSync,
    ro = io(),
    Af = ro.symlinkType,
    bf = ro.symlinkTypeSync,
    oo = Pe().pathExists
  function yf (e, i, t, n) {
    ;(n = typeof t == 'function' ? t : n),
      (t = typeof t == 'function' ? !1 : t),
      oo(i, (a, s) => {
        if (a) return n(a)
        if (s) return n(null)
        vf(e, i, (r, o) => {
          if (r) return n(r)
          ;(e = o.toDst),
            Af(o.toCwd, t, (c, d) => {
              if (c) return n(c)
              let l = no.dirname(i)
              oo(l, (p, u) => {
                if (p) return n(p)
                if (u) return pi.symlink(e, i, d, n)
                hf(l, m => {
                  if (m) return n(m)
                  pi.symlink(e, i, d, n)
                })
              })
            })
        })
      })
  }
  function Ef (e, i, t) {
    if (pi.existsSync(i)) return
    let a = gf(e, i)
    ;(e = a.toDst), (t = bf(a.toCwd, t))
    let s = no.dirname(i)
    return pi.existsSync(s) || xf(s), pi.symlinkSync(e, i, t)
  }
  to.exports = { createSymlink: ff(yf), createSymlinkSync: Ef }
})
var po = y((KE, lo) => {
  'use strict'
  var kt = Ur(),
    Bt = Yr(),
    St = co()
  lo.exports = {
    createFile: kt.createFile,
    createFileSync: kt.createFileSync,
    ensureFile: kt.createFile,
    ensureFileSync: kt.createFileSync,
    createLink: Bt.createLink,
    createLinkSync: Bt.createLinkSync,
    ensureLink: Bt.createLink,
    ensureLinkSync: Bt.createLinkSync,
    createSymlink: St.createSymlink,
    createSymlinkSync: St.createSymlinkSync,
    ensureSymlink: St.createSymlink,
    ensureSymlinkSync: St.createSymlinkSync
  }
})
var Qt = y((WE, uo) => {
  function wf (e, i = {}) {
    let t =
      i.EOL ||
      `
`
    return (
      JSON.stringify(e, i ? i.replacer : null, i.spaces).replace(/\n/g, t) + t
    )
  }
  function Cf (e) {
    return (
      Buffer.isBuffer(e) && (e = e.toString('utf8')), e.replace(/^\uFEFF/, '')
    )
  }
  uo.exports = { stringify: wf, stripBom: Cf }
})
var xo = y((JE, mo) => {
  var ui
  try {
    ui = ne()
  } catch (e) {
    ui = require('fs')
  }
  var It = ue(),
    { stringify: fo, stripBom: ho } = Qt()
  async function _f (e, i = {}) {
    typeof i == 'string' && (i = { encoding: i })
    let t = i.fs || ui,
      n = 'throws' in i ? i.throws : !0,
      a = await It.fromCallback(t.readFile)(e, i)
    a = ho(a)
    let s
    try {
      s = JSON.parse(a, i ? i.reviver : null)
    } catch (r) {
      if (n) throw ((r.message = `${e}: ${r.message}`), r)
      return null
    }
    return s
  }
  var kf = It.fromPromise(_f)
  function Bf (e, i = {}) {
    typeof i == 'string' && (i = { encoding: i })
    let t = i.fs || ui,
      n = 'throws' in i ? i.throws : !0
    try {
      let a = t.readFileSync(e, i)
      return (a = ho(a)), JSON.parse(a, i.reviver)
    } catch (a) {
      if (n) throw ((a.message = `${e}: ${a.message}`), a)
      return null
    }
  }
  async function Sf (e, i, t = {}) {
    let n = t.fs || ui,
      a = fo(i, t)
    await It.fromCallback(n.writeFile)(e, a, t)
  }
  var Qf = It.fromPromise(Sf)
  function If (e, i, t = {}) {
    let n = t.fs || ui,
      a = fo(i, t)
    return n.writeFileSync(e, a, t)
  }
  var Rf = { readFile: kf, readFileSync: Bf, writeFile: Qf, writeFileSync: If }
  mo.exports = Rf
})
var go = y((YE, vo) => {
  'use strict'
  var Rt = xo()
  vo.exports = {
    readJson: Rt.readFile,
    readJsonSync: Rt.readFileSync,
    writeJson: Rt.writeFile,
    writeJsonSync: Rt.writeFileSync
  }
})
var Ft = y((XE, Ao) => {
  'use strict'
  var Ff = ue().fromCallback,
    Hi = ne(),
    bo = require('path'),
    yo = _e(),
    Of = Pe().pathExists
  function Lf (e, i, t, n) {
    typeof t == 'function' && ((n = t), (t = 'utf8'))
    let a = bo.dirname(e)
    Of(a, (s, r) => {
      if (s) return n(s)
      if (r) return Hi.writeFile(e, i, t, n)
      yo.mkdirs(a, o => {
        if (o) return n(o)
        Hi.writeFile(e, i, t, n)
      })
    })
  }
  function Nf (e, ...i) {
    let t = bo.dirname(e)
    if (Hi.existsSync(t)) return Hi.writeFileSync(e, ...i)
    yo.mkdirsSync(t), Hi.writeFileSync(e, ...i)
  }
  Ao.exports = { outputFile: Ff(Lf), outputFileSync: Nf }
})
var wo = y((VE, Eo) => {
  'use strict'
  var { stringify: jf } = Qt(),
    { outputFile: Tf } = Ft()
  async function Df (e, i, t = {}) {
    let n = jf(i, t)
    await Tf(e, n, t)
  }
  Eo.exports = Df
})
var _o = y((ZE, Co) => {
  'use strict'
  var { stringify: qf } = Qt(),
    { outputFileSync: Pf } = Ft()
  function Hf (e, i, t) {
    let n = qf(i, t)
    Pf(e, n, t)
  }
  Co.exports = Hf
})
var Bo = y((ew, ko) => {
  'use strict'
  var Mf = ue().fromPromise,
    pe = go()
  pe.outputJson = Mf(wo())
  pe.outputJsonSync = _o()
  pe.outputJSON = pe.outputJson
  pe.outputJSONSync = pe.outputJsonSync
  pe.writeJSON = pe.writeJson
  pe.writeJSONSync = pe.writeJsonSync
  pe.readJSON = pe.readJson
  pe.readJSONSync = pe.readJsonSync
  ko.exports = pe
})
var Oo = y((iw, So) => {
  'use strict'
  var Qo = ne(),
    $f = require('path'),
    Gf = jn().copySync,
    Io = qi().removeSync,
    Uf = _e().mkdirpSync,
    Ro = Oi()
  function Kf (e, i, t) {
    t = t || {}
    let n = t.overwrite || t.clobber || !1,
      { srcStat: a } = Ro.checkPathsSync(e, i, 'move')
    return (
      Ro.checkParentPathsSync(e, a, i, 'move'), Uf($f.dirname(i)), zf(e, i, n)
    )
  }
  function zf (e, i, t) {
    if (t) return Io(i), Fo(e, i, t)
    if (Qo.existsSync(i)) throw new Error('dest already exists.')
    return Fo(e, i, t)
  }
  function Fo (e, i, t) {
    try {
      Qo.renameSync(e, i)
    } catch (n) {
      if (n.code !== 'EXDEV') throw n
      return Wf(e, i, t)
    }
  }
  function Wf (e, i, t) {
    return Gf(e, i, { overwrite: t, errorOnExist: !0 }), Io(e)
  }
  So.exports = Kf
})
var No = y((tw, Lo) => {
  'use strict'
  Lo.exports = { moveSync: Oo() }
})
var Po = y((nw, jo) => {
  'use strict'
  var Jf = ne(),
    Yf = require('path'),
    Xf = Dn().copy,
    To = qi().remove,
    Vf = _e().mkdirp,
    Zf = Pe().pathExists,
    Do = Oi()
  function ih (e, i, t, n) {
    typeof t == 'function' && ((n = t), (t = {}))
    let a = t.overwrite || t.clobber || !1
    Do.checkPaths(e, i, 'move', (s, r) => {
      if (s) return n(s)
      let { srcStat: o } = r
      Do.checkParentPaths(e, o, i, 'move', c => {
        if (c) return n(c)
        Vf(Yf.dirname(i), d => (d ? n(d) : eh(e, i, a, n)))
      })
    })
  }
  function eh (e, i, t, n) {
    if (t) return To(i, a => (a ? n(a) : qo(e, i, t, n)))
    Zf(i, (a, s) =>
      a ? n(a) : s ? n(new Error('dest already exists.')) : qo(e, i, t, n)
    )
  }
  function qo (e, i, t, n) {
    Jf.rename(e, i, a =>
      a ? (a.code !== 'EXDEV' ? n(a) : th(e, i, t, n)) : n()
    )
  }
  function th (e, i, t, n) {
    Xf(e, i, { overwrite: t, errorOnExist: !0 }, s => (s ? n(s) : To(e, n)))
  }
  jo.exports = ih
})
var Mo = y((aw, Ho) => {
  'use strict'
  var nh = ue().fromCallback
  Ho.exports = { move: nh(Po()) }
})
var Ve = y((sw, Pn) => {
  'use strict'
  Pn.exports = k(
    k(
      k(
        k(
          k(
            k(k(k(k(k(k(k({}, Fi()), jn()), Dn()), Hr()), po()), Bo()), _e()),
            No()
          ),
          Mo()
        ),
        Ft()
      ),
      Pe()
    ),
    qi()
  )
  var $o = require('fs')
  Object.getOwnPropertyDescriptor($o, 'promises') &&
    Object.defineProperty(Pn.exports, 'promises', {
      get () {
        return $o.promises
      }
    })
})
var Mi = y((rw, Go) => {
  'use strict'
  var ah = require('path'),
    Qe = '\\\\/',
    Uo = `[^${Qe}]`,
    Fe = '\\.',
    sh = '\\+',
    rh = '\\?',
    Ot = '\\/',
    oh = '(?=.)',
    zo = '[^/]',
    Hn = `(?:${Ot}|$)`,
    Ko = `(?:^|${Ot})`,
    Mn = `${Fe}{1,2}${Hn}`,
    ch = `(?!${Fe})`,
    lh = `(?!${Ko}${Mn})`,
    ph = `(?!${Fe}{0,1}${Hn})`,
    uh = `(?!${Mn})`,
    dh = `[^.${Ot}]`,
    mh = `${zo}*?`,
    Wo = {
      DOT_LITERAL: Fe,
      PLUS_LITERAL: sh,
      QMARK_LITERAL: rh,
      SLASH_LITERAL: Ot,
      ONE_CHAR: oh,
      QMARK: zo,
      END_ANCHOR: Hn,
      DOTS_SLASH: Mn,
      NO_DOT: ch,
      NO_DOTS: lh,
      NO_DOT_SLASH: ph,
      NO_DOTS_SLASH: uh,
      QMARK_NO_DOT: dh,
      STAR: mh,
      START_ANCHOR: Ko
    },
    fh = k(k({}, Wo), {
      SLASH_LITERAL: `[${Qe}]`,
      QMARK: Uo,
      STAR: `${Uo}*?`,
      DOTS_SLASH: `${Fe}{1,2}(?:[${Qe}]|$)`,
      NO_DOT: `(?!${Fe})`,
      NO_DOTS: `(?!(?:^|[${Qe}])${Fe}{1,2}(?:[${Qe}]|$))`,
      NO_DOT_SLASH: `(?!${Fe}{0,1}(?:[${Qe}]|$))`,
      NO_DOTS_SLASH: `(?!${Fe}{1,2}(?:[${Qe}]|$))`,
      QMARK_NO_DOT: `[^.${Qe}]`,
      START_ANCHOR: `(?:^|[${Qe}])`,
      END_ANCHOR: `(?:[${Qe}]|$)`
    }),
    hh = {
      alnum: 'a-zA-Z0-9',
      alpha: 'a-zA-Z',
      ascii: '\\x00-\\x7F',
      blank: ' \\t',
      cntrl: '\\x00-\\x1F\\x7F',
      digit: '0-9',
      graph: '\\x21-\\x7E',
      lower: 'a-z',
      print: '\\x20-\\x7E ',
      punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
      space: ' \\t\\r\\n\\v\\f',
      upper: 'A-Z',
      word: 'A-Za-z0-9_',
      xdigit: 'A-Fa-f0-9'
    }
  Go.exports = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE: hh,
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    REPLACEMENTS: { '***': '*', '**/**': '**', '**/**/**': '**' },
    CHAR_0: 48,
    CHAR_9: 57,
    CHAR_UPPERCASE_A: 65,
    CHAR_LOWERCASE_A: 97,
    CHAR_UPPERCASE_Z: 90,
    CHAR_LOWERCASE_Z: 122,
    CHAR_LEFT_PARENTHESES: 40,
    CHAR_RIGHT_PARENTHESES: 41,
    CHAR_ASTERISK: 42,
    CHAR_AMPERSAND: 38,
    CHAR_AT: 64,
    CHAR_BACKWARD_SLASH: 92,
    CHAR_CARRIAGE_RETURN: 13,
    CHAR_CIRCUMFLEX_ACCENT: 94,
    CHAR_COLON: 58,
    CHAR_COMMA: 44,
    CHAR_DOT: 46,
    CHAR_DOUBLE_QUOTE: 34,
    CHAR_EQUAL: 61,
    CHAR_EXCLAMATION_MARK: 33,
    CHAR_FORM_FEED: 12,
    CHAR_FORWARD_SLASH: 47,
    CHAR_GRAVE_ACCENT: 96,
    CHAR_HASH: 35,
    CHAR_HYPHEN_MINUS: 45,
    CHAR_LEFT_ANGLE_BRACKET: 60,
    CHAR_LEFT_CURLY_BRACE: 123,
    CHAR_LEFT_SQUARE_BRACKET: 91,
    CHAR_LINE_FEED: 10,
    CHAR_NO_BREAK_SPACE: 160,
    CHAR_PERCENT: 37,
    CHAR_PLUS: 43,
    CHAR_QUESTION_MARK: 63,
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    CHAR_RIGHT_CURLY_BRACE: 125,
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    CHAR_SEMICOLON: 59,
    CHAR_SINGLE_QUOTE: 39,
    CHAR_SPACE: 32,
    CHAR_TAB: 9,
    CHAR_UNDERSCORE: 95,
    CHAR_VERTICAL_LINE: 124,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    SEP: ah.sep,
    extglobChars (e) {
      return {
        '!': { type: 'negate', open: '(?:(?!(?:', close: `))${e.STAR})` },
        '?': { type: 'qmark', open: '(?:', close: ')?' },
        '+': { type: 'plus', open: '(?:', close: ')+' },
        '*': { type: 'star', open: '(?:', close: ')*' },
        '@': { type: 'at', open: '(?:', close: ')' }
      }
    },
    globChars (e) {
      return e === !0 ? fh : Wo
    }
  }
})
var Lt = y(fe => {
  'use strict'
  var xh = require('path'),
    vh = process.platform === 'win32',
    {
      REGEX_BACKSLASH: gh,
      REGEX_REMOVE_BACKSLASH: Ah,
      REGEX_SPECIAL_CHARS: bh,
      REGEX_SPECIAL_CHARS_GLOBAL: yh
    } = Mi()
  fe.isObject = e => e !== null && typeof e == 'object' && !Array.isArray(e)
  fe.hasRegexChars = e => bh.test(e)
  fe.isRegexChar = e => e.length === 1 && fe.hasRegexChars(e)
  fe.escapeRegex = e => e.replace(yh, '\\$1')
  fe.toPosixSlashes = e => e.replace(gh, '/')
  fe.removeBackslashes = e => e.replace(Ah, i => (i === '\\' ? '' : i))
  fe.supportsLookbehinds = () => {
    let e = process.version
      .slice(1)
      .split('.')
      .map(Number)
    return (e.length === 3 && e[0] >= 9) || (e[0] === 8 && e[1] >= 10)
  }
  fe.isWindows = e =>
    e && typeof e.windows == 'boolean'
      ? e.windows
      : vh === !0 || xh.sep === '\\'
  fe.escapeLast = (e, i, t) => {
    let n = e.lastIndexOf(i, t)
    return n === -1
      ? e
      : e[n - 1] === '\\'
      ? fe.escapeLast(e, i, n - 1)
      : `${e.slice(0, n)}\\${e.slice(n)}`
  }
  fe.removePrefix = (e, i = {}) => {
    let t = e
    return t.startsWith('./') && ((t = t.slice(2)), (i.prefix = './')), t
  }
  fe.wrapOutput = (e, i = {}, t = {}) => {
    let n = t.contains ? '' : '^',
      a = t.contains ? '' : '$',
      s = `${n}(?:${e})${a}`
    return i.negated === !0 && (s = `(?:^(?!${s}).*$)`), s
  }
})
var nc = y((cw, Jo) => {
  'use strict'
  var Yo = Lt(),
    {
      CHAR_ASTERISK: $n,
      CHAR_AT: Eh,
      CHAR_BACKWARD_SLASH: $i,
      CHAR_COMMA: wh,
      CHAR_DOT: Gn,
      CHAR_EXCLAMATION_MARK: Xo,
      CHAR_FORWARD_SLASH: Vo,
      CHAR_LEFT_CURLY_BRACE: Un,
      CHAR_LEFT_PARENTHESES: zn,
      CHAR_LEFT_SQUARE_BRACKET: Ch,
      CHAR_PLUS: _h,
      CHAR_QUESTION_MARK: Zo,
      CHAR_RIGHT_CURLY_BRACE: kh,
      CHAR_RIGHT_PARENTHESES: ec,
      CHAR_RIGHT_SQUARE_BRACKET: Bh
    } = Mi(),
    ic = e => e === Vo || e === $i,
    tc = e => {
      e.isPrefix !== !0 && (e.depth = e.isGlobstar ? Infinity : 1)
    },
    Sh = (e, i) => {
      let t = i || {},
        n = e.length - 1,
        a = t.parts === !0 || t.scanToEnd === !0,
        s = [],
        r = [],
        o = [],
        c = e,
        d = -1,
        l = 0,
        p = 0,
        u = !1,
        m = !1,
        f = !1,
        h = !1,
        x = !1,
        v = !1,
        w = !1,
        C = !1,
        Q = !1,
        L = 0,
        D,
        E,
        B = { value: '', depth: 0, isGlob: !1 },
        R = () => d >= n,
        N = () => c.charCodeAt(d + 1),
        g = () => ((D = E), c.charCodeAt(++d))
      for (; d < n; ) {
        E = g()
        let b
        if (E === $i) {
          ;(w = B.backslashes = !0), (E = g()), E === Un && (v = !0)
          continue
        }
        if (v === !0 || E === Un) {
          for (L++; R() !== !0 && (E = g()); ) {
            if (E === $i) {
              ;(w = B.backslashes = !0), g()
              continue
            }
            if (E === Un) {
              L++
              continue
            }
            if (v !== !0 && E === Gn && (E = g()) === Gn) {
              if (
                ((u = B.isBrace = !0), (f = B.isGlob = !0), (Q = !0), a === !0)
              )
                continue
              break
            }
            if (v !== !0 && E === wh) {
              if (
                ((u = B.isBrace = !0), (f = B.isGlob = !0), (Q = !0), a === !0)
              )
                continue
              break
            }
            if (E === kh && (L--, L === 0)) {
              ;(v = !1), (u = B.isBrace = !0), (Q = !0)
              break
            }
          }
          if (a === !0) continue
          break
        }
        if (E === Vo) {
          if (
            (s.push(d),
            r.push(B),
            (B = { value: '', depth: 0, isGlob: !1 }),
            Q === !0)
          )
            continue
          if (D === Gn && d === l + 1) {
            l += 2
            continue
          }
          p = d + 1
          continue
        }
        if (
          t.noext !== !0 &&
          (E === _h || E === Eh || E === $n || E === Zo || E === Xo) === !0 &&
          N() === zn
        ) {
          if (
            ((f = B.isGlob = !0), (h = B.isExtglob = !0), (Q = !0), a === !0)
          ) {
            for (; R() !== !0 && (E = g()); ) {
              if (E === $i) {
                ;(w = B.backslashes = !0), (E = g())
                continue
              }
              if (E === ec) {
                ;(f = B.isGlob = !0), (Q = !0)
                break
              }
            }
            continue
          }
          break
        }
        if (E === $n) {
          if (
            (D === $n && (x = B.isGlobstar = !0),
            (f = B.isGlob = !0),
            (Q = !0),
            a === !0)
          )
            continue
          break
        }
        if (E === Zo) {
          if (((f = B.isGlob = !0), (Q = !0), a === !0)) continue
          break
        }
        if (E === Ch)
          for (; R() !== !0 && (b = g()); ) {
            if (b === $i) {
              ;(w = B.backslashes = !0), g()
              continue
            }
            if (b === Bh) {
              if (
                ((m = B.isBracket = !0),
                (f = B.isGlob = !0),
                (Q = !0),
                a === !0)
              )
                continue
              break
            }
          }
        if (t.nonegate !== !0 && E === Xo && d === l) {
          ;(C = B.negated = !0), l++
          continue
        }
        if (t.noparen !== !0 && E === zn) {
          if (((f = B.isGlob = !0), a === !0)) {
            for (; R() !== !0 && (E = g()); ) {
              if (E === zn) {
                ;(w = B.backslashes = !0), (E = g())
                continue
              }
              if (E === ec) {
                Q = !0
                break
              }
            }
            continue
          }
          break
        }
        if (f === !0) {
          if (((Q = !0), a === !0)) continue
          break
        }
      }
      t.noext === !0 && ((h = !1), (f = !1))
      let F = c,
        T = '',
        $ = ''
      l > 0 && ((T = c.slice(0, l)), (c = c.slice(l)), (p -= l)),
        F && f === !0 && p > 0
          ? ((F = c.slice(0, p)), ($ = c.slice(p)))
          : f === !0
          ? ((F = ''), ($ = c))
          : (F = c),
        F &&
          F !== '' &&
          F !== '/' &&
          F !== c &&
          ic(F.charCodeAt(F.length - 1)) &&
          (F = F.slice(0, -1)),
        t.unescape === !0 &&
          ($ && ($ = Yo.removeBackslashes($)),
          F && w === !0 && (F = Yo.removeBackslashes(F)))
      let A = {
        prefix: T,
        input: e,
        start: l,
        base: F,
        glob: $,
        isBrace: u,
        isBracket: m,
        isGlob: f,
        isExtglob: h,
        isGlobstar: x,
        negated: C
      }
      if (
        (t.tokens === !0 &&
          ((A.maxDepth = 0), ic(E) || r.push(B), (A.tokens = r)),
        t.parts === !0 || t.tokens === !0)
      ) {
        let b
        for (let z = 0; z < s.length; z++) {
          let K = b ? b + 1 : l,
            oe = s[z],
            xe = e.slice(K, oe)
          t.tokens &&
            (z === 0 && l !== 0
              ? ((r[z].isPrefix = !0), (r[z].value = T))
              : (r[z].value = xe),
            tc(r[z]),
            (A.maxDepth += r[z].depth)),
            (z !== 0 || xe !== '') && o.push(xe),
            (b = oe)
        }
        if (b && b + 1 < e.length) {
          let z = e.slice(b + 1)
          o.push(z),
            t.tokens &&
              ((r[r.length - 1].value = z),
              tc(r[r.length - 1]),
              (A.maxDepth += r[r.length - 1].depth))
        }
        ;(A.slashes = s), (A.parts = o)
      }
      return A
    }
  Jo.exports = Sh
})
var oc = y((lw, ac) => {
  'use strict'
  var Nt = Mi(),
    ve = Lt(),
    {
      MAX_LENGTH: jt,
      POSIX_REGEX_SOURCE: Qh,
      REGEX_NON_SPECIAL_CHARS: Ih,
      REGEX_SPECIAL_CHARS_BACKREF: Rh,
      REPLACEMENTS: sc
    } = Nt,
    Fh = (e, i) => {
      if (typeof i.expandRange == 'function') return i.expandRange(...e, i)
      e.sort()
      let t = `[${e.join('-')}]`
      try {
        new RegExp(t)
      } catch (n) {
        return e.map(a => ve.escapeRegex(a)).join('..')
      }
      return t
    },
    di = (e, i) =>
      `Missing ${e}: "${i}" - use "\\\\${i}" to match literal characters`,
    rc = (e, i) => {
      if (typeof e != 'string') throw new TypeError('Expected a string')
      e = sc[e] || e
      let t = k({}, i),
        n = typeof t.maxLength == 'number' ? Math.min(jt, t.maxLength) : jt,
        a = e.length
      if (a > n)
        throw new SyntaxError(
          `Input length: ${a}, exceeds maximum allowed length: ${n}`
        )
      let s = { type: 'bos', value: '', output: t.prepend || '' },
        r = [s],
        o = t.capture ? '' : '?:',
        c = ve.isWindows(i),
        d = Nt.globChars(c),
        l = Nt.extglobChars(d),
        {
          DOT_LITERAL: p,
          PLUS_LITERAL: u,
          SLASH_LITERAL: m,
          ONE_CHAR: f,
          DOTS_SLASH: h,
          NO_DOT: x,
          NO_DOT_SLASH: v,
          NO_DOTS_SLASH: w,
          QMARK: C,
          QMARK_NO_DOT: Q,
          STAR: L,
          START_ANCHOR: D
        } = d,
        E = S => `(${o}(?:(?!${D}${S.dot ? h : p}).)*?)`,
        B = t.dot ? '' : x,
        R = t.dot ? C : Q,
        N = t.bash === !0 ? E(t) : L
      t.capture && (N = `(${N})`),
        typeof t.noext == 'boolean' && (t.noextglob = t.noext)
      let g = {
        input: e,
        index: -1,
        start: 0,
        dot: t.dot === !0,
        consumed: '',
        output: '',
        prefix: '',
        backtrack: !1,
        negated: !1,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: !1,
        tokens: r
      }
      ;(e = ve.removePrefix(e, g)), (a = e.length)
      let F = [],
        T = [],
        $ = [],
        A = s,
        b,
        z = () => g.index === a - 1,
        K = (g.peek = (S = 1) => e[g.index + S]),
        oe = (g.advance = () => e[++g.index]),
        xe = () => e.slice(g.index + 1),
        be = (S = '', G = 0) => {
          ;(g.consumed += S), (g.index += G)
        },
        Te = S => {
          ;(g.output += S.output != null ? S.output : S.value), be(S.value)
        },
        Ud = () => {
          let S = 1
          for (; K() === '!' && (K(2) !== '(' || K(3) === '?'); )
            oe(), g.start++, S++
          return S % 2 == 0 ? !1 : ((g.negated = !0), g.start++, !0)
        },
        ft = S => {
          g[S]++, $.push(S)
        },
        Je = S => {
          g[S]--, $.pop()
        },
        j = S => {
          if (A.type === 'globstar') {
            let G = g.braces > 0 && (S.type === 'comma' || S.type === 'brace'),
              _ =
                S.extglob === !0 ||
                (F.length && (S.type === 'pipe' || S.type === 'paren'))
            S.type !== 'slash' &&
              S.type !== 'paren' &&
              !G &&
              !_ &&
              ((g.output = g.output.slice(0, -A.output.length)),
              (A.type = 'star'),
              (A.value = '*'),
              (A.output = N),
              (g.output += A.output))
          }
          if (
            (F.length &&
              S.type !== 'paren' &&
              !l[S.value] &&
              (F[F.length - 1].inner += S.value),
            (S.value || S.output) && Te(S),
            A && A.type === 'text' && S.type === 'text')
          ) {
            ;(A.value += S.value), (A.output = (A.output || '') + S.value)
            return
          }
          ;(S.prev = A), r.push(S), (A = S)
        },
        ht = (S, G) => {
          let _ = k(k({}, l[G]), { conditions: 1, inner: '' })
          ;(_.prev = A), (_.parens = g.parens), (_.output = g.output)
          let q = (t.capture ? '(' : '') + _.open
          ft('parens'),
            j({ type: S, value: G, output: g.output ? '' : f }),
            j({ type: 'paren', extglob: !0, value: oe(), output: q }),
            F.push(_)
        },
        zd = S => {
          let G = S.close + (t.capture ? ')' : '')
          if (S.type === 'negate') {
            let _ = N
            S.inner &&
              S.inner.length > 1 &&
              S.inner.includes('/') &&
              (_ = E(t)),
              (_ !== N || z() || /^\)+$/.test(xe())) &&
                (G = S.close = `)$))${_}`),
              S.prev.type === 'bos' && z() && (g.negatedExtglob = !0)
          }
          j({ type: 'paren', extglob: !0, value: b, output: G }), Je('parens')
        }
      if (t.fastpaths !== !1 && !/(^[*!]|[/()[\]{}"])/.test(e)) {
        let S = !1,
          G = e.replace(Rh, (_, q, W, ce, Y, Cn) =>
            ce === '\\'
              ? ((S = !0), _)
              : ce === '?'
              ? q
                ? q + ce + (Y ? C.repeat(Y.length) : '')
                : Cn === 0
                ? R + (Y ? C.repeat(Y.length) : '')
                : C.repeat(W.length)
              : ce === '.'
              ? p.repeat(W.length)
              : ce === '*'
              ? q
                ? q + ce + (Y ? N : '')
                : N
              : q
              ? _
              : `\\${_}`
          )
        return (
          S === !0 &&
            (t.unescape === !0
              ? (G = G.replace(/\\/g, ''))
              : (G = G.replace(/\\+/g, _ =>
                  _.length % 2 == 0 ? '\\\\' : _ ? '\\' : ''
                ))),
          G === e && t.contains === !0
            ? ((g.output = e), g)
            : ((g.output = ve.wrapOutput(G, g, i)), g)
        )
      }
      for (; !z(); ) {
        if (((b = oe()), b === '\0')) continue
        if (b === '\\') {
          let _ = K()
          if ((_ === '/' && t.bash !== !0) || _ === '.' || _ === ';') continue
          if (!_) {
            ;(b += '\\'), j({ type: 'text', value: b })
            continue
          }
          let q = /^\\+/.exec(xe()),
            W = 0
          if (
            (q &&
              q[0].length > 2 &&
              ((W = q[0].length), (g.index += W), W % 2 != 0 && (b += '\\')),
            t.unescape === !0 ? (b = oe() || '') : (b += oe() || ''),
            g.brackets === 0)
          ) {
            j({ type: 'text', value: b })
            continue
          }
        }
        if (
          g.brackets > 0 &&
          (b !== ']' || A.value === '[' || A.value === '[^')
        ) {
          if (t.posix !== !1 && b === ':') {
            let _ = A.value.slice(1)
            if (_.includes('[') && ((A.posix = !0), _.includes(':'))) {
              let q = A.value.lastIndexOf('['),
                W = A.value.slice(0, q),
                ce = A.value.slice(q + 2),
                Y = Qh[ce]
              if (Y) {
                ;(A.value = W + Y),
                  (g.backtrack = !0),
                  oe(),
                  !s.output && r.indexOf(A) === 1 && (s.output = f)
                continue
              }
            }
          }
          ;((b === '[' && K() !== ':') || (b === '-' && K() === ']')) &&
            (b = `\\${b}`),
            b === ']' &&
              (A.value === '[' || A.value === '[^') &&
              (b = `\\${b}`),
            t.posix === !0 && b === '!' && A.value === '[' && (b = '^'),
            (A.value += b),
            Te({ value: b })
          continue
        }
        if (g.quotes === 1 && b !== '"') {
          ;(b = ve.escapeRegex(b)), (A.value += b), Te({ value: b })
          continue
        }
        if (b === '"') {
          ;(g.quotes = g.quotes === 1 ? 0 : 1),
            t.keepQuotes === !0 && j({ type: 'text', value: b })
          continue
        }
        if (b === '(') {
          ft('parens'), j({ type: 'paren', value: b })
          continue
        }
        if (b === ')') {
          if (g.parens === 0 && t.strictBrackets === !0)
            throw new SyntaxError(di('opening', '('))
          let _ = F[F.length - 1]
          if (_ && g.parens === _.parens + 1) {
            zd(F.pop())
            continue
          }
          j({ type: 'paren', value: b, output: g.parens ? ')' : '\\)' }),
            Je('parens')
          continue
        }
        if (b === '[') {
          if (t.nobracket === !0 || !xe().includes(']')) {
            if (t.nobracket !== !0 && t.strictBrackets === !0)
              throw new SyntaxError(di('closing', ']'))
            b = `\\${b}`
          } else ft('brackets')
          j({ type: 'bracket', value: b })
          continue
        }
        if (b === ']') {
          if (
            t.nobracket === !0 ||
            (A && A.type === 'bracket' && A.value.length === 1)
          ) {
            j({ type: 'text', value: b, output: `\\${b}` })
            continue
          }
          if (g.brackets === 0) {
            if (t.strictBrackets === !0)
              throw new SyntaxError(di('opening', '['))
            j({ type: 'text', value: b, output: `\\${b}` })
            continue
          }
          Je('brackets')
          let _ = A.value.slice(1)
          if (
            (A.posix !== !0 &&
              _[0] === '^' &&
              !_.includes('/') &&
              (b = `/${b}`),
            (A.value += b),
            Te({ value: b }),
            t.literalBrackets === !1 || ve.hasRegexChars(_))
          )
            continue
          let q = ve.escapeRegex(A.value)
          if (
            ((g.output = g.output.slice(0, -A.value.length)),
            t.literalBrackets === !0)
          ) {
            ;(g.output += q), (A.value = q)
            continue
          }
          ;(A.value = `(${o}${q}|${A.value})`), (g.output += A.value)
          continue
        }
        if (b === '{' && t.nobrace !== !0) {
          ft('braces')
          let _ = {
            type: 'brace',
            value: b,
            output: '(',
            outputIndex: g.output.length,
            tokensIndex: g.tokens.length
          }
          T.push(_), j(_)
          continue
        }
        if (b === '}') {
          let _ = T[T.length - 1]
          if (t.nobrace === !0 || !_) {
            j({ type: 'text', value: b, output: b })
            continue
          }
          let q = ')'
          if (_.dots === !0) {
            let W = r.slice(),
              ce = []
            for (
              let Y = W.length - 1;
              Y >= 0 && (r.pop(), W[Y].type !== 'brace');
              Y--
            )
              W[Y].type !== 'dots' && ce.unshift(W[Y].value)
            ;(q = Fh(ce, t)), (g.backtrack = !0)
          }
          if (_.comma !== !0 && _.dots !== !0) {
            let W = g.output.slice(0, _.outputIndex),
              ce = g.tokens.slice(_.tokensIndex)
            ;(_.value = _.output = '\\{'), (b = q = '\\}'), (g.output = W)
            for (let Y of ce) g.output += Y.output || Y.value
          }
          j({ type: 'brace', value: b, output: q }), Je('braces'), T.pop()
          continue
        }
        if (b === '|') {
          F.length > 0 && F[F.length - 1].conditions++,
            j({ type: 'text', value: b })
          continue
        }
        if (b === ',') {
          let _ = b,
            q = T[T.length - 1]
          q && $[$.length - 1] === 'braces' && ((q.comma = !0), (_ = '|')),
            j({ type: 'comma', value: b, output: _ })
          continue
        }
        if (b === '/') {
          if (A.type === 'dot' && g.index === g.start + 1) {
            ;(g.start = g.index + 1),
              (g.consumed = ''),
              (g.output = ''),
              r.pop(),
              (A = s)
            continue
          }
          j({ type: 'slash', value: b, output: m })
          continue
        }
        if (b === '.') {
          if (g.braces > 0 && A.type === 'dot') {
            A.value === '.' && (A.output = p)
            let _ = T[T.length - 1]
            ;(A.type = 'dots'), (A.output += b), (A.value += b), (_.dots = !0)
            continue
          }
          if (
            g.braces + g.parens === 0 &&
            A.type !== 'bos' &&
            A.type !== 'slash'
          ) {
            j({ type: 'text', value: b, output: p })
            continue
          }
          j({ type: 'dot', value: b, output: p })
          continue
        }
        if (b === '?') {
          if (
            !(A && A.value === '(') &&
            t.noextglob !== !0 &&
            K() === '(' &&
            K(2) !== '?'
          ) {
            ht('qmark', b)
            continue
          }
          if (A && A.type === 'paren') {
            let q = K(),
              W = b
            if (q === '<' && !ve.supportsLookbehinds())
              throw new Error(
                'Node.js v10 or higher is required for regex lookbehinds'
              )
            ;((A.value === '(' && !/[!=<:]/.test(q)) ||
              (q === '<' && !/<([!=]|\w+>)/.test(xe()))) &&
              (W = `\\${b}`),
              j({ type: 'text', value: b, output: W })
            continue
          }
          if (t.dot !== !0 && (A.type === 'slash' || A.type === 'bos')) {
            j({ type: 'qmark', value: b, output: Q })
            continue
          }
          j({ type: 'qmark', value: b, output: C })
          continue
        }
        if (b === '!') {
          if (
            t.noextglob !== !0 &&
            K() === '(' &&
            (K(2) !== '?' || !/[!=<:]/.test(K(3)))
          ) {
            ht('negate', b)
            continue
          }
          if (t.nonegate !== !0 && g.index === 0) {
            Ud()
            continue
          }
        }
        if (b === '+') {
          if (t.noextglob !== !0 && K() === '(' && K(2) !== '?') {
            ht('plus', b)
            continue
          }
          if ((A && A.value === '(') || t.regex === !1) {
            j({ type: 'plus', value: b, output: u })
            continue
          }
          if (
            (A &&
              (A.type === 'bracket' ||
                A.type === 'paren' ||
                A.type === 'brace')) ||
            g.parens > 0
          ) {
            j({ type: 'plus', value: b })
            continue
          }
          j({ type: 'plus', value: u })
          continue
        }
        if (b === '@') {
          if (t.noextglob !== !0 && K() === '(' && K(2) !== '?') {
            j({ type: 'at', extglob: !0, value: b, output: '' })
            continue
          }
          j({ type: 'text', value: b })
          continue
        }
        if (b !== '*') {
          ;(b === '$' || b === '^') && (b = `\\${b}`)
          let _ = Ih.exec(xe())
          _ && ((b += _[0]), (g.index += _[0].length)),
            j({ type: 'text', value: b })
          continue
        }
        if (A && (A.type === 'globstar' || A.star === !0)) {
          ;(A.type = 'star'),
            (A.star = !0),
            (A.value += b),
            (A.output = N),
            (g.backtrack = !0),
            (g.globstar = !0),
            be(b)
          continue
        }
        let S = xe()
        if (t.noextglob !== !0 && /^\([^?]/.test(S)) {
          ht('star', b)
          continue
        }
        if (A.type === 'star') {
          if (t.noglobstar === !0) {
            be(b)
            continue
          }
          let _ = A.prev,
            q = _.prev,
            W = _.type === 'slash' || _.type === 'bos',
            ce = q && (q.type === 'star' || q.type === 'globstar')
          if (t.bash === !0 && (!W || (S[0] && S[0] !== '/'))) {
            j({ type: 'star', value: b, output: '' })
            continue
          }
          let Y = g.braces > 0 && (_.type === 'comma' || _.type === 'brace'),
            Cn = F.length && (_.type === 'pipe' || _.type === 'paren')
          if (!W && _.type !== 'paren' && !Y && !Cn) {
            j({ type: 'star', value: b, output: '' })
            continue
          }
          for (; S.slice(0, 3) === '/**'; ) {
            let xt = e[g.index + 4]
            if (xt && xt !== '/') break
            ;(S = S.slice(3)), be('/**', 3)
          }
          if (_.type === 'bos' && z()) {
            ;(A.type = 'globstar'),
              (A.value += b),
              (A.output = E(t)),
              (g.output = A.output),
              (g.globstar = !0),
              be(b)
            continue
          }
          if (_.type === 'slash' && _.prev.type !== 'bos' && !ce && z()) {
            ;(g.output = g.output.slice(0, -(_.output + A.output).length)),
              (_.output = `(?:${_.output}`),
              (A.type = 'globstar'),
              (A.output = E(t) + (t.strictSlashes ? ')' : '|$)')),
              (A.value += b),
              (g.globstar = !0),
              (g.output += _.output + A.output),
              be(b)
            continue
          }
          if (_.type === 'slash' && _.prev.type !== 'bos' && S[0] === '/') {
            let xt = S[1] !== void 0 ? '|$' : ''
            ;(g.output = g.output.slice(0, -(_.output + A.output).length)),
              (_.output = `(?:${_.output}`),
              (A.type = 'globstar'),
              (A.output = `${E(t)}${m}|${m}${xt})`),
              (A.value += b),
              (g.output += _.output + A.output),
              (g.globstar = !0),
              be(b + oe()),
              j({ type: 'slash', value: '/', output: '' })
            continue
          }
          if (_.type === 'bos' && S[0] === '/') {
            ;(A.type = 'globstar'),
              (A.value += b),
              (A.output = `(?:^|${m}|${E(t)}${m})`),
              (g.output = A.output),
              (g.globstar = !0),
              be(b + oe()),
              j({ type: 'slash', value: '/', output: '' })
            continue
          }
          ;(g.output = g.output.slice(0, -A.output.length)),
            (A.type = 'globstar'),
            (A.output = E(t)),
            (A.value += b),
            (g.output += A.output),
            (g.globstar = !0),
            be(b)
          continue
        }
        let G = { type: 'star', value: b, output: N }
        if (t.bash === !0) {
          ;(G.output = '.*?'),
            (A.type === 'bos' || A.type === 'slash') &&
              (G.output = B + G.output),
            j(G)
          continue
        }
        if (
          A &&
          (A.type === 'bracket' || A.type === 'paren') &&
          t.regex === !0
        ) {
          ;(G.output = b), j(G)
          continue
        }
        ;(g.index === g.start || A.type === 'slash' || A.type === 'dot') &&
          (A.type === 'dot'
            ? ((g.output += v), (A.output += v))
            : t.dot === !0
            ? ((g.output += w), (A.output += w))
            : ((g.output += B), (A.output += B)),
          K() !== '*' && ((g.output += f), (A.output += f))),
          j(G)
      }
      for (; g.brackets > 0; ) {
        if (t.strictBrackets === !0) throw new SyntaxError(di('closing', ']'))
        ;(g.output = ve.escapeLast(g.output, '[')), Je('brackets')
      }
      for (; g.parens > 0; ) {
        if (t.strictBrackets === !0) throw new SyntaxError(di('closing', ')'))
        ;(g.output = ve.escapeLast(g.output, '(')), Je('parens')
      }
      for (; g.braces > 0; ) {
        if (t.strictBrackets === !0) throw new SyntaxError(di('closing', '}'))
        ;(g.output = ve.escapeLast(g.output, '{')), Je('braces')
      }
      if (
        (t.strictSlashes !== !0 &&
          (A.type === 'star' || A.type === 'bracket') &&
          j({ type: 'maybe_slash', value: '', output: `${m}?` }),
        g.backtrack === !0)
      ) {
        g.output = ''
        for (let S of g.tokens)
          (g.output += S.output != null ? S.output : S.value),
            S.suffix && (g.output += S.suffix)
      }
      return g
    }
  rc.fastpaths = (e, i) => {
    let t = k({}, i),
      n = typeof t.maxLength == 'number' ? Math.min(jt, t.maxLength) : jt,
      a = e.length
    if (a > n)
      throw new SyntaxError(
        `Input length: ${a}, exceeds maximum allowed length: ${n}`
      )
    e = sc[e] || e
    let s = ve.isWindows(i),
      {
        DOT_LITERAL: r,
        SLASH_LITERAL: o,
        ONE_CHAR: c,
        DOTS_SLASH: d,
        NO_DOT: l,
        NO_DOTS: p,
        NO_DOTS_SLASH: u,
        STAR: m,
        START_ANCHOR: f
      } = Nt.globChars(s),
      h = t.dot ? p : l,
      x = t.dot ? u : l,
      v = t.capture ? '' : '?:',
      w = { negated: !1, prefix: '' },
      C = t.bash === !0 ? '.*?' : m
    t.capture && (C = `(${C})`)
    let Q = B =>
        B.noglobstar === !0 ? C : `(${v}(?:(?!${f}${B.dot ? d : r}).)*?)`,
      L = B => {
        switch (B) {
          case '*':
            return `${h}${c}${C}`
          case '.*':
            return `${r}${c}${C}`
          case '*.*':
            return `${h}${C}${r}${c}${C}`
          case '*/*':
            return `${h}${C}${o}${c}${x}${C}`
          case '**':
            return h + Q(t)
          case '**/*':
            return `(?:${h}${Q(t)}${o})?${x}${c}${C}`
          case '**/*.*':
            return `(?:${h}${Q(t)}${o})?${x}${C}${r}${c}${C}`
          case '**/.*':
            return `(?:${h}${Q(t)}${o})?${r}${c}${C}`
          default: {
            let R = /^(.*?)\.(\w+)$/.exec(B)
            if (!R) return
            let N = L(R[1])
            return N ? N + r + R[2] : void 0
          }
        }
      },
      D = ve.removePrefix(e, w),
      E = L(D)
    return E && t.strictSlashes !== !0 && (E += `${o}?`), E
  }
  ac.exports = rc
})
var lc = y((pw, cc) => {
  'use strict'
  var Oh = require('path'),
    Lh = nc(),
    Kn = oc(),
    Wn = Lt(),
    Nh = Mi(),
    jh = e => e && typeof e == 'object' && !Array.isArray(e),
    J = (e, i, t = !1) => {
      if (Array.isArray(e)) {
        let l = e.map(u => J(u, i, t))
        return u => {
          for (let m of l) {
            let f = m(u)
            if (f) return f
          }
          return !1
        }
      }
      let n = jh(e) && e.tokens && e.input
      if (e === '' || (typeof e != 'string' && !n))
        throw new TypeError('Expected pattern to be a non-empty string')
      let a = i || {},
        s = Wn.isWindows(i),
        r = n ? J.compileRe(e, i) : J.makeRe(e, i, !1, !0),
        o = r.state
      delete r.state
      let c = () => !1
      if (a.ignore) {
        let l = k(k({}, i), { ignore: null, onMatch: null, onResult: null })
        c = J(a.ignore, l, t)
      }
      let d = (l, p = !1) => {
        let { isMatch: u, match: m, output: f } = J.test(l, r, i, {
            glob: e,
            posix: s
          }),
          h = {
            glob: e,
            state: o,
            regex: r,
            posix: s,
            input: l,
            output: f,
            match: m,
            isMatch: u
          }
        return (
          typeof a.onResult == 'function' && a.onResult(h),
          u === !1
            ? ((h.isMatch = !1), p ? h : !1)
            : c(l)
            ? (typeof a.onIgnore == 'function' && a.onIgnore(h),
              (h.isMatch = !1),
              p ? h : !1)
            : (typeof a.onMatch == 'function' && a.onMatch(h), p ? h : !0)
        )
      }
      return t && (d.state = o), d
    }
  J.test = (e, i, t, { glob: n, posix: a } = {}) => {
    if (typeof e != 'string')
      throw new TypeError('Expected input to be a string')
    if (e === '') return { isMatch: !1, output: '' }
    let s = t || {},
      r = s.format || (a ? Wn.toPosixSlashes : null),
      o = e === n,
      c = o && r ? r(e) : e
    return (
      o === !1 && ((c = r ? r(e) : e), (o = c === n)),
      (o === !1 || s.capture === !0) &&
        (s.matchBase === !0 || s.basename === !0
          ? (o = J.matchBase(e, i, t, a))
          : (o = i.exec(c))),
      { isMatch: Boolean(o), match: o, output: c }
    )
  }
  J.matchBase = (e, i, t, n = Wn.isWindows(t)) =>
    (i instanceof RegExp ? i : J.makeRe(i, t)).test(Oh.basename(e))
  J.isMatch = (e, i, t) => J(i, t)(e)
  J.parse = (e, i) =>
    Array.isArray(e)
      ? e.map(t => J.parse(t, i))
      : Kn(e, k(k({}, i), { fastpaths: !1 }))
  J.scan = (e, i) => Lh(e, i)
  J.compileRe = (e, i, t = !1, n = !1) => {
    if (t === !0) return e.output
    let a = i || {},
      s = a.contains ? '' : '^',
      r = a.contains ? '' : '$',
      o = `${s}(?:${e.output})${r}`
    e && e.negated === !0 && (o = `^(?!${o}).*$`)
    let c = J.toRegex(o, i)
    return n === !0 && (c.state = e), c
  }
  J.makeRe = (e, i, t = !1, n = !1) => {
    if (!e || typeof e != 'string')
      throw new TypeError('Expected a non-empty string')
    let a = i || {},
      s = { negated: !1, fastpaths: !0 },
      r = '',
      o
    return (
      e.startsWith('./') && ((e = e.slice(2)), (r = s.prefix = './')),
      a.fastpaths !== !1 &&
        (e[0] === '.' || e[0] === '*') &&
        (o = Kn.fastpaths(e, i)),
      o === void 0
        ? ((s = Kn(e, i)), (s.prefix = r + (s.prefix || '')))
        : (s.output = o),
      J.compileRe(s, i, t, n)
    )
  }
  J.toRegex = (e, i) => {
    try {
      let t = i || {}
      return new RegExp(e, t.flags || (t.nocase ? 'i' : ''))
    } catch (t) {
      if (i && i.debug === !0) throw t
      return /$^/
    }
  }
  J.constants = Nh
  cc.exports = J
})
var mi = y((uw, pc) => {
  'use strict'
  pc.exports = lc()
})
var Jn = y(ke => {
  'use strict'
  var uc = require('fs'),
    Th = require('os'),
    Tt = require('path'),
    Dh = mi(),
    qh = (...e) => [...new Set([].concat.apply([], e).filter(Boolean))]
  ke.expand = e => e.replace(/^~/, Th.homedir())
  ke.sift = (e, i = {}) => {
    let t = { includes: [], excludes: [], globs: 0 },
      n = 0
    for (let a of [].concat(e || [])) {
      if (typeof a != 'string') return null
      let s = Dh.scan(a)
      ;(s.pattern = Tt.posix.join(s.base, s.glob)),
        (s.index = n++),
        s.isGlob && t.globs++,
        i.relative && ((s.pattern = ke.toRelative(s.pattern, i)), delete i.cwd),
        s.negated ? t.excludes.push(s) : t.includes.push(s)
    }
    return t
  }
  ke.setIgnores = (e, i, t) => {
    let n = Object.assign({}, e),
      a = []
    for (let s of i) s.index > t && a.push(s.pattern)
    return (n.ignore = qh([], n.ignore, a)), n
  }
  ke.toRelative = (e, i) =>
    Tt.relative(process.cwd(), Tt.resolve(ke.expand(i.cwd), e))
  ke.onMatch = (e, i) => t => {
    i &&
      typeof i.onMatch == 'function' &&
      i.onMatch({ pattern: e, options: i, path: t })
  }
  ke.getPaths = (e, i = {}) => {
    let t = a => Tt.resolve(ke.expand(i.cwd), a),
      n = []
    for (let a of e) {
      let s = ke.onMatch(a, i),
        r = t(a),
        o = a
      if ((i.absolute && (o = r), i.realpath))
        try {
          o = uc.realpathSync(r)
        } catch (c) {
          continue
        }
      !uc.existsSync(r) || (i.onMatch && s(o), n.push(o))
    }
    return i.onFiles && i.onFiles(n, i), n
  }
})
var dc = y(Yn => {
  var Ze = require('path'),
    $e = process.platform === 'win32',
    Ge = require('fs'),
    Ph = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG)
  function Hh () {
    var e
    if (Ph) {
      var i = new Error()
      e = t
    } else e = n
    return e
    function t (a) {
      a && ((i.message = a.message), (a = i), n(a))
    }
    function n (a) {
      if (a) {
        if (process.throwDeprecation) throw a
        if (!process.noDeprecation) {
          var s = 'fs: missing callback ' + (a.stack || a.message)
          process.traceDeprecation ? console.trace(s) : console.error(s)
        }
      }
    }
  }
  function Mh (e) {
    return typeof e == 'function' ? e : Hh()
  }
  var mw = Ze.normalize
  $e ? (Oe = /(.*?)(?:[\/\\]+|$)/g) : (Oe = /(.*?)(?:[\/]+|$)/g)
  var Oe
  $e
    ? (Gi = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/)
    : (Gi = /^[\/]*/)
  var Gi
  Yn.realpathSync = function (i, t) {
    if (((i = Ze.resolve(i)), t && Object.prototype.hasOwnProperty.call(t, i)))
      return t[i]
    var n = i,
      a = {},
      s = {},
      r,
      o,
      c,
      d
    l()
    function l () {
      var x = Gi.exec(i)
      ;(r = x[0].length),
        (o = x[0]),
        (c = x[0]),
        (d = ''),
        $e && !s[c] && (Ge.lstatSync(c), (s[c] = !0))
    }
    for (; r < i.length; ) {
      Oe.lastIndex = r
      var p = Oe.exec(i)
      if (
        ((d = o),
        (o += p[0]),
        (c = d + p[1]),
        (r = Oe.lastIndex),
        !(s[c] || (t && t[c] === c)))
      ) {
        var u
        if (t && Object.prototype.hasOwnProperty.call(t, c)) u = t[c]
        else {
          var m = Ge.lstatSync(c)
          if (!m.isSymbolicLink()) {
            ;(s[c] = !0), t && (t[c] = c)
            continue
          }
          var f = null
          if (!$e) {
            var h = m.dev.toString(32) + ':' + m.ino.toString(32)
            a.hasOwnProperty(h) && (f = a[h])
          }
          f === null && (Ge.statSync(c), (f = Ge.readlinkSync(c))),
            (u = Ze.resolve(d, f)),
            t && (t[c] = u),
            $e || (a[h] = f)
        }
        ;(i = Ze.resolve(u, i.slice(r))), l()
      }
    }
    return t && (t[n] = i), i
  }
  Yn.realpath = function (i, t, n) {
    if (
      (typeof n != 'function' && ((n = Mh(t)), (t = null)),
      (i = Ze.resolve(i)),
      t && Object.prototype.hasOwnProperty.call(t, i))
    )
      return process.nextTick(n.bind(null, null, t[i]))
    var a = i,
      s = {},
      r = {},
      o,
      c,
      d,
      l
    p()
    function p () {
      var x = Gi.exec(i)
      ;(o = x[0].length),
        (c = x[0]),
        (d = x[0]),
        (l = ''),
        $e && !r[d]
          ? Ge.lstat(d, function (v) {
              if (v) return n(v)
              ;(r[d] = !0), u()
            })
          : process.nextTick(u)
    }
    function u () {
      if (o >= i.length) return t && (t[a] = i), n(null, i)
      Oe.lastIndex = o
      var x = Oe.exec(i)
      return (
        (l = c),
        (c += x[0]),
        (d = l + x[1]),
        (o = Oe.lastIndex),
        r[d] || (t && t[d] === d)
          ? process.nextTick(u)
          : t && Object.prototype.hasOwnProperty.call(t, d)
          ? h(t[d])
          : Ge.lstat(d, m)
      )
    }
    function m (x, v) {
      if (x) return n(x)
      if (!v.isSymbolicLink())
        return (r[d] = !0), t && (t[d] = d), process.nextTick(u)
      if (!$e) {
        var w = v.dev.toString(32) + ':' + v.ino.toString(32)
        if (s.hasOwnProperty(w)) return f(null, s[w], d)
      }
      Ge.stat(d, function (C) {
        if (C) return n(C)
        Ge.readlink(d, function (Q, L) {
          $e || (s[w] = L), f(Q, L)
        })
      })
    }
    function f (x, v, w) {
      if (x) return n(x)
      var C = Ze.resolve(l, v)
      t && (t[w] = C), h(C)
    }
    function h (x) {
      ;(i = Ze.resolve(x, i.slice(o))), p()
    }
  }
})
var ea = y((hw, mc) => {
  mc.exports = Ue
  Ue.realpath = Ue
  Ue.sync = Xn
  Ue.realpathSync = Xn
  Ue.monkeypatch = $h
  Ue.unmonkeypatch = Gh
  var fi = require('fs'),
    Vn = fi.realpath,
    Zn = fi.realpathSync,
    Uh = process.version,
    fc = /^v[0-5]\./.test(Uh),
    hc = dc()
  function xc (e) {
    return (
      e &&
      e.syscall === 'realpath' &&
      (e.code === 'ELOOP' || e.code === 'ENOMEM' || e.code === 'ENAMETOOLONG')
    )
  }
  function Ue (e, i, t) {
    if (fc) return Vn(e, i, t)
    typeof i == 'function' && ((t = i), (i = null)),
      Vn(e, i, function (n, a) {
        xc(n) ? hc.realpath(e, i, t) : t(n, a)
      })
  }
  function Xn (e, i) {
    if (fc) return Zn(e, i)
    try {
      return Zn(e, i)
    } catch (t) {
      if (xc(t)) return hc.realpathSync(e, i)
      throw t
    }
  }
  function $h () {
    ;(fi.realpath = Ue), (fi.realpathSync = Xn)
  }
  function Gh () {
    ;(fi.realpath = Vn), (fi.realpathSync = Zn)
  }
})
var gc = y((xw, vc) => {
  vc.exports = function (e, i) {
    for (var t = [], n = 0; n < e.length; n++) {
      var a = i(e[n], n)
      zh(a) ? t.push.apply(t, a) : t.push(a)
    }
    return t
  }
  var zh =
    Array.isArray ||
    function (e) {
      return Object.prototype.toString.call(e) === '[object Array]'
    }
})
var wc = y((vw, Ac) => {
  'use strict'
  Ac.exports = bc
  function bc (e, i, t) {
    e instanceof RegExp && (e = yc(e, t)), i instanceof RegExp && (i = yc(i, t))
    var n = Ec(e, i, t)
    return (
      n && {
        start: n[0],
        end: n[1],
        pre: t.slice(0, n[0]),
        body: t.slice(n[0] + e.length, n[1]),
        post: t.slice(n[1] + i.length)
      }
    )
  }
  function yc (e, i) {
    var t = i.match(e)
    return t ? t[0] : null
  }
  bc.range = Ec
  function Ec (e, i, t) {
    var n,
      a,
      s,
      r,
      o,
      c = t.indexOf(e),
      d = t.indexOf(i, c + 1),
      l = c
    if (c >= 0 && d > 0) {
      for (n = [], s = t.length; l >= 0 && !o; )
        l == c
          ? (n.push(l), (c = t.indexOf(e, l + 1)))
          : n.length == 1
          ? (o = [n.pop(), d])
          : ((a = n.pop()),
            a < s && ((s = a), (r = d)),
            (d = t.indexOf(i, l + 1))),
          (l = c < d && c >= 0 ? c : d)
      n.length && (o = [s, r])
    }
    return o
  }
})
var Rc = y((gw, Cc) => {
  var Kh = gc(),
    _c = wc()
  Cc.exports = Wh
  var kc = '\0SLASH' + Math.random() + '\0',
    Bc = '\0OPEN' + Math.random() + '\0',
    ia = '\0CLOSE' + Math.random() + '\0',
    Sc = '\0COMMA' + Math.random() + '\0',
    Qc = '\0PERIOD' + Math.random() + '\0'
  function ta (e) {
    return parseInt(e, 10) == e ? parseInt(e, 10) : e.charCodeAt(0)
  }
  function Jh (e) {
    return e
      .split('\\\\')
      .join(kc)
      .split('\\{')
      .join(Bc)
      .split('\\}')
      .join(ia)
      .split('\\,')
      .join(Sc)
      .split('\\.')
      .join(Qc)
  }
  function Yh (e) {
    return e
      .split(kc)
      .join('\\')
      .split(Bc)
      .join('{')
      .split(ia)
      .join('}')
      .split(Sc)
      .join(',')
      .split(Qc)
      .join('.')
  }
  function Ic (e) {
    if (!e) return ['']
    var i = [],
      t = _c('{', '}', e)
    if (!t) return e.split(',')
    var n = t.pre,
      a = t.body,
      s = t.post,
      r = n.split(',')
    r[r.length - 1] += '{' + a + '}'
    var o = Ic(s)
    return (
      s.length && ((r[r.length - 1] += o.shift()), r.push.apply(r, o)),
      i.push.apply(i, r),
      i
    )
  }
  function Wh (e) {
    return e
      ? (e.substr(0, 2) === '{}' && (e = '\\{\\}' + e.substr(2)),
        hi(Jh(e), !0).map(Yh))
      : []
  }
  function Xh (e) {
    return '{' + e + '}'
  }
  function Vh (e) {
    return /^-?0\d/.test(e)
  }
  function Zh (e, i) {
    return e <= i
  }
  function ex (e, i) {
    return e >= i
  }
  function hi (e, i) {
    var t = [],
      n = _c('{', '}', e)
    if (!n || /\$$/.test(n.pre)) return [e]
    var a = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(n.body),
      s = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(n.body),
      r = a || s,
      o = n.body.indexOf(',') >= 0
    if (!r && !o)
      return n.post.match(/,.*\}/)
        ? ((e = n.pre + '{' + n.body + ia + n.post), hi(e))
        : [e]
    var c
    if (r) c = n.body.split(/\.\./)
    else if (
      ((c = Ic(n.body)),
      c.length === 1 && ((c = hi(c[0], !1).map(Xh)), c.length === 1))
    ) {
      var l = n.post.length ? hi(n.post, !1) : ['']
      return l.map(function (g) {
        return n.pre + c[0] + g
      })
    }
    var d = n.pre,
      l = n.post.length ? hi(n.post, !1) : [''],
      p
    if (r) {
      var u = ta(c[0]),
        m = ta(c[1]),
        f = Math.max(c[0].length, c[1].length),
        h = c.length == 3 ? Math.abs(ta(c[2])) : 1,
        x = Zh,
        v = m < u
      v && ((h *= -1), (x = ex))
      var w = c.some(Vh)
      p = []
      for (var C = u; x(C, m); C += h) {
        var Q
        if (s) (Q = String.fromCharCode(C)), Q === '\\' && (Q = '')
        else if (((Q = String(C)), w)) {
          var L = f - Q.length
          if (L > 0) {
            var D = new Array(L + 1).join('0')
            C < 0 ? (Q = '-' + D + Q.slice(1)) : (Q = D + Q)
          }
        }
        p.push(Q)
      }
    } else
      p = Kh(c, function (N) {
        return hi(N, !1)
      })
    for (var E = 0; E < p.length; E++)
      for (var B = 0; B < l.length; B++) {
        var R = d + p[E] + l[B]
        ;(!i || r || R) && t.push(R)
      }
    return t
  }
})
var qt = y((Aw, Fc) => {
  Fc.exports = ye
  ye.Minimatch = V
  var Ui = { sep: '/' }
  try {
    Ui = require('path')
  } catch (e) {}
  var na = (ye.GLOBSTAR = V.GLOBSTAR = {}),
    ix = Rc(),
    Oc = {
      '!': { open: '(?:(?!(?:', close: '))[^/]*?)' },
      '?': { open: '(?:', close: ')?' },
      '+': { open: '(?:', close: ')+' },
      '*': { open: '(?:', close: ')*' },
      '@': { open: '(?:', close: ')' }
    },
    aa = '[^/]',
    sa = aa + '*?',
    tx = '(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?',
    nx = '(?:(?!(?:\\/|^)\\.).)*?',
    Lc = ax('().*{}+?[]^$\\!')
  function ax (e) {
    return e.split('').reduce(function (i, t) {
      return (i[t] = !0), i
    }, {})
  }
  var Nc = /\/+/
  ye.filter = sx
  function sx (e, i) {
    return (
      (i = i || {}),
      function (t, n, a) {
        return ye(t, e, i)
      }
    )
  }
  function jc (e, i) {
    ;(e = e || {}), (i = i || {})
    var t = {}
    return (
      Object.keys(i).forEach(function (n) {
        t[n] = i[n]
      }),
      Object.keys(e).forEach(function (n) {
        t[n] = e[n]
      }),
      t
    )
  }
  ye.defaults = function (e) {
    if (!e || !Object.keys(e).length) return ye
    var i = ye,
      t = function (a, s, r) {
        return i.minimatch(a, s, jc(e, r))
      }
    return (
      (t.Minimatch = function (a, s) {
        return new i.Minimatch(a, jc(e, s))
      }),
      t
    )
  }
  V.defaults = function (e) {
    return !e || !Object.keys(e).length ? V : ye.defaults(e).Minimatch
  }
  function ye (e, i, t) {
    if (typeof i != 'string')
      throw new TypeError('glob pattern string required')
    return (
      t || (t = {}),
      !t.nocomment && i.charAt(0) === '#'
        ? !1
        : i.trim() === ''
        ? e === ''
        : new V(i, t).match(e)
    )
  }
  function V (e, i) {
    if (!(this instanceof V)) return new V(e, i)
    if (typeof e != 'string')
      throw new TypeError('glob pattern string required')
    i || (i = {}),
      (e = e.trim()),
      Ui.sep !== '/' && (e = e.split(Ui.sep).join('/')),
      (this.options = i),
      (this.set = []),
      (this.pattern = e),
      (this.regexp = null),
      (this.negate = !1),
      (this.comment = !1),
      (this.empty = !1),
      this.make()
  }
  V.prototype.debug = function () {}
  V.prototype.make = rx
  function rx () {
    if (!this._made) {
      var e = this.pattern,
        i = this.options
      if (!i.nocomment && e.charAt(0) === '#') {
        this.comment = !0
        return
      }
      if (!e) {
        this.empty = !0
        return
      }
      this.parseNegate()
      var t = (this.globSet = this.braceExpand())
      i.debug && (this.debug = console.error),
        this.debug(this.pattern, t),
        (t = this.globParts = t.map(function (n) {
          return n.split(Nc)
        })),
        this.debug(this.pattern, t),
        (t = t.map(function (n, a, s) {
          return n.map(this.parse, this)
        }, this)),
        this.debug(this.pattern, t),
        (t = t.filter(function (n) {
          return n.indexOf(!1) === -1
        })),
        this.debug(this.pattern, t),
        (this.set = t)
    }
  }
  V.prototype.parseNegate = ox
  function ox () {
    var e = this.pattern,
      i = !1,
      t = this.options,
      n = 0
    if (!t.nonegate) {
      for (var a = 0, s = e.length; a < s && e.charAt(a) === '!'; a++)
        (i = !i), n++
      n && (this.pattern = e.substr(n)), (this.negate = i)
    }
  }
  ye.braceExpand = function (e, i) {
    return Tc(e, i)
  }
  V.prototype.braceExpand = Tc
  function Tc (e, i) {
    if (
      (i || (this instanceof V ? (i = this.options) : (i = {})),
      (e = typeof e == 'undefined' ? this.pattern : e),
      typeof e == 'undefined')
    )
      throw new TypeError('undefined pattern')
    return i.nobrace || !e.match(/\{.*\}/) ? [e] : ix(e)
  }
  V.prototype.parse = cx
  var Dt = {}
  function cx (e, i) {
    if (e.length > 1024 * 64) throw new TypeError('pattern is too long')
    var t = this.options
    if (!t.noglobstar && e === '**') return na
    if (e === '') return ''
    var n = '',
      a = !!t.nocase,
      s = !1,
      r = [],
      o = [],
      c,
      d = !1,
      l = -1,
      p = -1,
      u =
        e.charAt(0) === '.'
          ? ''
          : t.dot
          ? '(?!(?:^|\\/)\\.{1,2}(?:$|\\/))'
          : '(?!\\.)',
      m = this
    function f () {
      if (c) {
        switch (c) {
          case '*':
            ;(n += sa), (a = !0)
            break
          case '?':
            ;(n += aa), (a = !0)
            break
          default:
            n += '\\' + c
            break
        }
        m.debug('clearStateChar %j %j', c, n), (c = !1)
      }
    }
    for (var h = 0, x = e.length, v; h < x && (v = e.charAt(h)); h++) {
      if ((this.debug('%s	%s %s %j', e, h, n, v), s && Lc[v])) {
        ;(n += '\\' + v), (s = !1)
        continue
      }
      switch (v) {
        case '/':
          return !1
        case '\\':
          f(), (s = !0)
          continue
        case '?':
        case '*':
        case '+':
        case '@':
        case '!':
          if ((this.debug('%s	%s %s %j <-- stateChar', e, h, n, v), d)) {
            this.debug('  in class'),
              v === '!' && h === p + 1 && (v = '^'),
              (n += v)
            continue
          }
          m.debug('call clearStateChar %j', c), f(), (c = v), t.noext && f()
          continue
        case '(':
          if (d) {
            n += '('
            continue
          }
          if (!c) {
            n += '\\('
            continue
          }
          r.push({
            type: c,
            start: h - 1,
            reStart: n.length,
            open: Oc[c].open,
            close: Oc[c].close
          }),
            (n += c === '!' ? '(?:(?!(?:' : '(?:'),
            this.debug('plType %j %j', c, n),
            (c = !1)
          continue
        case ')':
          if (d || !r.length) {
            n += '\\)'
            continue
          }
          f(), (a = !0)
          var w = r.pop()
          ;(n += w.close), w.type === '!' && o.push(w), (w.reEnd = n.length)
          continue
        case '|':
          if (d || !r.length || s) {
            ;(n += '\\|'), (s = !1)
            continue
          }
          f(), (n += '|')
          continue
        case '[':
          if ((f(), d)) {
            n += '\\' + v
            continue
          }
          ;(d = !0), (p = h), (l = n.length), (n += v)
          continue
        case ']':
          if (h === p + 1 || !d) {
            ;(n += '\\' + v), (s = !1)
            continue
          }
          if (d) {
            var C = e.substring(p + 1, h)
            try {
              RegExp('[' + C + ']')
            } catch (xe) {
              var Q = this.parse(C, Dt)
              ;(n = n.substr(0, l) + '\\[' + Q[0] + '\\]'),
                (a = a || Q[1]),
                (d = !1)
              continue
            }
          }
          ;(a = !0), (d = !1), (n += v)
          continue
        default:
          f(),
            s ? (s = !1) : Lc[v] && !(v === '^' && d) && (n += '\\'),
            (n += v)
      }
    }
    for (
      d &&
        ((C = e.substr(p + 1)),
        (Q = this.parse(C, Dt)),
        (n = n.substr(0, l) + '\\[' + Q[0]),
        (a = a || Q[1])),
        w = r.pop();
      w;
      w = r.pop()
    ) {
      var L = n.slice(w.reStart + w.open.length)
      this.debug('setting tail', n, w),
        (L = L.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (xe, be, Te) {
          return Te || (Te = '\\'), be + be + Te + '|'
        })),
        this.debug(
          `tail=%j
   %s`,
          L,
          L,
          w,
          n
        )
      var D = w.type === '*' ? sa : w.type === '?' ? aa : '\\' + w.type
      ;(a = !0), (n = n.slice(0, w.reStart) + D + '\\(' + L)
    }
    f(), s && (n += '\\\\')
    var E = !1
    switch (n.charAt(0)) {
      case '.':
      case '[':
      case '(':
        E = !0
    }
    for (var B = o.length - 1; B > -1; B--) {
      var R = o[B],
        N = n.slice(0, R.reStart),
        g = n.slice(R.reStart, R.reEnd - 8),
        F = n.slice(R.reEnd - 8, R.reEnd),
        T = n.slice(R.reEnd)
      F += T
      var $ = N.split('(').length - 1,
        A = T
      for (h = 0; h < $; h++) A = A.replace(/\)[+*?]?/, '')
      T = A
      var b = ''
      T === '' && i !== Dt && (b = '$')
      var z = N + g + T + b + F
      n = z
    }
    if ((n !== '' && a && (n = '(?=.)' + n), E && (n = u + n), i === Dt))
      return [n, a]
    if (!a) return lx(e)
    var K = t.nocase ? 'i' : ''
    try {
      var oe = new RegExp('^' + n + '$', K)
    } catch (xe) {
      return new RegExp('$.')
    }
    return (oe._glob = e), (oe._src = n), oe
  }
  ye.makeRe = function (e, i) {
    return new V(e, i || {}).makeRe()
  }
  V.prototype.makeRe = px
  function px () {
    if (this.regexp || this.regexp === !1) return this.regexp
    var e = this.set
    if (!e.length) return (this.regexp = !1), this.regexp
    var i = this.options,
      t = i.noglobstar ? sa : i.dot ? tx : nx,
      n = i.nocase ? 'i' : '',
      a = e
        .map(function (s) {
          return s
            .map(function (r) {
              return r === na ? t : typeof r == 'string' ? ux(r) : r._src
            })
            .join('\\/')
        })
        .join('|')
    ;(a = '^(?:' + a + ')$'), this.negate && (a = '^(?!' + a + ').*$')
    try {
      this.regexp = new RegExp(a, n)
    } catch (s) {
      this.regexp = !1
    }
    return this.regexp
  }
  ye.match = function (e, i, t) {
    t = t || {}
    var n = new V(i, t)
    return (
      (e = e.filter(function (a) {
        return n.match(a)
      })),
      n.options.nonull && !e.length && e.push(i),
      e
    )
  }
  V.prototype.match = dx
  function dx (e, i) {
    if ((this.debug('match', e, this.pattern), this.comment)) return !1
    if (this.empty) return e === ''
    if (e === '/' && i) return !0
    var t = this.options
    Ui.sep !== '/' && (e = e.split(Ui.sep).join('/')),
      (e = e.split(Nc)),
      this.debug(this.pattern, 'split', e)
    var n = this.set
    this.debug(this.pattern, 'set', n)
    var a, s
    for (s = e.length - 1; s >= 0 && ((a = e[s]), !a); s--);
    for (s = 0; s < n.length; s++) {
      var r = n[s],
        o = e
      t.matchBase && r.length === 1 && (o = [a])
      var c = this.matchOne(o, r, i)
      if (c) return t.flipNegate ? !0 : !this.negate
    }
    return t.flipNegate ? !1 : this.negate
  }
  V.prototype.matchOne = function (e, i, t) {
    var n = this.options
    this.debug('matchOne', { this: this, file: e, pattern: i }),
      this.debug('matchOne', e.length, i.length)
    for (
      var a = 0, s = 0, r = e.length, o = i.length;
      a < r && s < o;
      a++, s++
    ) {
      this.debug('matchOne loop')
      var c = i[s],
        d = e[a]
      if ((this.debug(i, c, d), c === !1)) return !1
      if (c === na) {
        this.debug('GLOBSTAR', [i, c, d])
        var l = a,
          p = s + 1
        if (p === o) {
          for (this.debug('** at the end'); a < r; a++)
            if (
              e[a] === '.' ||
              e[a] === '..' ||
              (!n.dot && e[a].charAt(0) === '.')
            )
              return !1
          return !0
        }
        for (; l < r; ) {
          var u = e[l]
          if (
            (this.debug(
              `
globstar while`,
              e,
              l,
              i,
              p,
              u
            ),
            this.matchOne(e.slice(l), i.slice(p), t))
          )
            return this.debug('globstar found match!', l, r, u), !0
          if (u === '.' || u === '..' || (!n.dot && u.charAt(0) === '.')) {
            this.debug('dot detected!', e, l, i, p)
            break
          }
          this.debug('globstar swallow a segment, and continue'), l++
        }
        return !!(
          t &&
          (this.debug(
            `
>>> no match, partial?`,
            e,
            l,
            i,
            p
          ),
          l === r)
        )
      }
      var m
      if (
        (typeof c == 'string'
          ? (n.nocase
              ? (m = d.toLowerCase() === c.toLowerCase())
              : (m = d === c),
            this.debug('string match', c, d, m))
          : ((m = d.match(c)), this.debug('pattern match', c, d, m)),
        !m)
      )
        return !1
    }
    if (a === r && s === o) return !0
    if (a === r) return t
    if (s === o) {
      var f = a === r - 1 && e[a] === ''
      return f
    }
    throw new Error('wtf?')
  }
  function lx (e) {
    return e.replace(/\\(.)/g, '$1')
  }
  function ux (e) {
    return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  }
})
var Dc = y((bw, ra) => {
  typeof Object.create == 'function'
    ? (ra.exports = function (i, t) {
        t &&
          ((i.super_ = t),
          (i.prototype = Object.create(t.prototype, {
            constructor: {
              value: i,
              enumerable: !1,
              writable: !0,
              configurable: !0
            }
          })))
      })
    : (ra.exports = function (i, t) {
        if (t) {
          i.super_ = t
          var n = function () {}
          ;(n.prototype = t.prototype),
            (i.prototype = new n()),
            (i.prototype.constructor = i)
        }
      })
})
var qc = y((yw, oa) => {
  try {
    if (((ca = require('util')), typeof ca.inherits != 'function')) throw ''
    oa.exports = ca.inherits
  } catch (e) {
    oa.exports = Dc()
  }
  var ca
})
var Ht = y((Ew, Pt) => {
  'use strict'
  function Pc (e) {
    return e.charAt(0) === '/'
  }
  function Hc (e) {
    var i = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/,
      t = i.exec(e),
      n = t[1] || '',
      a = Boolean(n && n.charAt(1) !== ':')
    return Boolean(t[2] || a)
  }
  Pt.exports = process.platform === 'win32' ? Hc : Pc
  Pt.exports.posix = Pc
  Pt.exports.win32 = Hc
})
var pa = y(Ie => {
  Ie.alphasort = Mc
  Ie.alphasorti = $c
  Ie.setopts = mx
  Ie.ownProp = Gc
  Ie.makeAbs = zi
  Ie.finish = fx
  Ie.mark = hx
  Ie.isIgnored = Uc
  Ie.childrenIgnored = xx
  function Gc (e, i) {
    return Object.prototype.hasOwnProperty.call(e, i)
  }
  var xi = require('path'),
    vx = qt(),
    zc = Ht(),
    la = vx.Minimatch
  function $c (e, i) {
    return e.toLowerCase().localeCompare(i.toLowerCase())
  }
  function Mc (e, i) {
    return e.localeCompare(i)
  }
  function Ax (e, i) {
    ;(e.ignore = i.ignore || []),
      Array.isArray(e.ignore) || (e.ignore = [e.ignore]),
      e.ignore.length && (e.ignore = e.ignore.map(gx))
  }
  function gx (e) {
    var i = null
    if (e.slice(-3) === '/**') {
      var t = e.replace(/(\/\*\*)+$/, '')
      i = new la(t, { dot: !0 })
    }
    return { matcher: new la(e, { dot: !0 }), gmatcher: i }
  }
  function mx (e, i, t) {
    if ((t || (t = {}), t.matchBase && i.indexOf('/') === -1)) {
      if (t.noglobstar) throw new Error('base matching requires globstar')
      i = '**/' + i
    }
    ;(e.silent = !!t.silent),
      (e.pattern = i),
      (e.strict = t.strict !== !1),
      (e.realpath = !!t.realpath),
      (e.realpathCache = t.realpathCache || Object.create(null)),
      (e.follow = !!t.follow),
      (e.dot = !!t.dot),
      (e.mark = !!t.mark),
      (e.nodir = !!t.nodir),
      e.nodir && (e.mark = !0),
      (e.sync = !!t.sync),
      (e.nounique = !!t.nounique),
      (e.nonull = !!t.nonull),
      (e.nosort = !!t.nosort),
      (e.nocase = !!t.nocase),
      (e.stat = !!t.stat),
      (e.noprocess = !!t.noprocess),
      (e.absolute = !!t.absolute),
      (e.maxLength = t.maxLength || Infinity),
      (e.cache = t.cache || Object.create(null)),
      (e.statCache = t.statCache || Object.create(null)),
      (e.symlinks = t.symlinks || Object.create(null)),
      Ax(e, t),
      (e.changedCwd = !1)
    var n = process.cwd()
    Gc(t, 'cwd')
      ? ((e.cwd = xi.resolve(t.cwd)), (e.changedCwd = e.cwd !== n))
      : (e.cwd = n),
      (e.root = t.root || xi.resolve(e.cwd, '/')),
      (e.root = xi.resolve(e.root)),
      process.platform === 'win32' && (e.root = e.root.replace(/\\/g, '/')),
      (e.cwdAbs = zc(e.cwd) ? e.cwd : zi(e, e.cwd)),
      process.platform === 'win32' && (e.cwdAbs = e.cwdAbs.replace(/\\/g, '/')),
      (e.nomount = !!t.nomount),
      (t.nonegate = !0),
      (t.nocomment = !0),
      (e.minimatch = new la(i, t)),
      (e.options = e.minimatch.options)
  }
  function fx (e) {
    for (
      var i = e.nounique,
        t = i ? [] : Object.create(null),
        n = 0,
        a = e.matches.length;
      n < a;
      n++
    ) {
      var s = e.matches[n]
      if (!s || Object.keys(s).length === 0) {
        if (e.nonull) {
          var r = e.minimatch.globSet[n]
          i ? t.push(r) : (t[r] = !0)
        }
      } else {
        var o = Object.keys(s)
        i
          ? t.push.apply(t, o)
          : o.forEach(function (c) {
              t[c] = !0
            })
      }
    }
    if (
      (i || (t = Object.keys(t)),
      e.nosort || (t = t.sort(e.nocase ? $c : Mc)),
      e.mark)
    ) {
      for (var n = 0; n < t.length; n++) t[n] = e._mark(t[n])
      e.nodir &&
        (t = t.filter(function (c) {
          var d = !/\/$/.test(c),
            l = e.cache[c] || e.cache[zi(e, c)]
          return d && l && (d = l !== 'DIR' && !Array.isArray(l)), d
        }))
    }
    e.ignore.length &&
      (t = t.filter(function (c) {
        return !Uc(e, c)
      })),
      (e.found = t)
  }
  function hx (e, i) {
    var t = zi(e, i),
      n = e.cache[t],
      a = i
    if (n) {
      var s = n === 'DIR' || Array.isArray(n),
        r = i.slice(-1) === '/'
      if ((s && !r ? (a += '/') : !s && r && (a = a.slice(0, -1)), a !== i)) {
        var o = zi(e, a)
        ;(e.statCache[o] = e.statCache[t]), (e.cache[o] = e.cache[t])
      }
    }
    return a
  }
  function zi (e, i) {
    var t = i
    return (
      i.charAt(0) === '/'
        ? (t = xi.join(e.root, i))
        : zc(i) || i === ''
        ? (t = i)
        : e.changedCwd
        ? (t = xi.resolve(e.cwd, i))
        : (t = xi.resolve(i)),
      process.platform === 'win32' && (t = t.replace(/\\/g, '/')),
      t
    )
  }
  function Uc (e, i) {
    return e.ignore.length
      ? e.ignore.some(function (t) {
          return t.matcher.match(i) || !!(t.gmatcher && t.gmatcher.match(i))
        })
      : !1
  }
  function xx (e, i) {
    return e.ignore.length
      ? e.ignore.some(function (t) {
          return !!(t.gmatcher && t.gmatcher.match(i))
        })
      : !1
  }
})
var Xc = y((Qw, Kc) => {
  Kc.exports = Wc
  Wc.GlobSync = X
  var Mt = require('fs'),
    bx = ea(),
    Jc = qt(),
    Cw = Jc.Minimatch,
    _w = $t().Glob,
    kw = require('util'),
    ua = require('path'),
    Yc = require('assert'),
    Gt = Ht(),
    Le = pa(),
    Bw = Le.alphasort,
    Sw = Le.alphasorti,
    yx = Le.setopts,
    da = Le.ownProp,
    Ex = Le.childrenIgnored,
    wx = Le.isIgnored
  function Wc (e, i) {
    if (typeof i == 'function' || arguments.length === 3)
      throw new TypeError(`callback provided to sync glob
See: https://github.com/isaacs/node-glob/issues/167`)
    return new X(e, i).found
  }
  function X (e, i) {
    if (!e) throw new Error('must provide pattern')
    if (typeof i == 'function' || arguments.length === 3)
      throw new TypeError(`callback provided to sync glob
See: https://github.com/isaacs/node-glob/issues/167`)
    if (!(this instanceof X)) return new X(e, i)
    if ((yx(this, e, i), this.noprocess)) return this
    var t = this.minimatch.set.length
    this.matches = new Array(t)
    for (var n = 0; n < t; n++) this._process(this.minimatch.set[n], n, !1)
    this._finish()
  }
  X.prototype._finish = function () {
    if ((Yc(this instanceof X), this.realpath)) {
      var e = this
      this.matches.forEach(function (i, t) {
        var n = (e.matches[t] = Object.create(null))
        for (var a in i)
          try {
            a = e._makeAbs(a)
            var s = bx.realpathSync(a, e.realpathCache)
            n[s] = !0
          } catch (r) {
            if (r.syscall === 'stat') n[e._makeAbs(a)] = !0
            else throw r
          }
      })
    }
    Le.finish(this)
  }
  X.prototype._process = function (e, i, t) {
    Yc(this instanceof X)
    for (var n = 0; typeof e[n] == 'string'; ) n++
    var a
    switch (n) {
      case e.length:
        this._processSimple(e.join('/'), i)
        return
      case 0:
        a = null
        break
      default:
        a = e.slice(0, n).join('/')
        break
    }
    var s = e.slice(n),
      r
    a === null
      ? (r = '.')
      : ((Gt(a) || Gt(e.join('/'))) && (!a || !Gt(a)) && (a = '/' + a), (r = a))
    var o = this._makeAbs(r)
    if (!Ex(this, r)) {
      var c = s[0] === Jc.GLOBSTAR
      c
        ? this._processGlobStar(a, r, o, s, i, t)
        : this._processReaddir(a, r, o, s, i, t)
    }
  }
  X.prototype._processReaddir = function (e, i, t, n, a, s) {
    var r = this._readdir(t, s)
    if (!!r) {
      for (
        var o = n[0],
          c = !!this.minimatch.negate,
          d = o._glob,
          l = this.dot || d.charAt(0) === '.',
          p = [],
          u = 0;
        u < r.length;
        u++
      ) {
        var m = r[u]
        if (m.charAt(0) !== '.' || l) {
          var f
          c && !e ? (f = !m.match(o)) : (f = m.match(o)), f && p.push(m)
        }
      }
      var h = p.length
      if (h !== 0) {
        if (n.length === 1 && !this.mark && !this.stat) {
          this.matches[a] || (this.matches[a] = Object.create(null))
          for (var u = 0; u < h; u++) {
            var m = p[u]
            e && (e.slice(-1) !== '/' ? (m = e + '/' + m) : (m = e + m)),
              m.charAt(0) === '/' &&
                !this.nomount &&
                (m = ua.join(this.root, m)),
              this._emitMatch(a, m)
          }
          return
        }
        n.shift()
        for (var u = 0; u < h; u++) {
          var m = p[u],
            x
          e ? (x = [e, m]) : (x = [m]), this._process(x.concat(n), a, s)
        }
      }
    }
  }
  X.prototype._emitMatch = function (e, i) {
    if (!wx(this, i)) {
      var t = this._makeAbs(i)
      if (
        (this.mark && (i = this._mark(i)),
        this.absolute && (i = t),
        !this.matches[e][i])
      ) {
        if (this.nodir) {
          var n = this.cache[t]
          if (n === 'DIR' || Array.isArray(n)) return
        }
        ;(this.matches[e][i] = !0), this.stat && this._stat(i)
      }
    }
  }
  X.prototype._readdirInGlobStar = function (e) {
    if (this.follow) return this._readdir(e, !1)
    var i, t, n
    try {
      t = Mt.lstatSync(e)
    } catch (s) {
      if (s.code === 'ENOENT') return null
    }
    var a = t && t.isSymbolicLink()
    return (
      (this.symlinks[e] = a),
      !a && t && !t.isDirectory()
        ? (this.cache[e] = 'FILE')
        : (i = this._readdir(e, !1)),
      i
    )
  }
  X.prototype._readdir = function (e, i) {
    var t
    if (i && !da(this.symlinks, e)) return this._readdirInGlobStar(e)
    if (da(this.cache, e)) {
      var n = this.cache[e]
      if (!n || n === 'FILE') return null
      if (Array.isArray(n)) return n
    }
    try {
      return this._readdirEntries(e, Mt.readdirSync(e))
    } catch (a) {
      return this._readdirError(e, a), null
    }
  }
  X.prototype._readdirEntries = function (e, i) {
    if (!this.mark && !this.stat)
      for (var t = 0; t < i.length; t++) {
        var n = i[t]
        e === '/' ? (n = e + n) : (n = e + '/' + n), (this.cache[n] = !0)
      }
    return (this.cache[e] = i), i
  }
  X.prototype._readdirError = function (e, i) {
    switch (i.code) {
      case 'ENOTSUP':
      case 'ENOTDIR':
        var t = this._makeAbs(e)
        if (((this.cache[t] = 'FILE'), t === this.cwdAbs)) {
          var n = new Error(i.code + ' invalid cwd ' + this.cwd)
          throw ((n.path = this.cwd), (n.code = i.code), n)
        }
        break
      case 'ENOENT':
      case 'ELOOP':
      case 'ENAMETOOLONG':
      case 'UNKNOWN':
        this.cache[this._makeAbs(e)] = !1
        break
      default:
        if (((this.cache[this._makeAbs(e)] = !1), this.strict)) throw i
        this.silent || console.error('glob error', i)
        break
    }
  }
  X.prototype._processGlobStar = function (e, i, t, n, a, s) {
    var r = this._readdir(t, s)
    if (!!r) {
      var o = n.slice(1),
        c = e ? [e] : [],
        d = c.concat(o)
      this._process(d, a, !1)
      var l = r.length,
        p = this.symlinks[t]
      if (!(p && s))
        for (var u = 0; u < l; u++) {
          var m = r[u]
          if (!(m.charAt(0) === '.' && !this.dot)) {
            var f = c.concat(r[u], o)
            this._process(f, a, !0)
            var h = c.concat(r[u], n)
            this._process(h, a, !0)
          }
        }
    }
  }
  X.prototype._processSimple = function (e, i) {
    var t = this._stat(e)
    if ((this.matches[i] || (this.matches[i] = Object.create(null)), !!t)) {
      if (e && Gt(e) && !this.nomount) {
        var n = /[\/\\]$/.test(e)
        e.charAt(0) === '/'
          ? (e = ua.join(this.root, e))
          : ((e = ua.resolve(this.root, e)), n && (e += '/'))
      }
      process.platform === 'win32' && (e = e.replace(/\\/g, '/')),
        this._emitMatch(i, e)
    }
  }
  X.prototype._stat = function (e) {
    var i = this._makeAbs(e),
      t = e.slice(-1) === '/'
    if (e.length > this.maxLength) return !1
    if (!this.stat && da(this.cache, i)) {
      var r = this.cache[i]
      if ((Array.isArray(r) && (r = 'DIR'), !t || r === 'DIR')) return r
      if (t && r === 'FILE') return !1
    }
    var n,
      a = this.statCache[i]
    if (!a) {
      var s
      try {
        s = Mt.lstatSync(i)
      } catch (o) {
        if (o && (o.code === 'ENOENT' || o.code === 'ENOTDIR'))
          return (this.statCache[i] = !1), !1
      }
      if (s && s.isSymbolicLink())
        try {
          a = Mt.statSync(i)
        } catch (o) {
          a = s
        }
      else a = s
    }
    this.statCache[i] = a
    var r = !0
    return (
      a && (r = a.isDirectory() ? 'DIR' : 'FILE'),
      (this.cache[i] = this.cache[i] || r),
      t && r === 'FILE' ? !1 : r
    )
  }
  X.prototype._mark = function (e) {
    return Le.mark(this, e)
  }
  X.prototype._makeAbs = function (e) {
    return Le.makeAbs(this, e)
  }
})
var ma = y((Iw, Vc) => {
  Vc.exports = Zc
  function Zc (e, i) {
    if (e && i) return Zc(e)(i)
    if (typeof e != 'function') throw new TypeError('need wrapper function')
    return (
      Object.keys(e).forEach(function (n) {
        t[n] = e[n]
      }),
      t
    )
    function t () {
      for (var n = new Array(arguments.length), a = 0; a < n.length; a++)
        n[a] = arguments[a]
      var s = e.apply(this, n),
        r = n[n.length - 1]
      return (
        typeof s == 'function' &&
          s !== r &&
          Object.keys(r).forEach(function (o) {
            s[o] = r[o]
          }),
        s
      )
    }
  }
})
var ha = y((Rw, fa) => {
  var el = ma()
  fa.exports = el(Ut)
  fa.exports.strict = el(il)
  Ut.proto = Ut(function () {
    Object.defineProperty(Function.prototype, 'once', {
      value: function () {
        return Ut(this)
      },
      configurable: !0
    }),
      Object.defineProperty(Function.prototype, 'onceStrict', {
        value: function () {
          return il(this)
        },
        configurable: !0
      })
  })
  function Ut (e) {
    var i = function () {
      return i.called
        ? i.value
        : ((i.called = !0), (i.value = e.apply(this, arguments)))
    }
    return (i.called = !1), i
  }
  function il (e) {
    var i = function () {
        if (i.called) throw new Error(i.onceError)
        return (i.called = !0), (i.value = e.apply(this, arguments))
      },
      t = e.name || 'Function wrapped with `once`'
    return (
      (i.onceError = t + " shouldn't be called more than once"),
      (i.called = !1),
      i
    )
  }
})
var nl = y((Fw, tl) => {
  var Cx = ma(),
    Ki = Object.create(null),
    _x = ha()
  tl.exports = Cx(kx)
  function kx (e, i) {
    return Ki[e] ? (Ki[e].push(i), null) : ((Ki[e] = [i]), Bx(e))
  }
  function Bx (e) {
    return _x(function i () {
      var t = Ki[e],
        n = t.length,
        a = Sx(arguments)
      try {
        for (var s = 0; s < n; s++) t[s].apply(null, a)
      } finally {
        t.length > n
          ? (t.splice(0, n),
            process.nextTick(function () {
              i.apply(null, a)
            }))
          : delete Ki[e]
      }
    })
  }
  function Sx (e) {
    for (var i = e.length, t = [], n = 0; n < i; n++) t[n] = e[n]
    return t
  }
})
var $t = y((Tw, al) => {
  al.exports = ei
  var zt = require('fs'),
    Qx = ea(),
    sl = qt(),
    Ow = sl.Minimatch,
    Ix = qc(),
    Rx = require('events').EventEmitter,
    xa = require('path'),
    va = require('assert'),
    Wi = Ht(),
    ga = Xc(),
    Ne = pa(),
    Lw = Ne.alphasort,
    Nw = Ne.alphasorti,
    Fx = Ne.setopts,
    Aa = Ne.ownProp,
    ba = nl(),
    jw = require('util'),
    Ox = Ne.childrenIgnored,
    Lx = Ne.isIgnored,
    Nx = ha()
  function ei (e, i, t) {
    if (
      (typeof i == 'function' && ((t = i), (i = {})), i || (i = {}), i.sync)
    ) {
      if (t) throw new TypeError('callback provided to sync glob')
      return ga(e, i)
    }
    return new P(e, i, t)
  }
  ei.sync = ga
  var jx = (ei.GlobSync = ga.GlobSync)
  ei.glob = ei
  function Tx (e, i) {
    if (i === null || typeof i != 'object') return e
    for (var t = Object.keys(i), n = t.length; n--; ) e[t[n]] = i[t[n]]
    return e
  }
  ei.hasMagic = function (e, i) {
    var t = Tx({}, i)
    t.noprocess = !0
    var n = new P(e, t),
      a = n.minimatch.set
    if (!e) return !1
    if (a.length > 1) return !0
    for (var s = 0; s < a[0].length; s++)
      if (typeof a[0][s] != 'string') return !0
    return !1
  }
  ei.Glob = P
  Ix(P, Rx)
  function P (e, i, t) {
    if ((typeof i == 'function' && ((t = i), (i = null)), i && i.sync)) {
      if (t) throw new TypeError('callback provided to sync glob')
      return new jx(e, i)
    }
    if (!(this instanceof P)) return new P(e, i, t)
    Fx(this, e, i), (this._didRealPath = !1)
    var n = this.minimatch.set.length
    ;(this.matches = new Array(n)),
      typeof t == 'function' &&
        ((t = Nx(t)),
        this.on('error', t),
        this.on('end', function (c) {
          t(null, c)
        }))
    var a = this
    if (
      ((this._processing = 0),
      (this._emitQueue = []),
      (this._processQueue = []),
      (this.paused = !1),
      this.noprocess)
    )
      return this
    if (n === 0) return o()
    for (var s = !0, r = 0; r < n; r++)
      this._process(this.minimatch.set[r], r, !1, o)
    s = !1
    function o () {
      --a._processing,
        a._processing <= 0 &&
          (s
            ? process.nextTick(function () {
                a._finish()
              })
            : a._finish())
    }
  }
  P.prototype._finish = function () {
    if ((va(this instanceof P), !this.aborted)) {
      if (this.realpath && !this._didRealpath) return this._realpath()
      Ne.finish(this), this.emit('end', this.found)
    }
  }
  P.prototype._realpath = function () {
    if (this._didRealpath) return
    this._didRealpath = !0
    var e = this.matches.length
    if (e === 0) return this._finish()
    for (var i = this, t = 0; t < this.matches.length; t++)
      this._realpathSet(t, n)
    function n () {
      --e == 0 && i._finish()
    }
  }
  P.prototype._realpathSet = function (e, i) {
    var t = this.matches[e]
    if (!t) return i()
    var n = Object.keys(t),
      a = this,
      s = n.length
    if (s === 0) return i()
    var r = (this.matches[e] = Object.create(null))
    n.forEach(function (o, c) {
      ;(o = a._makeAbs(o)),
        Qx.realpath(o, a.realpathCache, function (d, l) {
          d
            ? d.syscall === 'stat'
              ? (r[o] = !0)
              : a.emit('error', d)
            : (r[l] = !0),
            --s == 0 && ((a.matches[e] = r), i())
        })
    })
  }
  P.prototype._mark = function (e) {
    return Ne.mark(this, e)
  }
  P.prototype._makeAbs = function (e) {
    return Ne.makeAbs(this, e)
  }
  P.prototype.abort = function () {
    ;(this.aborted = !0), this.emit('abort')
  }
  P.prototype.pause = function () {
    this.paused || ((this.paused = !0), this.emit('pause'))
  }
  P.prototype.resume = function () {
    if (this.paused) {
      if ((this.emit('resume'), (this.paused = !1), this._emitQueue.length)) {
        var e = this._emitQueue.slice(0)
        this._emitQueue.length = 0
        for (var i = 0; i < e.length; i++) {
          var t = e[i]
          this._emitMatch(t[0], t[1])
        }
      }
      if (this._processQueue.length) {
        var n = this._processQueue.slice(0)
        this._processQueue.length = 0
        for (var i = 0; i < n.length; i++) {
          var a = n[i]
          this._processing--, this._process(a[0], a[1], a[2], a[3])
        }
      }
    }
  }
  P.prototype._process = function (e, i, t, n) {
    if ((va(this instanceof P), va(typeof n == 'function'), !this.aborted)) {
      if ((this._processing++, this.paused)) {
        this._processQueue.push([e, i, t, n])
        return
      }
      for (var a = 0; typeof e[a] == 'string'; ) a++
      var s
      switch (a) {
        case e.length:
          this._processSimple(e.join('/'), i, n)
          return
        case 0:
          s = null
          break
        default:
          s = e.slice(0, a).join('/')
          break
      }
      var r = e.slice(a),
        o
      s === null
        ? (o = '.')
        : ((Wi(s) || Wi(e.join('/'))) && (!s || !Wi(s)) && (s = '/' + s),
          (o = s))
      var c = this._makeAbs(o)
      if (Ox(this, o)) return n()
      var d = r[0] === sl.GLOBSTAR
      d
        ? this._processGlobStar(s, o, c, r, i, t, n)
        : this._processReaddir(s, o, c, r, i, t, n)
    }
  }
  P.prototype._processReaddir = function (e, i, t, n, a, s, r) {
    var o = this
    this._readdir(t, s, function (c, d) {
      return o._processReaddir2(e, i, t, n, a, s, d, r)
    })
  }
  P.prototype._processReaddir2 = function (e, i, t, n, a, s, r, o) {
    if (!r) return o()
    for (
      var c = n[0],
        d = !!this.minimatch.negate,
        l = c._glob,
        p = this.dot || l.charAt(0) === '.',
        u = [],
        m = 0;
      m < r.length;
      m++
    ) {
      var f = r[m]
      if (f.charAt(0) !== '.' || p) {
        var h
        d && !e ? (h = !f.match(c)) : (h = f.match(c)), h && u.push(f)
      }
    }
    var x = u.length
    if (x === 0) return o()
    if (n.length === 1 && !this.mark && !this.stat) {
      this.matches[a] || (this.matches[a] = Object.create(null))
      for (var m = 0; m < x; m++) {
        var f = u[m]
        e && (e !== '/' ? (f = e + '/' + f) : (f = e + f)),
          f.charAt(0) === '/' && !this.nomount && (f = xa.join(this.root, f)),
          this._emitMatch(a, f)
      }
      return o()
    }
    n.shift()
    for (var m = 0; m < x; m++) {
      var f = u[m],
        v
      e && (e !== '/' ? (f = e + '/' + f) : (f = e + f)),
        this._process([f].concat(n), a, s, o)
    }
    o()
  }
  P.prototype._emitMatch = function (e, i) {
    if (!this.aborted && !Lx(this, i)) {
      if (this.paused) {
        this._emitQueue.push([e, i])
        return
      }
      var t = Wi(i) ? i : this._makeAbs(i)
      if (
        (this.mark && (i = this._mark(i)),
        this.absolute && (i = t),
        !this.matches[e][i])
      ) {
        if (this.nodir) {
          var n = this.cache[t]
          if (n === 'DIR' || Array.isArray(n)) return
        }
        this.matches[e][i] = !0
        var a = this.statCache[t]
        a && this.emit('stat', i, a), this.emit('match', i)
      }
    }
  }
  P.prototype._readdirInGlobStar = function (e, i) {
    if (this.aborted) return
    if (this.follow) return this._readdir(e, !1, i)
    var t = 'lstat\0' + e,
      n = this,
      a = ba(t, s)
    a && zt.lstat(e, a)
    function s (r, o) {
      if (r && r.code === 'ENOENT') return i()
      var c = o && o.isSymbolicLink()
      ;(n.symlinks[e] = c),
        !c && o && !o.isDirectory()
          ? ((n.cache[e] = 'FILE'), i())
          : n._readdir(e, !1, i)
    }
  }
  P.prototype._readdir = function (e, i, t) {
    if (!this.aborted && ((t = ba('readdir\0' + e + '\0' + i, t)), !!t)) {
      if (i && !Aa(this.symlinks, e)) return this._readdirInGlobStar(e, t)
      if (Aa(this.cache, e)) {
        var n = this.cache[e]
        if (!n || n === 'FILE') return t()
        if (Array.isArray(n)) return t(null, n)
      }
      var a = this
      zt.readdir(e, Dx(this, e, t))
    }
  }
  function Dx (e, i, t) {
    return function (n, a) {
      n ? e._readdirError(i, n, t) : e._readdirEntries(i, a, t)
    }
  }
  P.prototype._readdirEntries = function (e, i, t) {
    if (!this.aborted) {
      if (!this.mark && !this.stat)
        for (var n = 0; n < i.length; n++) {
          var a = i[n]
          e === '/' ? (a = e + a) : (a = e + '/' + a), (this.cache[a] = !0)
        }
      return (this.cache[e] = i), t(null, i)
    }
  }
  P.prototype._readdirError = function (e, i, t) {
    if (!this.aborted) {
      switch (i.code) {
        case 'ENOTSUP':
        case 'ENOTDIR':
          var n = this._makeAbs(e)
          if (((this.cache[n] = 'FILE'), n === this.cwdAbs)) {
            var a = new Error(i.code + ' invalid cwd ' + this.cwd)
            ;(a.path = this.cwd),
              (a.code = i.code),
              this.emit('error', a),
              this.abort()
          }
          break
        case 'ENOENT':
        case 'ELOOP':
        case 'ENAMETOOLONG':
        case 'UNKNOWN':
          this.cache[this._makeAbs(e)] = !1
          break
        default:
          ;(this.cache[this._makeAbs(e)] = !1),
            this.strict && (this.emit('error', i), this.abort()),
            this.silent || console.error('glob error', i)
          break
      }
      return t()
    }
  }
  P.prototype._processGlobStar = function (e, i, t, n, a, s, r) {
    var o = this
    this._readdir(t, s, function (c, d) {
      o._processGlobStar2(e, i, t, n, a, s, d, r)
    })
  }
  P.prototype._processGlobStar2 = function (e, i, t, n, a, s, r, o) {
    if (!r) return o()
    var c = n.slice(1),
      d = e ? [e] : [],
      l = d.concat(c)
    this._process(l, a, !1, o)
    var p = this.symlinks[t],
      u = r.length
    if (p && s) return o()
    for (var m = 0; m < u; m++) {
      var f = r[m]
      if (!(f.charAt(0) === '.' && !this.dot)) {
        var h = d.concat(r[m], c)
        this._process(h, a, !0, o)
        var x = d.concat(r[m], n)
        this._process(x, a, !0, o)
      }
    }
    o()
  }
  P.prototype._processSimple = function (e, i, t) {
    var n = this
    this._stat(e, function (a, s) {
      n._processSimple2(e, i, a, s, t)
    })
  }
  P.prototype._processSimple2 = function (e, i, t, n, a) {
    if ((this.matches[i] || (this.matches[i] = Object.create(null)), !n))
      return a()
    if (e && Wi(e) && !this.nomount) {
      var s = /[\/\\]$/.test(e)
      e.charAt(0) === '/'
        ? (e = xa.join(this.root, e))
        : ((e = xa.resolve(this.root, e)), s && (e += '/'))
    }
    process.platform === 'win32' && (e = e.replace(/\\/g, '/')),
      this._emitMatch(i, e),
      a()
  }
  P.prototype._stat = function (e, i) {
    var t = this._makeAbs(e),
      n = e.slice(-1) === '/'
    if (e.length > this.maxLength) return i()
    if (!this.stat && Aa(this.cache, t)) {
      var a = this.cache[t]
      if ((Array.isArray(a) && (a = 'DIR'), !n || a === 'DIR'))
        return i(null, a)
      if (n && a === 'FILE') return i()
    }
    var s,
      r = this.statCache[t]
    if (r !== void 0) {
      if (r === !1) return i(null, r)
      var o = r.isDirectory() ? 'DIR' : 'FILE'
      return n && o === 'FILE' ? i() : i(null, o, r)
    }
    var c = this,
      d = ba('stat\0' + t, l)
    d && zt.lstat(t, d)
    function l (p, u) {
      if (u && u.isSymbolicLink())
        return zt.stat(t, function (m, f) {
          m ? c._stat2(e, t, null, u, i) : c._stat2(e, t, m, f, i)
        })
      c._stat2(e, t, p, u, i)
    }
  }
  P.prototype._stat2 = function (e, i, t, n, a) {
    if (t && (t.code === 'ENOENT' || t.code === 'ENOTDIR'))
      return (this.statCache[i] = !1), a()
    var s = e.slice(-1) === '/'
    if (((this.statCache[i] = n), i.slice(-1) === '/' && n && !n.isDirectory()))
      return a(null, !1, n)
    var r = !0
    return (
      n && (r = n.isDirectory() ? 'DIR' : 'FILE'),
      (this.cache[i] = this.cache[i] || r),
      s && r === 'FILE' ? a() : a(null, r, n)
    )
  }
})
var ya = y((Dw, rl) => {
  'use strict'
  var qx = require('path'),
    ol = Jn(),
    { Glob: Px } = $t(),
    Hx = (e, i) => {
      let t = ol.onMatch(e, i)
      return new Promise((n, a) => {
        let s = new Px(e, i, (r, o) => {
          s.off('match', t), r ? a(r) : n(o)
        })
        s.on('match', t)
      })
    }
  rl.exports = async (e, i) => {
    let { expand: t, getPaths: n, sift: a, setIgnores: s } = ol
    e = [].concat(e || [])
    let r = k({ cwd: '.', nosort: !0 }, i)
    r.cwd = qx.resolve(t(r.cwd))
    let o = a(e, r)
    if (o === null)
      return Promise.reject(new Error('invalid glob pattern: ' + e))
    if (o.globs === 0) return Promise.resolve(n(e, r))
    let { excludes: c, includes: d } = o,
      l = f => s(r, c, f.index),
      p = [],
      u = [],
      m = f => h => {
        if ((u.push(...h), f.onFiles)) return f.onFiles(h, f)
      }
    for (let f of d) {
      let h = l(f)
      p.push(Hx(f.pattern, h).then(m(h)))
    }
    return Promise.all(p).then(() => u)
  }
})
var ll = y((qw, cl) => {
  'use strict'
  var Mx = ya()
  cl.exports = (e, i, t) => {
    typeof i == 'function' && ((t = i), (i = void 0))
    let n = Mx(e, i)
    if (typeof t == 'function') {
      n.then(a => t(null, a)).catch(t)
      return
    }
    return n
  }
})
var dl = y((Pw, pl) => {
  'use strict'
  var $x = require('path'),
    Gx = $t(),
    ul = Jn()
  pl.exports = (e, i) => {
    let { expand: t, getPaths: n, sift: a, setIgnores: s } = ul
    e = [].concat(e || [])
    let r = k({ cwd: '.', nosort: !0 }, i)
    r.cwd = $x.resolve(t(r.cwd))
    let o = a(e, r)
    if (o === null) throw new Error('invalid glob pattern: ' + e)
    if (o.globs === 0) return n(e, r)
    let { excludes: c, includes: d } = o,
      l = u => s(r, c, u.index),
      p = []
    for (let u of d) {
      let m = l(u),
        f = Gx.sync(u.pattern, m),
        h = ul.onMatch(u.pattern, i)
      f.forEach(x => {
        p.push(x), h(x)
      }),
        m.onFiles && m.onFiles(f, m)
    }
    return p
  }
})
var Ea = y((Hw, Kt) => {
  'use strict'
  Kt.exports = ll()
  Kt.exports.sync = dl()
  Kt.exports.promise = ya()
})
var Al = y((Mw, ml) => {
  'use strict'
  var Ji = require('fs'),
    { Readable: Ux } = require('stream'),
    Yi = require('path'),
    { promisify: Wt } = require('util'),
    wa = mi(),
    zx = Wt(Ji.readdir),
    fl = Wt(Ji.stat),
    hl = Wt(Ji.lstat),
    Kx = Wt(Ji.realpath),
    Wx = '!',
    Jx = new Set(['ENOENT', 'EPERM', 'EACCES', 'ELOOP']),
    Ca = 'files',
    xl = 'directories',
    Jt = 'files_directories',
    Yt = 'all',
    vl = [Ca, xl, Jt, Yt],
    Yx = e => Jx.has(e.code),
    gl = e => {
      if (e !== void 0) {
        if (typeof e == 'function') return e
        if (typeof e == 'string') {
          let i = wa(e.trim())
          return t => i(t.basename)
        }
        if (Array.isArray(e)) {
          let i = [],
            t = []
          for (let n of e) {
            let a = n.trim()
            a.charAt(0) === Wx ? t.push(wa(a.slice(1))) : i.push(wa(a))
          }
          return t.length > 0
            ? i.length > 0
              ? n => i.some(a => a(n.basename)) && !t.some(a => a(n.basename))
              : n => !t.some(a => a(n.basename))
            : n => i.some(a => a(n.basename))
        }
      }
    },
    Xi = class extends Ux {
      static get defaultOptions () {
        return {
          root: '.',
          fileFilter: i => !0,
          directoryFilter: i => !0,
          type: Ca,
          lstat: !1,
          depth: 2147483648,
          alwaysStat: !1
        }
      }
      constructor (i = {}) {
        super({
          objectMode: !0,
          autoDestroy: !0,
          highWaterMark: i.highWaterMark || 4096
        })
        let t = k(k({}, Xi.defaultOptions), i),
          { root: n, type: a } = t
        ;(this._fileFilter = gl(t.fileFilter)),
          (this._directoryFilter = gl(t.directoryFilter))
        let s = t.lstat ? hl : fl
        process.platform === 'win32' && fl.length === 3
          ? (this._stat = r => s(r, { bigint: !0 }))
          : (this._stat = s),
          (this._maxDepth = t.depth),
          (this._wantsDir = [xl, Jt, Yt].includes(a)),
          (this._wantsFile = [Ca, Jt, Yt].includes(a)),
          (this._wantsEverything = a === Yt),
          (this._root = Yi.resolve(n)),
          (this._isDirent = 'Dirent' in Ji && !t.alwaysStat),
          (this._statsProp = this._isDirent ? 'dirent' : 'stats'),
          (this._rdOptions = {
            encoding: 'utf8',
            withFileTypes: this._isDirent
          }),
          (this.parents = [this._exploreDir(n, 1)]),
          (this.reading = !1),
          (this.parent = void 0)
      }
      async _read (i) {
        if (!this.reading) {
          this.reading = !0
          try {
            for (; !this.destroyed && i > 0; ) {
              let { path: t, depth: n, files: a = [] } = this.parent || {}
              if (a.length > 0) {
                let s = a.splice(0, i).map(r => this._formatEntry(r, t))
                for (let r of await Promise.all(s)) {
                  if (this.destroyed) return
                  let o = await this._getEntryType(r)
                  o === 'directory' && this._directoryFilter(r)
                    ? (n <= this._maxDepth &&
                        this.parents.push(this._exploreDir(r.fullPath, n + 1)),
                      this._wantsDir && (this.push(r), i--))
                    : (o === 'file' || this._includeAsFile(r)) &&
                      this._fileFilter(r) &&
                      this._wantsFile &&
                      (this.push(r), i--)
                }
              } else {
                let s = this.parents.pop()
                if (!s) {
                  this.push(null)
                  break
                }
                if (((this.parent = await s), this.destroyed)) return
              }
            }
          } catch (t) {
            this.destroy(t)
          } finally {
            this.reading = !1
          }
        }
      }
      async _exploreDir (i, t) {
        let n
        try {
          n = await zx(i, this._rdOptions)
        } catch (a) {
          this._onError(a)
        }
        return { files: n, depth: t, path: i }
      }
      async _formatEntry (i, t) {
        let n
        try {
          let a = this._isDirent ? i.name : i,
            s = Yi.resolve(Yi.join(t, a))
          ;(n = { path: Yi.relative(this._root, s), fullPath: s, basename: a }),
            (n[this._statsProp] = this._isDirent ? i : await this._stat(s))
        } catch (a) {
          this._onError(a)
        }
        return n
      }
      _onError (i) {
        Yx(i) && !this.destroyed ? this.emit('warn', i) : this.destroy(i)
      }
      async _getEntryType (i) {
        let t = i && i[this._statsProp]
        if (!!t) {
          if (t.isFile()) return 'file'
          if (t.isDirectory()) return 'directory'
          if (t && t.isSymbolicLink()) {
            let n = i.fullPath
            try {
              let a = await Kx(n),
                s = await hl(a)
              if (s.isFile()) return 'file'
              if (s.isDirectory()) {
                let r = a.length
                return n.startsWith(a) && n.substr(r, 1) === Yi.sep
                  ? this._onError(
                      new Error(
                        `Circular symlink detected: "${n}" points to "${a}"`
                      )
                    )
                  : 'directory'
              }
            } catch (a) {
              this._onError(a)
            }
          }
        }
      }
      _includeAsFile (i) {
        let t = i && i[this._statsProp]
        return t && this._wantsEverything && !t.isDirectory()
      }
    },
    vi = (e, i = {}) => {
      let t = i.entryType || i.type
      if ((t === 'both' && (t = Jt), t && (i.type = t), e)) {
        if (typeof e != 'string')
          throw new TypeError(
            'readdirp: root argument must be a string. Usage: readdirp(root, options)'
          )
        if (t && !vl.includes(t))
          throw new Error(
            `readdirp: Invalid type passed. Use one of ${vl.join(', ')}`
          )
      } else
        throw new Error(
          'readdirp: root argument is required. Usage: readdirp(root, options)'
        )
      return (i.root = e), new Xi(i)
    },
    Xx = (e, i = {}) =>
      new Promise((t, n) => {
        let a = []
        vi(e, i)
          .on('data', s => a.push(s))
          .on('end', () => t(a))
          .on('error', s => n(s))
      })
  vi.promise = Xx
  vi.ReaddirpStream = Xi
  vi.default = vi
  ml.exports = vi
})
var _a = y(($w, bl) => {
  bl.exports = function (e, i) {
    if (typeof e != 'string')
      throw new TypeError('expected path to be a string')
    if (e === '\\' || e === '/') return '/'
    var t = e.length
    if (t <= 1) return e
    var n = ''
    if (t > 4 && e[3] === '\\') {
      var a = e[2]
      ;(a === '?' || a === '.') &&
        e.slice(0, 2) === '\\\\' &&
        ((e = e.slice(2)), (n = '//'))
    }
    var s = e.split(/[/\\]+/)
    return i !== !1 && s[s.length - 1] === '' && s.pop(), n + s.join('/')
  }
})
var _l = y((yl, El) => {
  'use strict'
  Object.defineProperty(yl, '__esModule', { value: !0 })
  var wl = mi(),
    Vx = _a(),
    Zx = '!',
    ev = { returnIndex: !1 },
    iv = e => (Array.isArray(e) ? e : [e]),
    tv = (e, i) => {
      if (typeof e == 'function') return e
      if (typeof e == 'string') {
        let t = wl(e, i)
        return n => e === n || t(n)
      }
      return e instanceof RegExp ? t => e.test(t) : t => !1
    },
    Cl = (e, i, t, n) => {
      let a = Array.isArray(t),
        s = a ? t[0] : t
      if (!a && typeof s != 'string')
        throw new TypeError(
          'anymatch: second argument must be a string: got ' +
            Object.prototype.toString.call(s)
        )
      let r = Vx(s)
      for (let c = 0; c < i.length; c++) if (i[c](r)) return n ? -1 : !1
      let o = a && [r].concat(t.slice(1))
      for (let c = 0; c < e.length; c++) {
        let d = e[c]
        if (a ? d(...o) : d(r)) return n ? c : !0
      }
      return n ? -1 : !1
    },
    ka = (e, i, t = ev) => {
      if (e == null) throw new TypeError('anymatch: specify first argument')
      let n = typeof t == 'boolean' ? { returnIndex: t } : t,
        a = n.returnIndex || !1,
        s = iv(e),
        r = s
          .filter(c => typeof c == 'string' && c.charAt(0) === Zx)
          .map(c => c.slice(1))
          .map(c => wl(c, n)),
        o = s.map(c => tv(c, n))
      return i == null
        ? (c, d = !1) => {
            let l = typeof d == 'boolean' ? d : !1
            return Cl(o, r, c, l)
          }
        : Cl(o, r, i, a)
    }
  ka.default = ka
  El.exports = ka
})
var Bl = y((Gw, kl) => {
  kl.exports = function (i) {
    if (typeof i != 'string' || i === '') return !1
    for (var t; (t = /(\\).|([@?!+*]\(.*\))/g.exec(i)); ) {
      if (t[2]) return !0
      i = i.slice(t.index + t[0].length)
    }
    return !1
  }
})
var Ba = y((Uw, Sl) => {
  var nv = Bl(),
    av = { '{': '}', '(': ')', '[': ']' },
    sv = /\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/,
    rv = /\\(.)|(^!|[*?{}()[\]]|\(\?)/
  Sl.exports = function (i, t) {
    if (typeof i != 'string' || i === '') return !1
    if (nv(i)) return !0
    var n = sv,
      a
    for (t && t.strict === !1 && (n = rv); (a = n.exec(i)); ) {
      if (a[2]) return !0
      var s = a.index + a[0].length,
        r = a[1],
        o = r ? av[r] : null
      if (r && o) {
        var c = i.indexOf(o, s)
        c !== -1 && (s = c + 1)
      }
      i = i.slice(s)
    }
    return !1
  }
})
var Il = y((zw, Ql) => {
  'use strict'
  var ov = Ba(),
    cv = require('path').posix.dirname,
    lv = require('os').platform() === 'win32',
    Sa = '/',
    pv = /\\/g,
    uv = /[\{\[].*[\}\]]$/,
    dv = /(^|[^\\])([\{\[]|\([^\)]+$)/,
    mv = /\\([\!\*\?\|\[\]\(\)\{\}])/g
  Ql.exports = function (i, t) {
    var n = Object.assign({ flipBackslashes: !0 }, t)
    n.flipBackslashes && lv && i.indexOf(Sa) < 0 && (i = i.replace(pv, Sa)),
      uv.test(i) && (i += Sa),
      (i += 'a')
    do i = cv(i)
    while (ov(i) || dv.test(i))
    return i.replace(mv, '$1')
  }
})
var Xt = y(Ee => {
  'use strict'
  Ee.isInteger = e =>
    typeof e == 'number'
      ? Number.isInteger(e)
      : typeof e == 'string' && e.trim() !== ''
      ? Number.isInteger(Number(e))
      : !1
  Ee.find = (e, i) => e.nodes.find(t => t.type === i)
  Ee.exceedsLimit = (e, i, t = 1, n) =>
    n === !1 || !Ee.isInteger(e) || !Ee.isInteger(i)
      ? !1
      : (Number(i) - Number(e)) / Number(t) >= n
  Ee.escapeNode = (e, i = 0, t) => {
    let n = e.nodes[i]
    !n ||
      (((t && n.type === t) || n.type === 'open' || n.type === 'close') &&
        n.escaped !== !0 &&
        ((n.value = '\\' + n.value), (n.escaped = !0)))
  }
  Ee.encloseBrace = e =>
    e.type !== 'brace'
      ? !1
      : (e.commas >> (0 + e.ranges)) >> 0 == 0
      ? ((e.invalid = !0), !0)
      : !1
  Ee.isInvalidBrace = e =>
    e.type !== 'brace'
      ? !1
      : e.invalid === !0 || e.dollar
      ? !0
      : (e.commas >> (0 + e.ranges)) >> 0 == 0 ||
        e.open !== !0 ||
        e.close !== !0
      ? ((e.invalid = !0), !0)
      : !1
  Ee.isOpenOrClose = e =>
    e.type === 'open' || e.type === 'close'
      ? !0
      : e.open === !0 || e.close === !0
  Ee.reduce = e =>
    e.reduce(
      (i, t) => (
        t.type === 'text' && i.push(t.value),
        t.type === 'range' && (t.type = 'text'),
        i
      ),
      []
    )
  Ee.flatten = (...e) => {
    let i = [],
      t = n => {
        for (let a = 0; a < n.length; a++) {
          let s = n[a]
          Array.isArray(s) ? t(s, i) : s !== void 0 && i.push(s)
        }
        return i
      }
    return t(e), i
  }
})
var Vt = y((Ww, Rl) => {
  'use strict'
  var Fl = Xt()
  Rl.exports = (e, i = {}) => {
    let t = (n, a = {}) => {
      let s = i.escapeInvalid && Fl.isInvalidBrace(a),
        r = n.invalid === !0 && i.escapeInvalid === !0,
        o = ''
      if (n.value)
        return (s || r) && Fl.isOpenOrClose(n) ? '\\' + n.value : n.value
      if (n.value) return n.value
      if (n.nodes) for (let c of n.nodes) o += t(c)
      return o
    }
    return t(e)
  }
})
var Ll = y((Jw, Ol) => {
  'use strict'
  Ol.exports = function (e) {
    return typeof e == 'number'
      ? e - e == 0
      : typeof e == 'string' && e.trim() !== ''
      ? Number.isFinite
        ? Number.isFinite(+e)
        : isFinite(+e)
      : !1
  }
})
var $l = y((Yw, Nl) => {
  'use strict'
  var jl = Ll(),
    ii = (e, i, t) => {
      if (jl(e) === !1)
        throw new TypeError(
          'toRegexRange: expected the first argument to be a number'
        )
      if (i === void 0 || e === i) return String(e)
      if (jl(i) === !1)
        throw new TypeError(
          'toRegexRange: expected the second argument to be a number.'
        )
      let n = k({ relaxZeros: !0 }, t)
      typeof n.strictZeros == 'boolean' && (n.relaxZeros = n.strictZeros === !1)
      let a = String(n.relaxZeros),
        s = String(n.shorthand),
        r = String(n.capture),
        o = String(n.wrap),
        c = e + ':' + i + '=' + a + s + r + o
      if (ii.cache.hasOwnProperty(c)) return ii.cache[c].result
      let d = Math.min(e, i),
        l = Math.max(e, i)
      if (Math.abs(d - l) === 1) {
        let h = e + '|' + i
        return n.capture ? `(${h})` : n.wrap === !1 ? h : `(?:${h})`
      }
      let p = Dl(e) || Dl(i),
        u = { min: e, max: i, a: d, b: l },
        m = [],
        f = []
      if ((p && ((u.isPadded = p), (u.maxLen = String(u.max).length)), d < 0)) {
        let h = l < 0 ? Math.abs(l) : 1
        ;(f = Tl(h, Math.abs(d), u, n)), (d = u.a = 0)
      }
      return (
        l >= 0 && (m = Tl(d, l, u, n)),
        (u.negatives = f),
        (u.positives = m),
        (u.result = fv(f, m, n)),
        n.capture === !0
          ? (u.result = `(${u.result})`)
          : n.wrap !== !1 &&
            m.length + f.length > 1 &&
            (u.result = `(?:${u.result})`),
        (ii.cache[c] = u),
        u.result
      )
    }
  function fv (e, i, t) {
    let n = Qa(e, i, '-', !1, t) || [],
      a = Qa(i, e, '', !1, t) || [],
      s = Qa(e, i, '-?', !0, t) || []
    return n
      .concat(s)
      .concat(a)
      .join('|')
  }
  function xv (e, i) {
    let t = 1,
      n = 1,
      a = ql(e, t),
      s = new Set([i])
    for (; e <= a && a <= i; ) s.add(a), (t += 1), (a = ql(e, t))
    for (a = Pl(i + 1, n) - 1; e < a && a <= i; )
      s.add(a), (n += 1), (a = Pl(i + 1, n) - 1)
    return (s = [...s]), s.sort(hv), s
  }
  function Av (e, i, t) {
    if (e === i) return { pattern: e, count: [], digits: 0 }
    let n = vv(e, i),
      a = n.length,
      s = '',
      r = 0
    for (let o = 0; o < a; o++) {
      let [c, d] = n[o]
      c === d ? (s += c) : c !== '0' || d !== '9' ? (s += gv(c, d, t)) : r++
    }
    return (
      r && (s += t.shorthand === !0 ? '\\d' : '[0-9]'),
      { pattern: s, count: [r], digits: a }
    )
  }
  function Tl (e, i, t, n) {
    let a = xv(e, i),
      s = [],
      r = e,
      o
    for (let c = 0; c < a.length; c++) {
      let d = a[c],
        l = Av(String(r), String(d), n),
        p = ''
      if (!t.isPadded && o && o.pattern === l.pattern) {
        o.count.length > 1 && o.count.pop(),
          o.count.push(l.count[0]),
          (o.string = o.pattern + Hl(o.count)),
          (r = d + 1)
        continue
      }
      t.isPadded && (p = bv(d, t, n)),
        (l.string = p + l.pattern + Hl(l.count)),
        s.push(l),
        (r = d + 1),
        (o = l)
    }
    return s
  }
  function Qa (e, i, t, n, a) {
    let s = []
    for (let r of e) {
      let { string: o } = r
      !n && !Ml(i, 'string', o) && s.push(t + o),
        n && Ml(i, 'string', o) && s.push(t + o)
    }
    return s
  }
  function vv (e, i) {
    let t = []
    for (let n = 0; n < e.length; n++) t.push([e[n], i[n]])
    return t
  }
  function hv (e, i) {
    return e > i ? 1 : i > e ? -1 : 0
  }
  function Ml (e, i, t) {
    return e.some(n => n[i] === t)
  }
  function ql (e, i) {
    return Number(String(e).slice(0, -i) + '9'.repeat(i))
  }
  function Pl (e, i) {
    return e - (e % Math.pow(10, i))
  }
  function Hl (e) {
    let [i = 0, t = ''] = e
    return t || i > 1 ? `{${i + (t ? ',' + t : '')}}` : ''
  }
  function gv (e, i, t) {
    return `[${e}${i - e == 1 ? '' : '-'}${i}]`
  }
  function Dl (e) {
    return /^-?(0+)\d/.test(e)
  }
  function bv (e, i, t) {
    if (!i.isPadded) return e
    let n = Math.abs(i.maxLen - String(e).length),
      a = t.relaxZeros !== !1
    switch (n) {
      case 0:
        return ''
      case 1:
        return a ? '0?' : '0'
      case 2:
        return a ? '0{0,2}' : '00'
      default:
        return a ? `0{0,${n}}` : `0{${n}}`
    }
  }
  ii.cache = {}
  ii.clearCache = () => (ii.cache = {})
  Nl.exports = ii
})
var Fa = y((Xw, Gl) => {
  'use strict'
  var yv = require('util'),
    Ul = $l(),
    zl = e => e !== null && typeof e == 'object' && !Array.isArray(e),
    Ev = e => i => (e === !0 ? Number(i) : String(i)),
    Ia = e => typeof e == 'number' || (typeof e == 'string' && e !== ''),
    Vi = e => Number.isInteger(+e),
    Ra = e => {
      let i = `${e}`,
        t = -1
      if ((i[0] === '-' && (i = i.slice(1)), i === '0')) return !1
      for (; i[++t] === '0'; );
      return t > 0
    },
    wv = (e, i, t) =>
      typeof e == 'string' || typeof i == 'string' ? !0 : t.stringify === !0,
    Cv = (e, i, t) => {
      if (i > 0) {
        let n = e[0] === '-' ? '-' : ''
        n && (e = e.slice(1)), (e = n + e.padStart(n ? i - 1 : i, '0'))
      }
      return t === !1 ? String(e) : e
    },
    Kl = (e, i) => {
      let t = e[0] === '-' ? '-' : ''
      for (t && ((e = e.slice(1)), i--); e.length < i; ) e = '0' + e
      return t ? '-' + e : e
    },
    _v = (e, i) => {
      e.negatives.sort((r, o) => (r < o ? -1 : r > o ? 1 : 0)),
        e.positives.sort((r, o) => (r < o ? -1 : r > o ? 1 : 0))
      let t = i.capture ? '' : '?:',
        n = '',
        a = '',
        s
      return (
        e.positives.length && (n = e.positives.join('|')),
        e.negatives.length && (a = `-(${t}${e.negatives.join('|')})`),
        n && a ? (s = `${n}|${a}`) : (s = n || a),
        i.wrap ? `(${t}${s})` : s
      )
    },
    Wl = (e, i, t, n) => {
      if (t) return Ul(e, i, k({ wrap: !1 }, n))
      let a = String.fromCharCode(e)
      if (e === i) return a
      let s = String.fromCharCode(i)
      return `[${a}-${s}]`
    },
    Jl = (e, i, t) => {
      if (Array.isArray(e)) {
        let n = t.wrap === !0,
          a = t.capture ? '' : '?:'
        return n ? `(${a}${e.join('|')})` : e.join('|')
      }
      return Ul(e, i, t)
    },
    Yl = (...e) =>
      new RangeError('Invalid range arguments: ' + yv.inspect(...e)),
    Xl = (e, i, t) => {
      if (t.strictRanges === !0) throw Yl([e, i])
      return []
    },
    kv = (e, i) => {
      if (i.strictRanges === !0)
        throw new TypeError(`Expected step "${e}" to be a number`)
      return []
    },
    Bv = (e, i, t = 1, n = {}) => {
      let a = Number(e),
        s = Number(i)
      if (!Number.isInteger(a) || !Number.isInteger(s)) {
        if (n.strictRanges === !0) throw Yl([e, i])
        return []
      }
      a === 0 && (a = 0), s === 0 && (s = 0)
      let r = a > s,
        o = String(e),
        c = String(i),
        d = String(t)
      t = Math.max(Math.abs(t), 1)
      let l = Ra(o) || Ra(c) || Ra(d),
        p = l ? Math.max(o.length, c.length, d.length) : 0,
        u = l === !1 && wv(e, i, n) === !1,
        m = n.transform || Ev(u)
      if (n.toRegex && t === 1) return Wl(Kl(e, p), Kl(i, p), !0, n)
      let f = { negatives: [], positives: [] },
        h = w => f[w < 0 ? 'negatives' : 'positives'].push(Math.abs(w)),
        x = [],
        v = 0
      for (; r ? a >= s : a <= s; )
        n.toRegex === !0 && t > 1 ? h(a) : x.push(Cv(m(a, v), p, u)),
          (a = r ? a - t : a + t),
          v++
      return n.toRegex === !0
        ? t > 1
          ? _v(f, n)
          : Jl(x, null, k({ wrap: !1 }, n))
        : x
    },
    Sv = (e, i, t = 1, n = {}) => {
      if ((!Vi(e) && e.length > 1) || (!Vi(i) && i.length > 1))
        return Xl(e, i, n)
      let a = n.transform || (u => String.fromCharCode(u)),
        s = `${e}`.charCodeAt(0),
        r = `${i}`.charCodeAt(0),
        o = s > r,
        c = Math.min(s, r),
        d = Math.max(s, r)
      if (n.toRegex && t === 1) return Wl(c, d, !1, n)
      let l = [],
        p = 0
      for (; o ? s >= r : s <= r; )
        l.push(a(s, p)), (s = o ? s - t : s + t), p++
      return n.toRegex === !0 ? Jl(l, null, { wrap: !1, options: n }) : l
    },
    Zt = (e, i, t, n = {}) => {
      if (i == null && Ia(e)) return [e]
      if (!Ia(e) || !Ia(i)) return Xl(e, i, n)
      if (typeof t == 'function') return Zt(e, i, 1, { transform: t })
      if (zl(t)) return Zt(e, i, 0, t)
      let a = k({}, n)
      return (
        a.capture === !0 && (a.wrap = !0),
        (t = t || a.step || 1),
        Vi(t)
          ? Vi(e) && Vi(i)
            ? Bv(e, i, t, a)
            : Sv(e, i, Math.max(Math.abs(t), 1), a)
          : t != null && !zl(t)
          ? kv(t, a)
          : Zt(e, i, 1, t)
      )
    }
  Gl.exports = Zt
})
var ep = y((Vw, Vl) => {
  'use strict'
  var Qv = Fa(),
    Zl = Xt(),
    Iv = (e, i = {}) => {
      let t = (n, a = {}) => {
        let s = Zl.isInvalidBrace(a),
          r = n.invalid === !0 && i.escapeInvalid === !0,
          o = s === !0 || r === !0,
          c = i.escapeInvalid === !0 ? '\\' : '',
          d = ''
        if (n.isOpen === !0 || n.isClose === !0) return c + n.value
        if (n.type === 'open') return o ? c + n.value : '('
        if (n.type === 'close') return o ? c + n.value : ')'
        if (n.type === 'comma')
          return n.prev.type === 'comma' ? '' : o ? n.value : '|'
        if (n.value) return n.value
        if (n.nodes && n.ranges > 0) {
          let l = Zl.reduce(n.nodes),
            p = Qv(...l, k(k({}, i), { wrap: !1, toRegex: !0 }))
          if (p.length !== 0) return l.length > 1 && p.length > 1 ? `(${p})` : p
        }
        if (n.nodes) for (let l of n.nodes) d += t(l, n)
        return d
      }
      return t(e)
    }
  Vl.exports = Iv
})
var np = y((Zw, ip) => {
  'use strict'
  var Rv = Fa(),
    tp = Vt(),
    gi = Xt(),
    ti = (e = '', i = '', t = !1) => {
      let n = []
      if (((e = [].concat(e)), (i = [].concat(i)), !i.length)) return e
      if (!e.length) return t ? gi.flatten(i).map(a => `{${a}}`) : i
      for (let a of e)
        if (Array.isArray(a)) for (let s of a) n.push(ti(s, i, t))
        else
          for (let s of i)
            t === !0 && typeof s == 'string' && (s = `{${s}}`),
              n.push(Array.isArray(s) ? ti(a, s, t) : a + s)
      return gi.flatten(n)
    },
    Fv = (e, i = {}) => {
      let t = i.rangeLimit === void 0 ? 1e3 : i.rangeLimit,
        n = (a, s = {}) => {
          a.queue = []
          let r = s,
            o = s.queue
          for (; r.type !== 'brace' && r.type !== 'root' && r.parent; )
            (r = r.parent), (o = r.queue)
          if (a.invalid || a.dollar) {
            o.push(ti(o.pop(), tp(a, i)))
            return
          }
          if (a.type === 'brace' && a.invalid !== !0 && a.nodes.length === 2) {
            o.push(ti(o.pop(), ['{}']))
            return
          }
          if (a.nodes && a.ranges > 0) {
            let p = gi.reduce(a.nodes)
            if (gi.exceedsLimit(...p, i.step, t))
              throw new RangeError(
                'expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.'
              )
            let u = Rv(...p, i)
            u.length === 0 && (u = tp(a, i)),
              o.push(ti(o.pop(), u)),
              (a.nodes = [])
            return
          }
          let c = gi.encloseBrace(a),
            d = a.queue,
            l = a
          for (; l.type !== 'brace' && l.type !== 'root' && l.parent; )
            (l = l.parent), (d = l.queue)
          for (let p = 0; p < a.nodes.length; p++) {
            let u = a.nodes[p]
            if (u.type === 'comma' && a.type === 'brace') {
              p === 1 && d.push(''), d.push('')
              continue
            }
            if (u.type === 'close') {
              o.push(ti(o.pop(), d, c))
              continue
            }
            if (u.value && u.type !== 'open') {
              d.push(ti(d.pop(), u.value))
              continue
            }
            u.nodes && n(u, a)
          }
          return d
        }
      return gi.flatten(n(e))
    }
  ip.exports = Fv
})
var sp = y((eC, ap) => {
  'use strict'
  ap.exports = {
    MAX_LENGTH: 1024 * 64,
    CHAR_0: '0',
    CHAR_9: '9',
    CHAR_UPPERCASE_A: 'A',
    CHAR_LOWERCASE_A: 'a',
    CHAR_UPPERCASE_Z: 'Z',
    CHAR_LOWERCASE_Z: 'z',
    CHAR_LEFT_PARENTHESES: '(',
    CHAR_RIGHT_PARENTHESES: ')',
    CHAR_ASTERISK: '*',
    CHAR_AMPERSAND: '&',
    CHAR_AT: '@',
    CHAR_BACKSLASH: '\\',
    CHAR_BACKTICK: '`',
    CHAR_CARRIAGE_RETURN: '\r',
    CHAR_CIRCUMFLEX_ACCENT: '^',
    CHAR_COLON: ':',
    CHAR_COMMA: ',',
    CHAR_DOLLAR: '$',
    CHAR_DOT: '.',
    CHAR_DOUBLE_QUOTE: '"',
    CHAR_EQUAL: '=',
    CHAR_EXCLAMATION_MARK: '!',
    CHAR_FORM_FEED: '\f',
    CHAR_FORWARD_SLASH: '/',
    CHAR_HASH: '#',
    CHAR_HYPHEN_MINUS: '-',
    CHAR_LEFT_ANGLE_BRACKET: '<',
    CHAR_LEFT_CURLY_BRACE: '{',
    CHAR_LEFT_SQUARE_BRACKET: '[',
    CHAR_LINE_FEED: `
`,
    CHAR_NO_BREAK_SPACE: '\xA0',
    CHAR_PERCENT: '%',
    CHAR_PLUS: '+',
    CHAR_QUESTION_MARK: '?',
    CHAR_RIGHT_ANGLE_BRACKET: '>',
    CHAR_RIGHT_CURLY_BRACE: '}',
    CHAR_RIGHT_SQUARE_BRACKET: ']',
    CHAR_SEMICOLON: ';',
    CHAR_SINGLE_QUOTE: "'",
    CHAR_SPACE: ' ',
    CHAR_TAB: '	',
    CHAR_UNDERSCORE: '_',
    CHAR_VERTICAL_LINE: '|',
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF'
  }
})
var pp = y((iC, rp) => {
  'use strict'
  var Ov = Vt(),
    {
      MAX_LENGTH: op,
      CHAR_BACKSLASH: Oa,
      CHAR_BACKTICK: Lv,
      CHAR_COMMA: Nv,
      CHAR_DOT: jv,
      CHAR_LEFT_PARENTHESES: Tv,
      CHAR_RIGHT_PARENTHESES: Dv,
      CHAR_LEFT_CURLY_BRACE: qv,
      CHAR_RIGHT_CURLY_BRACE: Pv,
      CHAR_LEFT_SQUARE_BRACKET: cp,
      CHAR_RIGHT_SQUARE_BRACKET: lp,
      CHAR_DOUBLE_QUOTE: Hv,
      CHAR_SINGLE_QUOTE: Mv,
      CHAR_NO_BREAK_SPACE: $v,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: Gv
    } = sp(),
    Uv = (e, i = {}) => {
      if (typeof e != 'string') throw new TypeError('Expected a string')
      let t = i || {},
        n = typeof t.maxLength == 'number' ? Math.min(op, t.maxLength) : op
      if (e.length > n)
        throw new SyntaxError(
          `Input length (${e.length}), exceeds max characters (${n})`
        )
      let a = { type: 'root', input: e, nodes: [] },
        s = [a],
        r = a,
        o = a,
        c = 0,
        d = e.length,
        l = 0,
        p = 0,
        u,
        m = {},
        f = () => e[l++],
        h = x => {
          if (
            (x.type === 'text' && o.type === 'dot' && (o.type = 'text'),
            o && o.type === 'text' && x.type === 'text')
          ) {
            o.value += x.value
            return
          }
          return r.nodes.push(x), (x.parent = r), (x.prev = o), (o = x), x
        }
      for (h({ type: 'bos' }); l < d; )
        if (((r = s[s.length - 1]), (u = f()), !(u === Gv || u === $v))) {
          if (u === Oa) {
            h({ type: 'text', value: (i.keepEscaping ? u : '') + f() })
            continue
          }
          if (u === lp) {
            h({ type: 'text', value: '\\' + u })
            continue
          }
          if (u === cp) {
            c++
            let x = !0,
              v
            for (; l < d && (v = f()); ) {
              if (((u += v), v === cp)) {
                c++
                continue
              }
              if (v === Oa) {
                u += f()
                continue
              }
              if (v === lp && (c--, c === 0)) break
            }
            h({ type: 'text', value: u })
            continue
          }
          if (u === Tv) {
            ;(r = h({ type: 'paren', nodes: [] })),
              s.push(r),
              h({ type: 'text', value: u })
            continue
          }
          if (u === Dv) {
            if (r.type !== 'paren') {
              h({ type: 'text', value: u })
              continue
            }
            ;(r = s.pop()), h({ type: 'text', value: u }), (r = s[s.length - 1])
            continue
          }
          if (u === Hv || u === Mv || u === Lv) {
            let x = u,
              v
            for (i.keepQuotes !== !0 && (u = ''); l < d && (v = f()); ) {
              if (v === Oa) {
                u += v + f()
                continue
              }
              if (v === x) {
                i.keepQuotes === !0 && (u += v)
                break
              }
              u += v
            }
            h({ type: 'text', value: u })
            continue
          }
          if (u === qv) {
            p++
            let x = (o.value && o.value.slice(-1) === '$') || r.dollar === !0
            ;(r = h({
              type: 'brace',
              open: !0,
              close: !1,
              dollar: x,
              depth: p,
              commas: 0,
              ranges: 0,
              nodes: []
            })),
              s.push(r),
              h({ type: 'open', value: u })
            continue
          }
          if (u === Pv) {
            if (r.type !== 'brace') {
              h({ type: 'text', value: u })
              continue
            }
            let x = 'close'
            ;(r = s.pop()),
              (r.close = !0),
              h({ type: x, value: u }),
              p--,
              (r = s[s.length - 1])
            continue
          }
          if (u === Nv && p > 0) {
            if (r.ranges > 0) {
              r.ranges = 0
              let x = r.nodes.shift()
              r.nodes = [x, { type: 'text', value: Ov(r) }]
            }
            h({ type: 'comma', value: u }), r.commas++
            continue
          }
          if (u === jv && p > 0 && r.commas === 0) {
            let x = r.nodes
            if (p === 0 || x.length === 0) {
              h({ type: 'text', value: u })
              continue
            }
            if (o.type === 'dot') {
              if (
                ((r.range = []),
                (o.value += u),
                (o.type = 'range'),
                r.nodes.length !== 3 && r.nodes.length !== 5)
              ) {
                ;(r.invalid = !0), (r.ranges = 0), (o.type = 'text')
                continue
              }
              r.ranges++, (r.args = [])
              continue
            }
            if (o.type === 'range') {
              x.pop()
              let v = x[x.length - 1]
              ;(v.value += o.value + u), (o = v), r.ranges--
              continue
            }
            h({ type: 'dot', value: u })
            continue
          }
          h({ type: 'text', value: u })
        }
      do
        if (((r = s.pop()), r.type !== 'root')) {
          r.nodes.forEach(w => {
            w.nodes ||
              (w.type === 'open' && (w.isOpen = !0),
              w.type === 'close' && (w.isClose = !0),
              w.nodes || (w.type = 'text'),
              (w.invalid = !0))
          })
          let x = s[s.length - 1],
            v = x.nodes.indexOf(r)
          x.nodes.splice(v, 1, ...r.nodes)
        }
      while (s.length > 0)
      return h({ type: 'eos' }), a
    }
  rp.exports = Uv
})
var mp = y((tC, up) => {
  'use strict'
  var dp = Vt(),
    zv = ep(),
    Kv = np(),
    Wv = pp(),
    ge = (e, i = {}) => {
      let t = []
      if (Array.isArray(e))
        for (let n of e) {
          let a = ge.create(n, i)
          Array.isArray(a) ? t.push(...a) : t.push(a)
        }
      else t = [].concat(ge.create(e, i))
      return (
        i && i.expand === !0 && i.nodupes === !0 && (t = [...new Set(t)]), t
      )
    }
  ge.parse = (e, i = {}) => Wv(e, i)
  ge.stringify = (e, i = {}) =>
    typeof e == 'string' ? dp(ge.parse(e, i), i) : dp(e, i)
  ge.compile = (e, i = {}) => (
    typeof e == 'string' && (e = ge.parse(e, i)), zv(e, i)
  )
  ge.expand = (e, i = {}) => {
    typeof e == 'string' && (e = ge.parse(e, i))
    let t = Kv(e, i)
    return (
      i.noempty === !0 && (t = t.filter(Boolean)),
      i.nodupes === !0 && (t = [...new Set(t)]),
      t
    )
  }
  ge.create = (e, i = {}) =>
    e === '' || e.length < 3
      ? [e]
      : i.expand !== !0
      ? ge.compile(e, i)
      : ge.expand(e, i)
  up.exports = ge
})
var hp = y((nC, fp) => {
  fp.exports = [
    '3dm',
    '3ds',
    '3g2',
    '3gp',
    '7z',
    'a',
    'aac',
    'adp',
    'ai',
    'aif',
    'aiff',
    'alz',
    'ape',
    'apk',
    'appimage',
    'ar',
    'arj',
    'asf',
    'au',
    'avi',
    'bak',
    'baml',
    'bh',
    'bin',
    'bk',
    'bmp',
    'btif',
    'bz2',
    'bzip2',
    'cab',
    'caf',
    'cgm',
    'class',
    'cmx',
    'cpio',
    'cr2',
    'cur',
    'dat',
    'dcm',
    'deb',
    'dex',
    'djvu',
    'dll',
    'dmg',
    'dng',
    'doc',
    'docm',
    'docx',
    'dot',
    'dotm',
    'dra',
    'DS_Store',
    'dsk',
    'dts',
    'dtshd',
    'dvb',
    'dwg',
    'dxf',
    'ecelp4800',
    'ecelp7470',
    'ecelp9600',
    'egg',
    'eol',
    'eot',
    'epub',
    'exe',
    'f4v',
    'fbs',
    'fh',
    'fla',
    'flac',
    'flatpak',
    'fli',
    'flv',
    'fpx',
    'fst',
    'fvt',
    'g3',
    'gh',
    'gif',
    'graffle',
    'gz',
    'gzip',
    'h261',
    'h263',
    'h264',
    'icns',
    'ico',
    'ief',
    'img',
    'ipa',
    'iso',
    'jar',
    'jpeg',
    'jpg',
    'jpgv',
    'jpm',
    'jxr',
    'key',
    'ktx',
    'lha',
    'lib',
    'lvp',
    'lz',
    'lzh',
    'lzma',
    'lzo',
    'm3u',
    'm4a',
    'm4v',
    'mar',
    'mdi',
    'mht',
    'mid',
    'midi',
    'mj2',
    'mka',
    'mkv',
    'mmr',
    'mng',
    'mobi',
    'mov',
    'movie',
    'mp3',
    'mp4',
    'mp4a',
    'mpeg',
    'mpg',
    'mpga',
    'mxu',
    'nef',
    'npx',
    'numbers',
    'nupkg',
    'o',
    'oga',
    'ogg',
    'ogv',
    'otf',
    'pages',
    'pbm',
    'pcx',
    'pdb',
    'pdf',
    'pea',
    'pgm',
    'pic',
    'png',
    'pnm',
    'pot',
    'potm',
    'potx',
    'ppa',
    'ppam',
    'ppm',
    'pps',
    'ppsm',
    'ppsx',
    'ppt',
    'pptm',
    'pptx',
    'psd',
    'pya',
    'pyc',
    'pyo',
    'pyv',
    'qt',
    'rar',
    'ras',
    'raw',
    'resources',
    'rgb',
    'rip',
    'rlc',
    'rmf',
    'rmvb',
    'rpm',
    'rtf',
    'rz',
    's3m',
    's7z',
    'scpt',
    'sgi',
    'shar',
    'snap',
    'sil',
    'sketch',
    'slk',
    'smv',
    'snk',
    'so',
    'stl',
    'suo',
    'sub',
    'swf',
    'tar',
    'tbz',
    'tbz2',
    'tga',
    'tgz',
    'thmx',
    'tif',
    'tiff',
    'tlz',
    'ttc',
    'ttf',
    'txz',
    'udf',
    'uvh',
    'uvi',
    'uvm',
    'uvp',
    'uvs',
    'uvu',
    'viv',
    'vob',
    'war',
    'wav',
    'wax',
    'wbmp',
    'wdp',
    'weba',
    'webm',
    'webp',
    'whl',
    'wim',
    'wm',
    'wma',
    'wmv',
    'wmx',
    'woff',
    'woff2',
    'wrm',
    'wvx',
    'xbm',
    'xif',
    'xla',
    'xlam',
    'xls',
    'xlsb',
    'xlsm',
    'xlsx',
    'xlt',
    'xltm',
    'xltx',
    'xm',
    'xmind',
    'xpi',
    'xpm',
    'xwd',
    'xz',
    'z',
    'zip',
    'zipx'
  ]
})
var vp = y((aC, xp) => {
  xp.exports = hp()
})
var Ap = y((sC, gp) => {
  'use strict'
  var Jv = require('path'),
    Yv = vp(),
    Xv = new Set(Yv)
  gp.exports = e =>
    Xv.has(
      Jv.extname(e)
        .slice(1)
        .toLowerCase()
    )
})
var en = y(I => {
  'use strict'
  var { sep: Vv } = require('path'),
    { platform: La } = process
  I.EV_ALL = 'all'
  I.EV_READY = 'ready'
  I.EV_ADD = 'add'
  I.EV_CHANGE = 'change'
  I.EV_ADD_DIR = 'addDir'
  I.EV_UNLINK = 'unlink'
  I.EV_UNLINK_DIR = 'unlinkDir'
  I.EV_RAW = 'raw'
  I.EV_ERROR = 'error'
  I.STR_DATA = 'data'
  I.STR_END = 'end'
  I.STR_CLOSE = 'close'
  I.FSEVENT_CREATED = 'created'
  I.FSEVENT_MODIFIED = 'modified'
  I.FSEVENT_DELETED = 'deleted'
  I.FSEVENT_MOVED = 'moved'
  I.FSEVENT_CLONED = 'cloned'
  I.FSEVENT_UNKNOWN = 'unknown'
  I.FSEVENT_TYPE_FILE = 'file'
  I.FSEVENT_TYPE_DIRECTORY = 'directory'
  I.FSEVENT_TYPE_SYMLINK = 'symlink'
  I.KEY_LISTENERS = 'listeners'
  I.KEY_ERR = 'errHandlers'
  I.KEY_RAW = 'rawEmitters'
  I.HANDLER_KEYS = [I.KEY_LISTENERS, I.KEY_ERR, I.KEY_RAW]
  I.DOT_SLASH = `.${Vv}`
  I.BACK_SLASH_RE = /\\/g
  I.DOUBLE_SLASH_RE = /\/\//
  I.SLASH_OR_BACK_SLASH_RE = /[/\\]/
  I.DOT_RE = /\..*\.(sw[px])$|~$|\.subl.*\.tmp/
  I.REPLACER_RE = /^\.[/\\]/
  I.SLASH = '/'
  I.SLASH_SLASH = '//'
  I.BRACE_START = '{'
  I.BANG = '!'
  I.ONE_DOT = '.'
  I.TWO_DOTS = '..'
  I.STAR = '*'
  I.GLOBSTAR = '**'
  I.ROOT_GLOBSTAR = '/**/*'
  I.SLASH_GLOBSTAR = '/**'
  I.DIR_SUFFIX = 'Dir'
  I.ANYMATCH_OPTS = { dot: !0 }
  I.STRING_TYPE = 'string'
  I.FUNCTION_TYPE = 'function'
  I.EMPTY_STR = ''
  I.EMPTY_FN = () => {}
  I.IDENTITY_FN = e => e
  I.isWindows = La === 'win32'
  I.isMacos = La === 'darwin'
  I.isLinux = La === 'linux'
})
var kp = y((oC, bp) => {
  'use strict'
  var je = require('fs'),
    ie = require('path'),
    { promisify: Zi } = require('util'),
    Zv = Ap(),
    {
      isWindows: eg,
      isLinux: ig,
      EMPTY_FN: tg,
      EMPTY_STR: ng,
      KEY_LISTENERS: Ai,
      KEY_ERR: Na,
      KEY_RAW: et,
      HANDLER_KEYS: ag,
      EV_CHANGE: tn,
      EV_ADD: nn,
      EV_ADD_DIR: sg,
      EV_ERROR: yp,
      STR_DATA: rg,
      STR_END: og,
      BRACE_START: cg,
      STAR: lg
    } = en(),
    pg = 'watch',
    ug = Zi(je.open),
    Ep = Zi(je.stat),
    dg = Zi(je.lstat),
    mg = Zi(je.close),
    ja = Zi(je.realpath),
    fg = { lstat: dg, stat: Ep },
    Ta = (e, i) => {
      e instanceof Set ? e.forEach(i) : i(e)
    },
    it = (e, i, t) => {
      let n = e[i]
      n instanceof Set || (e[i] = n = new Set([n])), n.add(t)
    },
    hg = e => i => {
      let t = e[i]
      t instanceof Set ? t.clear() : delete e[i]
    },
    tt = (e, i, t) => {
      let n = e[i]
      n instanceof Set ? n.delete(t) : n === t && delete e[i]
    },
    wp = e => (e instanceof Set ? e.size === 0 : !e),
    an = new Map()
  function Cp (e, i, t, n, a) {
    let s = (r, o) => {
      t(e),
        a(r, o, { watchedPath: e }),
        o && e !== o && sn(ie.resolve(e, o), Ai, ie.join(e, o))
    }
    try {
      return je.watch(e, i, s)
    } catch (r) {
      n(r)
    }
  }
  var sn = (e, i, t, n, a) => {
      let s = an.get(e)
      !s ||
        Ta(s[i], r => {
          r(t, n, a)
        })
    },
    xg = (e, i, t, n) => {
      let { listener: a, errHandler: s, rawEmitter: r } = n,
        o = an.get(i),
        c
      if (!t.persistent) return (c = Cp(e, t, a, s, r)), c.close.bind(c)
      if (o) it(o, Ai, a), it(o, Na, s), it(o, et, r)
      else {
        if (((c = Cp(e, t, sn.bind(null, i, Ai), s, sn.bind(null, i, et))), !c))
          return
        c.on(yp, async d => {
          let l = sn.bind(null, i, Na)
          if (((o.watcherUnusable = !0), eg && d.code === 'EPERM'))
            try {
              let p = await ug(e, 'r')
              await mg(p), l(d)
            } catch (p) {}
          else l(d)
        }),
          (o = { listeners: a, errHandlers: s, rawEmitters: r, watcher: c }),
          an.set(i, o)
      }
      return () => {
        tt(o, Ai, a),
          tt(o, Na, s),
          tt(o, et, r),
          wp(o.listeners) &&
            (o.watcher.close(),
            an.delete(i),
            ag.forEach(hg(o)),
            (o.watcher = void 0),
            Object.freeze(o))
      }
    },
    Da = new Map(),
    vg = (e, i, t, n) => {
      let { listener: a, rawEmitter: s } = n,
        r = Da.get(i),
        o = new Set(),
        c = new Set(),
        d = r && r.options
      return (
        d &&
          (d.persistent < t.persistent || d.interval > t.interval) &&
          ((o = r.listeners),
          (c = r.rawEmitters),
          je.unwatchFile(i),
          (r = void 0)),
        r
          ? (it(r, Ai, a), it(r, et, s))
          : ((r = {
              listeners: a,
              rawEmitters: s,
              options: t,
              watcher: je.watchFile(i, t, (l, p) => {
                Ta(r.rawEmitters, m => {
                  m(tn, i, { curr: l, prev: p })
                })
                let u = l.mtimeMs
                ;(l.size !== p.size || u > p.mtimeMs || u === 0) &&
                  Ta(r.listeners, m => m(e, l))
              })
            }),
            Da.set(i, r)),
        () => {
          tt(r, Ai, a),
            tt(r, et, s),
            wp(r.listeners) &&
              (Da.delete(i),
              je.unwatchFile(i),
              (r.options = r.watcher = void 0),
              Object.freeze(r))
        }
      )
    },
    _p = class {
      constructor (i) {
        ;(this.fsw = i), (this._boundHandleError = t => i._handleError(t))
      }
      _watchWithNodeFs (i, t) {
        let n = this.fsw.options,
          a = ie.dirname(i),
          s = ie.basename(i)
        this.fsw._getWatchedDir(a).add(s)
        let o = ie.resolve(i),
          c = { persistent: n.persistent }
        t || (t = tg)
        let d
        return (
          n.usePolling
            ? ((c.interval =
                n.enableBinaryInterval && Zv(s)
                  ? n.binaryInterval
                  : n.interval),
              (d = vg(i, o, c, { listener: t, rawEmitter: this.fsw._emitRaw })))
            : (d = xg(i, o, c, {
                listener: t,
                errHandler: this._boundHandleError,
                rawEmitter: this.fsw._emitRaw
              })),
          d
        )
      }
      _handleFile (i, t, n) {
        if (this.fsw.closed) return
        let a = ie.dirname(i),
          s = ie.basename(i),
          r = this.fsw._getWatchedDir(a),
          o = t
        if (r.has(s)) return
        let c = async (l, p) => {
            if (!!this.fsw._throttle(pg, i, 5)) {
              if (!p || p.mtimeMs === 0)
                try {
                  let u = await Ep(i)
                  if (this.fsw.closed) return
                  let m = u.atimeMs,
                    f = u.mtimeMs
                  ;(!m || m <= f || f !== o.mtimeMs) &&
                    this.fsw._emit(tn, i, u),
                    ig && o.ino !== u.ino
                      ? (this.fsw._closeFile(l),
                        (o = u),
                        this.fsw._addPathCloser(l, this._watchWithNodeFs(i, c)))
                      : (o = u)
                } catch (u) {
                  this.fsw._remove(a, s)
                }
              else if (r.has(s)) {
                let u = p.atimeMs,
                  m = p.mtimeMs
                ;(!u || u <= m || m !== o.mtimeMs) && this.fsw._emit(tn, i, p),
                  (o = p)
              }
            }
          },
          d = this._watchWithNodeFs(i, c)
        if (
          !(n && this.fsw.options.ignoreInitial) &&
          this.fsw._isntIgnored(i)
        ) {
          if (!this.fsw._throttle(nn, i, 0)) return
          this.fsw._emit(nn, i, t)
        }
        return d
      }
      async _handleSymlink (i, t, n, a) {
        if (this.fsw.closed) return
        let s = i.fullPath,
          r = this.fsw._getWatchedDir(t)
        if (!this.fsw.options.followSymlinks) {
          this.fsw._incrReadyCount()
          let o = await ja(n)
          return this.fsw.closed
            ? void 0
            : (r.has(a)
                ? this.fsw._symlinkPaths.get(s) !== o &&
                  (this.fsw._symlinkPaths.set(s, o),
                  this.fsw._emit(tn, n, i.stats))
                : (r.add(a),
                  this.fsw._symlinkPaths.set(s, o),
                  this.fsw._emit(nn, n, i.stats)),
              this.fsw._emitReady(),
              !0)
        }
        if (this.fsw._symlinkPaths.has(s)) return !0
        this.fsw._symlinkPaths.set(s, !0)
      }
      _handleRead (i, t, n, a, s, r, o) {
        if (
          ((i = ie.join(i, ng)),
          !n.hasGlob && ((o = this.fsw._throttle('readdir', i, 1e3)), !o))
        )
          return
        let c = this.fsw._getWatchedDir(n.path),
          d = new Set(),
          l = this.fsw
            ._readdirp(i, {
              fileFilter: p => n.filterPath(p),
              directoryFilter: p => n.filterDir(p),
              depth: 0
            })
            .on(rg, async p => {
              if (this.fsw.closed) {
                l = void 0
                return
              }
              let u = p.path,
                m = ie.join(i, u)
              if (
                (d.add(u),
                !(
                  p.stats.isSymbolicLink() &&
                  (await this._handleSymlink(p, i, m, u))
                ))
              ) {
                if (this.fsw.closed) {
                  l = void 0
                  return
                }
                ;(u === a || (!a && !c.has(u))) &&
                  (this.fsw._incrReadyCount(),
                  (m = ie.join(s, ie.relative(s, m))),
                  this._addToNodeFs(m, t, n, r + 1))
              }
            })
            .on(yp, this._boundHandleError)
        return new Promise(p =>
          l.once(og, () => {
            if (this.fsw.closed) {
              l = void 0
              return
            }
            let u = o ? o.clear() : !1
            p(),
              c
                .getChildren()
                .filter(
                  m =>
                    m !== i &&
                    !d.has(m) &&
                    (!n.hasGlob || n.filterPath({ fullPath: ie.resolve(i, m) }))
                )
                .forEach(m => {
                  this.fsw._remove(i, m)
                }),
              (l = void 0),
              u && this._handleRead(i, !1, n, a, s, r, o)
          })
        )
      }
      async _handleDir (i, t, n, a, s, r, o) {
        let c = this.fsw._getWatchedDir(ie.dirname(i)),
          d = c.has(ie.basename(i))
        !(n && this.fsw.options.ignoreInitial) &&
          !s &&
          !d &&
          (!r.hasGlob || r.globFilter(i)) &&
          this.fsw._emit(sg, i, t),
          c.add(ie.basename(i)),
          this.fsw._getWatchedDir(i)
        let l,
          p,
          u = this.fsw.options.depth
        if ((u == null || a <= u) && !this.fsw._symlinkPaths.has(o)) {
          if (
            !s &&
            (await this._handleRead(i, n, r, s, i, a, l), this.fsw.closed)
          )
            return
          p = this._watchWithNodeFs(i, (m, f) => {
            ;(f && f.mtimeMs === 0) || this._handleRead(m, !1, r, s, i, a, l)
          })
        }
        return p
      }
      async _addToNodeFs (i, t, n, a, s) {
        let r = this.fsw._emitReady
        if (this.fsw._isIgnored(i) || this.fsw.closed) return r(), !1
        let o = this.fsw._getWatchHelpers(i, a)
        !o.hasGlob &&
          n &&
          ((o.hasGlob = n.hasGlob),
          (o.globFilter = n.globFilter),
          (o.filterPath = c => n.filterPath(c)),
          (o.filterDir = c => n.filterDir(c)))
        try {
          let c = await fg[o.statMethod](o.watchPath)
          if (this.fsw.closed) return
          if (this.fsw._isIgnored(o.watchPath, c)) return r(), !1
          let d =
              this.fsw.options.followSymlinks &&
              !i.includes(lg) &&
              !i.includes(cg),
            l
          if (c.isDirectory()) {
            let p = d ? await ja(i) : i
            if (
              this.fsw.closed ||
              ((l = await this._handleDir(o.watchPath, c, t, a, s, o, p)),
              this.fsw.closed)
            )
              return
            i !== p && p !== void 0 && this.fsw._symlinkPaths.set(p, !0)
          } else if (c.isSymbolicLink()) {
            let p = d ? await ja(i) : i
            if (this.fsw.closed) return
            let u = ie.dirname(o.watchPath)
            if (
              (this.fsw._getWatchedDir(u).add(o.watchPath),
              this.fsw._emit(nn, o.watchPath, c),
              (l = await this._handleDir(u, c, t, a, i, o, p)),
              this.fsw.closed)
            )
              return
            p !== void 0 && this.fsw._symlinkPaths.set(ie.resolve(i), p)
          } else l = this._handleFile(o.watchPath, c, t)
          return r(), this.fsw._addPathCloser(i, l), !1
        } catch (c) {
          if (this.fsw._handleError(c)) return r(), i
        }
      }
    }
  bp.exports = _p
})
var Lp = y((cC, qa) => {
  'use strict'
  var Pa = require('fs'),
    Z = require('path'),
    { promisify: Ha } = require('util'),
    bi
  try {
    bi = require('fsevents')
  } catch (e) {
    process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR && console.error(e)
  }
  if (bi) {
    let e = process.version.match(/v(\d+)\.(\d+)/)
    if (e && e[1] && e[2]) {
      let i = Number.parseInt(e[1], 10),
        t = Number.parseInt(e[2], 10)
      i === 8 && t < 16 && (bi = void 0)
    }
  }
  var {
      EV_ADD: Ma,
      EV_CHANGE: gg,
      EV_ADD_DIR: Bp,
      EV_UNLINK: rn,
      EV_ERROR: Ag,
      STR_DATA: bg,
      STR_END: yg,
      FSEVENT_CREATED: Eg,
      FSEVENT_MODIFIED: wg,
      FSEVENT_DELETED: Cg,
      FSEVENT_MOVED: _g,
      FSEVENT_UNKNOWN: kg,
      FSEVENT_TYPE_FILE: Bg,
      FSEVENT_TYPE_DIRECTORY: nt,
      FSEVENT_TYPE_SYMLINK: Sp,
      ROOT_GLOBSTAR: Qp,
      DIR_SUFFIX: Sg,
      DOT_SLASH: Ip,
      FUNCTION_TYPE: $a,
      EMPTY_FN: Qg,
      IDENTITY_FN: Ig
    } = en(),
    Rg = e => (isNaN(e) ? {} : { depth: e }),
    Ga = Ha(Pa.stat),
    Fg = Ha(Pa.lstat),
    Rp = Ha(Pa.realpath),
    Og = { stat: Ga, lstat: Fg },
    ni = new Map(),
    Lg = 10,
    Ng = new Set([69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912]),
    jg = (e, i) => ({ stop: bi.watch(e, i) })
  function Dg (e, i, t, n) {
    let a = Z.extname(e) ? Z.dirname(e) : e,
      s = Z.dirname(a),
      r = ni.get(a)
    Tg(s) && (a = s)
    let o = Z.resolve(e),
      c = o !== i,
      d = (p, u, m) => {
        c && (p = p.replace(i, o)),
          (p === o || !p.indexOf(o + Z.sep)) && t(p, u, m)
      },
      l = !1
    for (let p of ni.keys())
      if (i.indexOf(Z.resolve(p) + Z.sep) === 0) {
        ;(a = p), (r = ni.get(a)), (l = !0)
        break
      }
    return (
      r || l
        ? r.listeners.add(d)
        : ((r = {
            listeners: new Set([d]),
            rawEmitter: n,
            watcher: jg(a, (p, u) => {
              if (!r.listeners.size) return
              let m = bi.getInfo(p, u)
              r.listeners.forEach(f => {
                f(p, u, m)
              }),
                r.rawEmitter(m.event, p, m)
            })
          }),
          ni.set(a, r)),
      () => {
        let p = r.listeners
        if ((p.delete(d), !p.size && (ni.delete(a), r.watcher)))
          return r.watcher.stop().then(() => {
            ;(r.rawEmitter = r.watcher = void 0), Object.freeze(r)
          })
      }
    )
  }
  var Tg = e => {
      let i = 0
      for (let t of ni.keys())
        if (t.indexOf(e) === 0 && (i++, i >= Lg)) return !0
      return !1
    },
    qg = () => bi && ni.size < 128,
    Ua = (e, i) => {
      let t = 0
      for (; !e.indexOf(i) && (e = Z.dirname(e)) !== i; ) t++
      return t
    },
    Fp = (e, i) =>
      (e.type === nt && i.isDirectory()) ||
      (e.type === Sp && i.isSymbolicLink()) ||
      (e.type === Bg && i.isFile()),
    Op = class {
      constructor (i) {
        this.fsw = i
      }
      checkIgnored (i, t) {
        let n = this.fsw._ignoredPaths
        if (this.fsw._isIgnored(i, t))
          return n.add(i), t && t.isDirectory() && n.add(i + Qp), !0
        n.delete(i), n.delete(i + Qp)
      }
      addOrChange (i, t, n, a, s, r, o, c) {
        let d = s.has(r) ? gg : Ma
        this.handleEvent(d, i, t, n, a, s, r, o, c)
      }
      async checkExists (i, t, n, a, s, r, o, c) {
        try {
          let d = await Ga(i)
          if (this.fsw.closed) return
          Fp(o, d)
            ? this.addOrChange(i, t, n, a, s, r, o, c)
            : this.handleEvent(rn, i, t, n, a, s, r, o, c)
        } catch (d) {
          d.code === 'EACCES'
            ? this.addOrChange(i, t, n, a, s, r, o, c)
            : this.handleEvent(rn, i, t, n, a, s, r, o, c)
        }
      }
      handleEvent (i, t, n, a, s, r, o, c, d) {
        if (!(this.fsw.closed || this.checkIgnored(t)))
          if (i === rn) {
            let l = c.type === nt
            ;(l || r.has(o)) && this.fsw._remove(s, o, l)
          } else {
            if (i === Ma) {
              if (
                (c.type === nt && this.fsw._getWatchedDir(t),
                c.type === Sp && d.followSymlinks)
              ) {
                let p = d.depth === void 0 ? void 0 : Ua(n, a) + 1
                return this._addToFsEvents(t, !1, !0, p)
              }
              this.fsw._getWatchedDir(s).add(o)
            }
            let l = c.type === nt ? i + Sg : i
            this.fsw._emit(l, t), l === Bp && this._addToFsEvents(t, !1, !0)
          }
      }
      _watchWithFsEvents (i, t, n, a) {
        if (this.fsw.closed || this.fsw._isIgnored(i)) return
        let s = this.fsw.options,
          o = Dg(
            i,
            t,
            async (c, d, l) => {
              if (this.fsw.closed || (s.depth !== void 0 && Ua(c, t) > s.depth))
                return
              let p = n(Z.join(i, Z.relative(i, c)))
              if (a && !a(p)) return
              let u = Z.dirname(p),
                m = Z.basename(p),
                f = this.fsw._getWatchedDir(l.type === nt ? p : u)
              if (Ng.has(d) || l.event === kg)
                if (typeof s.ignored === $a) {
                  let h
                  try {
                    h = await Ga(p)
                  } catch (x) {}
                  if (this.fsw.closed || this.checkIgnored(p, h)) return
                  Fp(l, h)
                    ? this.addOrChange(p, c, t, u, f, m, l, s)
                    : this.handleEvent(rn, p, c, t, u, f, m, l, s)
                } else this.checkExists(p, c, t, u, f, m, l, s)
              else
                switch (l.event) {
                  case Eg:
                  case wg:
                    return this.addOrChange(p, c, t, u, f, m, l, s)
                  case Cg:
                  case _g:
                    return this.checkExists(p, c, t, u, f, m, l, s)
                }
            },
            this.fsw._emitRaw
          )
        return this.fsw._emitReady(), o
      }
      async _handleFsEventsSymlink (i, t, n, a) {
        if (!(this.fsw.closed || this.fsw._symlinkPaths.has(t))) {
          this.fsw._symlinkPaths.set(t, !0), this.fsw._incrReadyCount()
          try {
            let s = await Rp(i)
            if (this.fsw.closed) return
            if (this.fsw._isIgnored(s)) return this.fsw._emitReady()
            this.fsw._incrReadyCount(),
              this._addToFsEvents(
                s || i,
                r => {
                  let o = i
                  return (
                    s && s !== Ip
                      ? (o = r.replace(s, i))
                      : r !== Ip && (o = Z.join(i, r)),
                    n(o)
                  )
                },
                !1,
                a
              )
          } catch (s) {
            if (this.fsw._handleError(s)) return this.fsw._emitReady()
          }
        }
      }
      emitAdd (i, t, n, a, s) {
        let r = n(i),
          o = t.isDirectory(),
          c = this.fsw._getWatchedDir(Z.dirname(r)),
          d = Z.basename(r)
        o && this.fsw._getWatchedDir(r),
          !c.has(d) &&
            (c.add(d),
            (!a.ignoreInitial || s === !0) && this.fsw._emit(o ? Bp : Ma, r, t))
      }
      initWatch (i, t, n, a) {
        if (this.fsw.closed) return
        let s = this._watchWithFsEvents(
          n.watchPath,
          Z.resolve(i || n.watchPath),
          a,
          n.globFilter
        )
        this.fsw._addPathCloser(t, s)
      }
      async _addToFsEvents (i, t, n, a) {
        if (this.fsw.closed) return
        let s = this.fsw.options,
          r = typeof t === $a ? t : Ig,
          o = this.fsw._getWatchHelpers(i)
        try {
          let c = await Og[o.statMethod](o.watchPath)
          if (this.fsw.closed) return
          if (this.fsw._isIgnored(o.watchPath, c)) throw null
          if (c.isDirectory()) {
            if (
              (o.globFilter || this.emitAdd(r(i), c, r, s, n), a && a > s.depth)
            )
              return
            this.fsw
              ._readdirp(
                o.watchPath,
                k(
                  {
                    fileFilter: d => o.filterPath(d),
                    directoryFilter: d => o.filterDir(d)
                  },
                  Rg(s.depth - (a || 0))
                )
              )
              .on(bg, d => {
                if (
                  this.fsw.closed ||
                  (d.stats.isDirectory() && !o.filterPath(d))
                )
                  return
                let l = Z.join(o.watchPath, d.path),
                  { fullPath: p } = d
                if (o.followSymlinks && d.stats.isSymbolicLink()) {
                  let u =
                    s.depth === void 0
                      ? void 0
                      : Ua(l, Z.resolve(o.watchPath)) + 1
                  this._handleFsEventsSymlink(l, p, r, u)
                } else this.emitAdd(l, d.stats, r, s, n)
              })
              .on(Ag, Qg)
              .on(yg, () => {
                this.fsw._emitReady()
              })
          } else this.emitAdd(o.watchPath, c, r, s, n), this.fsw._emitReady()
        } catch (c) {
          ;(!c || this.fsw._handleError(c)) &&
            (this.fsw._emitReady(), this.fsw._emitReady())
        }
        if (s.persistent && n !== !0)
          if (typeof t === $a) this.initWatch(void 0, i, o, r)
          else {
            let c
            try {
              c = await Rp(o.watchPath)
            } catch (d) {}
            this.initWatch(c, i, o, r)
          }
      }
    }
  qa.exports = Op
  qa.exports.canUse = qg
})
var rs = y(za => {
  'use strict'
  var { EventEmitter: Pg } = require('events'),
    Ka = require('fs'),
    H = require('path'),
    { promisify: Np } = require('util'),
    Hg = Al(),
    Wa = _l().default,
    Mg = Il(),
    Ja = Ba(),
    $g = mp(),
    Gg = _a(),
    Ug = kp(),
    jp = Lp(),
    {
      EV_ALL: Ya,
      EV_READY: zg,
      EV_ADD: on,
      EV_CHANGE: at,
      EV_UNLINK: Tp,
      EV_ADD_DIR: Kg,
      EV_UNLINK_DIR: Wg,
      EV_RAW: Jg,
      EV_ERROR: Xa,
      STR_CLOSE: Yg,
      STR_END: Xg,
      BACK_SLASH_RE: Vg,
      DOUBLE_SLASH_RE: Dp,
      SLASH_OR_BACK_SLASH_RE: Zg,
      DOT_RE: eA,
      REPLACER_RE: iA,
      SLASH: Va,
      SLASH_SLASH: tA,
      BRACE_START: nA,
      BANG: Za,
      ONE_DOT: qp,
      TWO_DOTS: aA,
      GLOBSTAR: sA,
      SLASH_GLOBSTAR: es,
      ANYMATCH_OPTS: is,
      STRING_TYPE: ts,
      FUNCTION_TYPE: rA,
      EMPTY_STR: ns,
      EMPTY_FN: oA,
      isWindows: cA,
      isMacos: lA
    } = en(),
    pA = Np(Ka.stat),
    uA = Np(Ka.readdir),
    as = (e = []) => (Array.isArray(e) ? e : [e]),
    Pp = (e, i = []) => (
      e.forEach(t => {
        Array.isArray(t) ? Pp(t, i) : i.push(t)
      }),
      i
    ),
    Mp = e => {
      let i = Pp(as(e))
      if (!i.every(t => typeof t === ts))
        throw new TypeError(`Non-string provided as watch path: ${i}`)
      return i.map(Hp)
    },
    $p = e => {
      let i = e.replace(Vg, Va),
        t = !1
      for (i.startsWith(tA) && (t = !0); i.match(Dp); ) i = i.replace(Dp, Va)
      return t && (i = Va + i), i
    },
    Hp = e => $p(H.normalize($p(e))),
    Gp = (e = ns) => i =>
      typeof i !== ts ? i : Hp(H.isAbsolute(i) ? i : H.join(e, i)),
    dA = (e, i) =>
      H.isAbsolute(e)
        ? e
        : e.startsWith(Za)
        ? Za + H.join(i, e.slice(1))
        : H.join(i, e),
    Be = (e, i) => e[i] === void 0,
    Up = class {
      constructor (i, t) {
        ;(this.path = i), (this._removeWatcher = t), (this.items = new Set())
      }
      add (i) {
        let { items: t } = this
        !t || (i !== qp && i !== aA && t.add(i))
      }
      async remove (i) {
        let { items: t } = this
        if (!t || (t.delete(i), t.size > 0)) return
        let n = this.path
        try {
          await uA(n)
        } catch (a) {
          this._removeWatcher &&
            this._removeWatcher(H.dirname(n), H.basename(n))
        }
      }
      has (i) {
        let { items: t } = this
        if (!!t) return t.has(i)
      }
      getChildren () {
        let { items: i } = this
        if (!!i) return [...i.values()]
      }
      dispose () {
        this.items.clear(),
          delete this.path,
          delete this._removeWatcher,
          delete this.items,
          Object.freeze(this)
      }
    },
    mA = 'stat',
    fA = 'lstat',
    zp = class {
      constructor (i, t, n, a) {
        ;(this.fsw = a),
          (this.path = i = i.replace(iA, ns)),
          (this.watchPath = t),
          (this.fullWatchPath = H.resolve(t)),
          (this.hasGlob = t !== i),
          i === ns && (this.hasGlob = !1),
          (this.globSymlink = this.hasGlob && n ? void 0 : !1),
          (this.globFilter = this.hasGlob ? Wa(i, void 0, is) : !1),
          (this.dirParts = this.getDirParts(i)),
          this.dirParts.forEach(s => {
            s.length > 1 && s.pop()
          }),
          (this.followSymlinks = n),
          (this.statMethod = n ? mA : fA)
      }
      checkGlobSymlink (i) {
        return (
          this.globSymlink === void 0 &&
            (this.globSymlink =
              i.fullParentDir === this.fullWatchPath
                ? !1
                : { realPath: i.fullParentDir, linkPath: this.fullWatchPath }),
          this.globSymlink
            ? i.fullPath.replace(
                this.globSymlink.realPath,
                this.globSymlink.linkPath
              )
            : i.fullPath
        )
      }
      entryPath (i) {
        return H.join(
          this.watchPath,
          H.relative(this.watchPath, this.checkGlobSymlink(i))
        )
      }
      filterPath (i) {
        let { stats: t } = i
        if (t && t.isSymbolicLink()) return this.filterDir(i)
        let n = this.entryPath(i)
        return (
          (this.hasGlob && typeof this.globFilter === rA
            ? this.globFilter(n)
            : !0) &&
          this.fsw._isntIgnored(n, t) &&
          this.fsw._hasReadPermissions(t)
        )
      }
      getDirParts (i) {
        if (!this.hasGlob) return []
        let t = []
        return (
          (i.includes(nA) ? $g.expand(i) : [i]).forEach(a => {
            t.push(H.relative(this.watchPath, a).split(Zg))
          }),
          t
        )
      }
      filterDir (i) {
        if (this.hasGlob) {
          let t = this.getDirParts(this.checkGlobSymlink(i)),
            n = !1
          this.unmatchedGlob = !this.dirParts.some(a =>
            a.every(
              (s, r) => (
                s === sA && (n = !0), n || !t[0][r] || Wa(s, t[0][r], is)
              )
            )
          )
        }
        return (
          !this.unmatchedGlob &&
          this.fsw._isntIgnored(this.entryPath(i), i.stats)
        )
      }
    },
    ss = class extends Pg {
      constructor (i) {
        super()
        let t = {}
        i && Object.assign(t, i),
          (this._watched = new Map()),
          (this._closers = new Map()),
          (this._ignoredPaths = new Set()),
          (this._throttled = new Map()),
          (this._symlinkPaths = new Map()),
          (this._streams = new Set()),
          (this.closed = !1),
          Be(t, 'persistent') && (t.persistent = !0),
          Be(t, 'ignoreInitial') && (t.ignoreInitial = !1),
          Be(t, 'ignorePermissionErrors') && (t.ignorePermissionErrors = !1),
          Be(t, 'interval') && (t.interval = 100),
          Be(t, 'binaryInterval') && (t.binaryInterval = 300),
          Be(t, 'disableGlobbing') && (t.disableGlobbing = !1),
          (t.enableBinaryInterval = t.binaryInterval !== t.interval),
          Be(t, 'useFsEvents') && (t.useFsEvents = !t.usePolling),
          jp.canUse() || (t.useFsEvents = !1),
          Be(t, 'usePolling') && !t.useFsEvents && (t.usePolling = lA)
        let a = process.env.CHOKIDAR_USEPOLLING
        if (a !== void 0) {
          let c = a.toLowerCase()
          c === 'false' || c === '0'
            ? (t.usePolling = !1)
            : c === 'true' || c === '1'
            ? (t.usePolling = !0)
            : (t.usePolling = !!c)
        }
        let s = process.env.CHOKIDAR_INTERVAL
        s && (t.interval = Number.parseInt(s, 10)),
          Be(t, 'atomic') && (t.atomic = !t.usePolling && !t.useFsEvents),
          t.atomic && (this._pendingUnlinks = new Map()),
          Be(t, 'followSymlinks') && (t.followSymlinks = !0),
          Be(t, 'awaitWriteFinish') && (t.awaitWriteFinish = !1),
          t.awaitWriteFinish === !0 && (t.awaitWriteFinish = {})
        let r = t.awaitWriteFinish
        r &&
          (r.stabilityThreshold || (r.stabilityThreshold = 2e3),
          r.pollInterval || (r.pollInterval = 100),
          (this._pendingWrites = new Map())),
          t.ignored && (t.ignored = as(t.ignored))
        let o = 0
        ;(this._emitReady = () => {
          o++,
            o >= this._readyCount &&
              ((this._emitReady = oA),
              (this._readyEmitted = !0),
              process.nextTick(() => this.emit(zg)))
        }),
          (this._emitRaw = (...c) => this.emit(Jg, ...c)),
          (this._readyEmitted = !1),
          (this.options = t),
          t.useFsEvents
            ? (this._fsEventsHandler = new jp(this))
            : (this._nodeFsHandler = new Ug(this)),
          Object.freeze(t)
      }
      add (i, t, n) {
        let { cwd: a, disableGlobbing: s } = this.options
        this.closed = !1
        let r = Mp(i)
        return (
          a &&
            (r = r.map(o => {
              let c = dA(o, a)
              return s || !Ja(o) ? c : Gg(c)
            })),
          (r = r.filter(o =>
            o.startsWith(Za)
              ? (this._ignoredPaths.add(o.slice(1)), !1)
              : (this._ignoredPaths.delete(o),
                this._ignoredPaths.delete(o + es),
                (this._userIgnored = void 0),
                !0)
          )),
          this.options.useFsEvents && this._fsEventsHandler
            ? (this._readyCount || (this._readyCount = r.length),
              this.options.persistent && (this._readyCount *= 2),
              r.forEach(o => this._fsEventsHandler._addToFsEvents(o)))
            : (this._readyCount || (this._readyCount = 0),
              (this._readyCount += r.length),
              Promise.all(
                r.map(async o => {
                  let c = await this._nodeFsHandler._addToNodeFs(o, !n, 0, 0, t)
                  return c && this._emitReady(), c
                })
              ).then(o => {
                this.closed ||
                  o
                    .filter(c => c)
                    .forEach(c => {
                      this.add(H.dirname(c), H.basename(t || c))
                    })
              })),
          this
        )
      }
      unwatch (i) {
        if (this.closed) return this
        let t = Mp(i),
          { cwd: n } = this.options
        return (
          t.forEach(a => {
            !H.isAbsolute(a) &&
              !this._closers.has(a) &&
              (n && (a = H.join(n, a)), (a = H.resolve(a))),
              this._closePath(a),
              this._ignoredPaths.add(a),
              this._watched.has(a) && this._ignoredPaths.add(a + es),
              (this._userIgnored = void 0)
          }),
          this
        )
      }
      close () {
        if (this.closed) return this._closePromise
        ;(this.closed = !0), this.removeAllListeners()
        let i = []
        return (
          this._closers.forEach(t =>
            t.forEach(n => {
              let a = n()
              a instanceof Promise && i.push(a)
            })
          ),
          this._streams.forEach(t => t.destroy()),
          (this._userIgnored = void 0),
          (this._readyCount = 0),
          (this._readyEmitted = !1),
          this._watched.forEach(t => t.dispose()),
          [
            'closers',
            'watched',
            'streams',
            'symlinkPaths',
            'throttled'
          ].forEach(t => {
            this[`_${t}`].clear()
          }),
          (this._closePromise = i.length
            ? Promise.all(i).then(() => {})
            : Promise.resolve()),
          this._closePromise
        )
      }
      getWatched () {
        let i = {}
        return (
          this._watched.forEach((t, n) => {
            let a = this.options.cwd ? H.relative(this.options.cwd, n) : n
            i[a || qp] = t.getChildren().sort()
          }),
          i
        )
      }
      emitWithAll (i, t) {
        this.emit(...t), i !== Xa && this.emit(Ya, ...t)
      }
      async _emit (i, t, n, a, s) {
        if (this.closed) return
        let r = this.options
        cA && (t = H.normalize(t)), r.cwd && (t = H.relative(r.cwd, t))
        let o = [i, t]
        s !== void 0
          ? o.push(n, a, s)
          : a !== void 0
          ? o.push(n, a)
          : n !== void 0 && o.push(n)
        let c = r.awaitWriteFinish,
          d
        if (c && (d = this._pendingWrites.get(t)))
          return (d.lastChange = new Date()), this
        if (r.atomic) {
          if (i === Tp)
            return (
              this._pendingUnlinks.set(t, o),
              setTimeout(
                () => {
                  this._pendingUnlinks.forEach((l, p) => {
                    this.emit(...l),
                      this.emit(Ya, ...l),
                      this._pendingUnlinks.delete(p)
                  })
                },
                typeof r.atomic == 'number' ? r.atomic : 100
              ),
              this
            )
          i === on &&
            this._pendingUnlinks.has(t) &&
            ((i = o[0] = at), this._pendingUnlinks.delete(t))
        }
        if (c && (i === on || i === at) && this._readyEmitted) {
          let l = (p, u) => {
            p
              ? ((i = o[0] = Xa), (o[1] = p), this.emitWithAll(i, o))
              : u &&
                (o.length > 2 ? (o[2] = u) : o.push(u), this.emitWithAll(i, o))
          }
          return this._awaitWriteFinish(t, c.stabilityThreshold, i, l), this
        }
        if (i === at && !this._throttle(at, t, 50)) return this
        if (
          r.alwaysStat &&
          n === void 0 &&
          (i === on || i === Kg || i === at)
        ) {
          let l = r.cwd ? H.join(r.cwd, t) : t,
            p
          try {
            p = await pA(l)
          } catch (u) {}
          if (!p || this.closed) return
          o.push(p)
        }
        return this.emitWithAll(i, o), this
      }
      _handleError (i) {
        let t = i && i.code
        return (
          i &&
            t !== 'ENOENT' &&
            t !== 'ENOTDIR' &&
            (!this.options.ignorePermissionErrors ||
              (t !== 'EPERM' && t !== 'EACCES')) &&
            this.emit(Xa, i),
          i || this.closed
        )
      }
      _throttle (i, t, n) {
        this._throttled.has(i) || this._throttled.set(i, new Map())
        let a = this._throttled.get(i),
          s = a.get(t)
        if (s) return s.count++, !1
        let r,
          o = () => {
            let d = a.get(t),
              l = d ? d.count : 0
            return (
              a.delete(t),
              clearTimeout(r),
              d && clearTimeout(d.timeoutObject),
              l
            )
          }
        r = setTimeout(o, n)
        let c = { timeoutObject: r, clear: o, count: 0 }
        return a.set(t, c), c
      }
      _incrReadyCount () {
        return this._readyCount++
      }
      _awaitWriteFinish (i, t, n, a) {
        let s,
          r = i
        this.options.cwd &&
          !H.isAbsolute(i) &&
          (r = H.join(this.options.cwd, i))
        let o = new Date(),
          c = d => {
            Ka.stat(r, (l, p) => {
              if (l || !this._pendingWrites.has(i)) {
                l && l.code !== 'ENOENT' && a(l)
                return
              }
              let u = Number(new Date())
              d &&
                p.size !== d.size &&
                (this._pendingWrites.get(i).lastChange = u)
              let m = this._pendingWrites.get(i)
              u - m.lastChange >= t
                ? (this._pendingWrites.delete(i), a(void 0, p))
                : (s = setTimeout(
                    c,
                    this.options.awaitWriteFinish.pollInterval,
                    p
                  ))
            })
          }
        this._pendingWrites.has(i) ||
          (this._pendingWrites.set(i, {
            lastChange: o,
            cancelWait: () => (
              this._pendingWrites.delete(i), clearTimeout(s), n
            )
          }),
          (s = setTimeout(c, this.options.awaitWriteFinish.pollInterval)))
      }
      _getGlobIgnored () {
        return [...this._ignoredPaths.values()]
      }
      _isIgnored (i, t) {
        if (this.options.atomic && eA.test(i)) return !0
        if (!this._userIgnored) {
          let { cwd: n } = this.options,
            a = this.options.ignored,
            s = a && a.map(Gp(n)),
            r = as(s)
              .filter(c => typeof c === ts && !Ja(c))
              .map(c => c + es),
            o = this._getGlobIgnored()
              .map(Gp(n))
              .concat(s, r)
          this._userIgnored = Wa(o, void 0, is)
        }
        return this._userIgnored([i, t])
      }
      _isntIgnored (i, t) {
        return !this._isIgnored(i, t)
      }
      _getWatchHelpers (i, t) {
        let n = t || this.options.disableGlobbing || !Ja(i) ? i : Mg(i),
          a = this.options.followSymlinks
        return new zp(i, n, a, this)
      }
      _getWatchedDir (i) {
        this._boundRemove || (this._boundRemove = this._remove.bind(this))
        let t = H.resolve(i)
        return (
          this._watched.has(t) ||
            this._watched.set(t, new Up(t, this._boundRemove)),
          this._watched.get(t)
        )
      }
      _hasReadPermissions (i) {
        if (this.options.ignorePermissionErrors) return !0
        let n = (i && Number.parseInt(i.mode, 10)) & 511,
          a = Number.parseInt(n.toString(8)[0], 10)
        return Boolean(4 & a)
      }
      _remove (i, t, n) {
        let a = H.join(i, t),
          s = H.resolve(a)
        if (
          ((n = n != null ? n : this._watched.has(a) || this._watched.has(s)),
          !this._throttle('remove', a, 100))
        )
          return
        !n &&
          !this.options.useFsEvents &&
          this._watched.size === 1 &&
          this.add(i, t, !0),
          this._getWatchedDir(a)
            .getChildren()
            .forEach(u => this._remove(a, u))
        let c = this._getWatchedDir(i),
          d = c.has(t)
        c.remove(t)
        let l = a
        if (
          (this.options.cwd && (l = H.relative(this.options.cwd, a)),
          this.options.awaitWriteFinish &&
            this._pendingWrites.has(l) &&
            this._pendingWrites.get(l).cancelWait() === on)
        )
          return
        this._watched.delete(a), this._watched.delete(s)
        let p = n ? Wg : Tp
        d && !this._isIgnored(a) && this._emit(p, a),
          this.options.useFsEvents || this._closePath(a)
      }
      _closePath (i) {
        this._closeFile(i)
        let t = H.dirname(i)
        this._getWatchedDir(t).remove(H.basename(i))
      }
      _closeFile (i) {
        let t = this._closers.get(i)
        !t || (t.forEach(n => n()), this._closers.delete(i))
      }
      _addPathCloser (i, t) {
        if (!t) return
        let n = this._closers.get(i)
        n || ((n = []), this._closers.set(i, n)), n.push(t)
      }
      _readdirp (i, t) {
        if (this.closed) return
        let n = k({ type: Ya, alwaysStat: !0, lstat: !0 }, t),
          a = Hg(i, n)
        return (
          this._streams.add(a),
          a.once(Yg, () => {
            a = void 0
          }),
          a.once(Xg, () => {
            a && (this._streams.delete(a), (a = void 0))
          }),
          a
        )
      }
    }
  za.FSWatcher = ss
  var hA = (e, i) => {
    let t = new ss(i)
    return t.add(e), t
  }
  za.watch = hA
})
var Yp = y((pC, st) => {
  'use strict'
  var xA = process.env.TERM_PROGRAM === 'Hyper',
    vA = process.platform === 'win32',
    Kp = process.platform === 'linux',
    os = {
      ballotDisabled: '\u2612',
      ballotOff: '\u2610',
      ballotOn: '\u2611',
      bullet: '\u2022',
      bulletWhite: '\u25E6',
      fullBlock: '\u2588',
      heart: '\u2764',
      identicalTo: '\u2261',
      line: '\u2500',
      mark: '\u203B',
      middot: '\xB7',
      minus: '\uFF0D',
      multiplication: '\xD7',
      obelus: '\xF7',
      pencilDownRight: '\u270E',
      pencilRight: '\u270F',
      pencilUpRight: '\u2710',
      percent: '%',
      pilcrow2: '\u2761',
      pilcrow: '\xB6',
      plusMinus: '\xB1',
      section: '\xA7',
      starsOff: '\u2606',
      starsOn: '\u2605',
      upDownArrow: '\u2195'
    },
    Wp = Object.assign({}, os, {
      check: '\u221A',
      cross: '\xD7',
      ellipsisLarge: '...',
      ellipsis: '...',
      info: 'i',
      question: '?',
      questionSmall: '?',
      pointer: '>',
      pointerSmall: '\xBB',
      radioOff: '( )',
      radioOn: '(*)',
      warning: '\u203C'
    }),
    Jp = Object.assign({}, os, {
      ballotCross: '\u2718',
      check: '\u2714',
      cross: '\u2716',
      ellipsisLarge: '\u22EF',
      ellipsis: '\u2026',
      info: '\u2139',
      question: '?',
      questionFull: '\uFF1F',
      questionSmall: '\uFE56',
      pointer: Kp ? '\u25B8' : '\u276F',
      pointerSmall: Kp ? '\u2023' : '\u203A',
      radioOff: '\u25EF',
      radioOn: '\u25C9',
      warning: '\u26A0'
    })
  st.exports = vA && !xA ? Wp : Jp
  Reflect.defineProperty(st.exports, 'common', { enumerable: !1, value: os })
  Reflect.defineProperty(st.exports, 'windows', { enumerable: !1, value: Wp })
  Reflect.defineProperty(st.exports, 'other', { enumerable: !1, value: Jp })
})
var yi = y((uC, cs) => {
  'use strict'
  var gA = e => e !== null && typeof e == 'object' && !Array.isArray(e),
    AA = /[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g,
    Xp = () => {
      let e = { enabled: !0, visible: !0, styles: {}, keys: {} }
      'FORCE_COLOR' in process.env &&
        (e.enabled = process.env.FORCE_COLOR !== '0')
      let i = s => {
          let r = (s.open = `[${s.codes[0]}m`),
            o = (s.close = `[${s.codes[1]}m`),
            c = (s.regex = new RegExp(`\\u001b\\[${s.codes[1]}m`, 'g'))
          return (
            (s.wrap = (d, l) => {
              d.includes(o) && (d = d.replace(c, o + r))
              let p = r + d + o
              return l ? p.replace(/\r*\n/g, `${o}$&${r}`) : p
            }),
            s
          )
        },
        t = (s, r, o) => (typeof s == 'function' ? s(r) : s.wrap(r, o)),
        n = (s, r) => {
          if (s === '' || s == null) return ''
          if (e.enabled === !1) return s
          if (e.visible === !1) return ''
          let o = '' + s,
            c = o.includes(`
`),
            d = r.length
          for (
            d > 0 &&
            r.includes('unstyle') &&
            (r = [...new Set(['unstyle', ...r])].reverse());
            d-- > 0;

          )
            o = t(e.styles[r[d]], o, c)
          return o
        },
        a = (s, r, o) => {
          ;(e.styles[s] = i({ name: s, codes: r })),
            (e.keys[o] || (e.keys[o] = [])).push(s),
            Reflect.defineProperty(e, s, {
              configurable: !0,
              enumerable: !0,
              set (d) {
                e.alias(s, d)
              },
              get () {
                let d = l => n(l, d.stack)
                return (
                  Reflect.setPrototypeOf(d, e),
                  (d.stack = this.stack ? this.stack.concat(s) : [s]),
                  d
                )
              }
            })
        }
      return (
        a('reset', [0, 0], 'modifier'),
        a('bold', [1, 22], 'modifier'),
        a('dim', [2, 22], 'modifier'),
        a('italic', [3, 23], 'modifier'),
        a('underline', [4, 24], 'modifier'),
        a('inverse', [7, 27], 'modifier'),
        a('hidden', [8, 28], 'modifier'),
        a('strikethrough', [9, 29], 'modifier'),
        a('black', [30, 39], 'color'),
        a('red', [31, 39], 'color'),
        a('green', [32, 39], 'color'),
        a('yellow', [33, 39], 'color'),
        a('blue', [34, 39], 'color'),
        a('magenta', [35, 39], 'color'),
        a('cyan', [36, 39], 'color'),
        a('white', [37, 39], 'color'),
        a('gray', [90, 39], 'color'),
        a('grey', [90, 39], 'color'),
        a('bgBlack', [40, 49], 'bg'),
        a('bgRed', [41, 49], 'bg'),
        a('bgGreen', [42, 49], 'bg'),
        a('bgYellow', [43, 49], 'bg'),
        a('bgBlue', [44, 49], 'bg'),
        a('bgMagenta', [45, 49], 'bg'),
        a('bgCyan', [46, 49], 'bg'),
        a('bgWhite', [47, 49], 'bg'),
        a('blackBright', [90, 39], 'bright'),
        a('redBright', [91, 39], 'bright'),
        a('greenBright', [92, 39], 'bright'),
        a('yellowBright', [93, 39], 'bright'),
        a('blueBright', [94, 39], 'bright'),
        a('magentaBright', [95, 39], 'bright'),
        a('cyanBright', [96, 39], 'bright'),
        a('whiteBright', [97, 39], 'bright'),
        a('bgBlackBright', [100, 49], 'bgBright'),
        a('bgRedBright', [101, 49], 'bgBright'),
        a('bgGreenBright', [102, 49], 'bgBright'),
        a('bgYellowBright', [103, 49], 'bgBright'),
        a('bgBlueBright', [104, 49], 'bgBright'),
        a('bgMagentaBright', [105, 49], 'bgBright'),
        a('bgCyanBright', [106, 49], 'bgBright'),
        a('bgWhiteBright', [107, 49], 'bgBright'),
        (e.ansiRegex = AA),
        (e.hasColor = e.hasAnsi = s => (
          (e.ansiRegex.lastIndex = 0),
          typeof s == 'string' && s !== '' && e.ansiRegex.test(s)
        )),
        (e.alias = (s, r) => {
          let o = typeof r == 'string' ? e[r] : r
          if (typeof o != 'function')
            throw new TypeError(
              'Expected alias to be the name of an existing color (string) or a function'
            )
          o.stack ||
            (Reflect.defineProperty(o, 'name', { value: s }),
            (e.styles[s] = o),
            (o.stack = [s])),
            Reflect.defineProperty(e, s, {
              configurable: !0,
              enumerable: !0,
              set (c) {
                e.alias(s, c)
              },
              get () {
                let c = d => n(d, c.stack)
                return (
                  Reflect.setPrototypeOf(c, e),
                  (c.stack = this.stack ? this.stack.concat(o.stack) : o.stack),
                  c
                )
              }
            })
        }),
        (e.theme = s => {
          if (!gA(s)) throw new TypeError('Expected theme to be an object')
          for (let r of Object.keys(s)) e.alias(r, s[r])
          return e
        }),
        e.alias('unstyle', s =>
          typeof s == 'string' && s !== ''
            ? ((e.ansiRegex.lastIndex = 0), s.replace(e.ansiRegex, ''))
            : ''
        ),
        e.alias('noop', s => s),
        (e.none = e.clear = e.noop),
        (e.stripColor = e.unstyle),
        (e.symbols = Yp()),
        (e.define = a),
        e
      )
    }
  cs.exports = Xp()
  cs.exports.create = Xp
})
var cn = y((dC, Vp) => {
  var bA = 'presta.config.js',
    yA = 'static',
    EA = 'functions/presta.js'
  Vp.exports = {
    CONFIG_DEFAULT: bA,
    OUTPUT_STATIC_DIR: yA,
    OUTPUT_DYNAMIC_PAGES_ENTRY: EA
  }
})
var ls = y((mC, Zp) => {
  var Ei = 1e3,
    wi = Ei * 60,
    Ci = wi * 60,
    ai = Ci * 24,
    wA = ai * 7,
    CA = ai * 365.25
  Zp.exports = function (e, i) {
    i = i || {}
    var t = typeof e
    if (t === 'string' && e.length > 0) return _A(e)
    if (t === 'number' && isFinite(e)) return i.long ? BA(e) : kA(e)
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(e)
    )
  }
  function _A (e) {
    if (((e = String(e)), !(e.length > 100))) {
      var i = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        e
      )
      if (!!i) {
        var t = parseFloat(i[1]),
          n = (i[2] || 'ms').toLowerCase()
        switch (n) {
          case 'years':
          case 'year':
          case 'yrs':
          case 'yr':
          case 'y':
            return t * CA
          case 'weeks':
          case 'week':
          case 'w':
            return t * wA
          case 'days':
          case 'day':
          case 'd':
            return t * ai
          case 'hours':
          case 'hour':
          case 'hrs':
          case 'hr':
          case 'h':
            return t * Ci
          case 'minutes':
          case 'minute':
          case 'mins':
          case 'min':
          case 'm':
            return t * wi
          case 'seconds':
          case 'second':
          case 'secs':
          case 'sec':
          case 's':
            return t * Ei
          case 'milliseconds':
          case 'millisecond':
          case 'msecs':
          case 'msec':
          case 'ms':
            return t
          default:
            return
        }
      }
    }
  }
  function kA (e) {
    var i = Math.abs(e)
    return i >= ai
      ? Math.round(e / ai) + 'd'
      : i >= Ci
      ? Math.round(e / Ci) + 'h'
      : i >= wi
      ? Math.round(e / wi) + 'm'
      : i >= Ei
      ? Math.round(e / Ei) + 's'
      : e + 'ms'
  }
  function BA (e) {
    var i = Math.abs(e)
    return i >= ai
      ? ln(e, i, ai, 'day')
      : i >= Ci
      ? ln(e, i, Ci, 'hour')
      : i >= wi
      ? ln(e, i, wi, 'minute')
      : i >= Ei
      ? ln(e, i, Ei, 'second')
      : e + ' ms'
  }
  function ln (e, i, t, n) {
    var a = i >= t * 1.5
    return Math.round(e / t) + ' ' + n + (a ? 's' : '')
  }
})
var ps = y((fC, eu) => {
  function SA (e) {
    ;(t.debug = t),
      (t.default = t),
      (t.coerce = d),
      (t.disable = r),
      (t.enable = s),
      (t.enabled = o),
      (t.humanize = ls()),
      Object.keys(e).forEach(l => {
        t[l] = e[l]
      }),
      (t.instances = []),
      (t.names = []),
      (t.skips = []),
      (t.formatters = {})
    function i (l) {
      let p = 0
      for (let u = 0; u < l.length; u++)
        (p = (p << 5) - p + l.charCodeAt(u)), (p |= 0)
      return t.colors[Math.abs(p) % t.colors.length]
    }
    t.selectColor = i
    function t (l) {
      let p
      function u (...m) {
        if (!u.enabled) return
        let f = u,
          h = Number(new Date()),
          x = h - (p || h)
        ;(f.diff = x),
          (f.prev = p),
          (f.curr = h),
          (p = h),
          (m[0] = t.coerce(m[0])),
          typeof m[0] != 'string' && m.unshift('%O')
        let v = 0
        ;(m[0] = m[0].replace(/%([a-zA-Z%])/g, (C, Q) => {
          if (C === '%%') return C
          v++
          let L = t.formatters[Q]
          if (typeof L == 'function') {
            let D = m[v]
            ;(C = L.call(f, D)), m.splice(v, 1), v--
          }
          return C
        })),
          t.formatArgs.call(f, m),
          (f.log || t.log).apply(f, m)
      }
      return (
        (u.namespace = l),
        (u.enabled = t.enabled(l)),
        (u.useColors = t.useColors()),
        (u.color = i(l)),
        (u.destroy = n),
        (u.extend = a),
        typeof t.init == 'function' && t.init(u),
        t.instances.push(u),
        u
      )
    }
    function n () {
      let l = t.instances.indexOf(this)
      return l !== -1 ? (t.instances.splice(l, 1), !0) : !1
    }
    function a (l, p) {
      let u = t(this.namespace + (typeof p == 'undefined' ? ':' : p) + l)
      return (u.log = this.log), u
    }
    function s (l) {
      t.save(l), (t.names = []), (t.skips = [])
      let p,
        u = (typeof l == 'string' ? l : '').split(/[\s,]+/),
        m = u.length
      for (p = 0; p < m; p++)
        !u[p] ||
          ((l = u[p].replace(/\*/g, '.*?')),
          l[0] === '-'
            ? t.skips.push(new RegExp('^' + l.substr(1) + '$'))
            : t.names.push(new RegExp('^' + l + '$')))
      for (p = 0; p < t.instances.length; p++) {
        let f = t.instances[p]
        f.enabled = t.enabled(f.namespace)
      }
    }
    function r () {
      let l = [...t.names.map(c), ...t.skips.map(c).map(p => '-' + p)].join(',')
      return t.enable(''), l
    }
    function o (l) {
      if (l[l.length - 1] === '*') return !0
      let p, u
      for (p = 0, u = t.skips.length; p < u; p++)
        if (t.skips[p].test(l)) return !1
      for (p = 0, u = t.names.length; p < u; p++)
        if (t.names[p].test(l)) return !0
      return !1
    }
    function c (l) {
      return l
        .toString()
        .substring(2, l.toString().length - 2)
        .replace(/\.\*\?$/, '*')
    }
    function d (l) {
      return l instanceof Error ? l.stack || l.message : l
    }
    return t.enable(t.load()), t
  }
  eu.exports = SA
})
var iu = y((we, pn) => {
  we.log = QA
  we.formatArgs = IA
  we.save = RA
  we.load = FA
  we.useColors = OA
  we.storage = LA()
  we.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33'
  ]
  function OA () {
    return typeof window != 'undefined' &&
      window.process &&
      (window.process.type === 'renderer' || window.process.__nwjs)
      ? !0
      : typeof navigator != 'undefined' &&
        navigator.userAgent &&
        navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
      ? !1
      : (typeof document != 'undefined' &&
          document.documentElement &&
          document.documentElement.style &&
          document.documentElement.style.WebkitAppearance) ||
        (typeof window != 'undefined' &&
          window.console &&
          (window.console.firebug ||
            (window.console.exception && window.console.table))) ||
        (typeof navigator != 'undefined' &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
          parseInt(RegExp.$1, 10) >= 31) ||
        (typeof navigator != 'undefined' &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
  }
  function IA (e) {
    if (
      ((e[0] =
        (this.useColors ? '%c' : '') +
        this.namespace +
        (this.useColors ? ' %c' : ' ') +
        e[0] +
        (this.useColors ? '%c ' : ' ') +
        '+' +
        pn.exports.humanize(this.diff)),
      !this.useColors)
    )
      return
    let i = 'color: ' + this.color
    e.splice(1, 0, i, 'color: inherit')
    let t = 0,
      n = 0
    e[0].replace(/%[a-zA-Z%]/g, a => {
      a !== '%%' && (t++, a === '%c' && (n = t))
    }),
      e.splice(n, 0, i)
  }
  function QA (...e) {
    return typeof console == 'object' && console.log && console.log(...e)
  }
  function RA (e) {
    try {
      e ? we.storage.setItem('debug', e) : we.storage.removeItem('debug')
    } catch (i) {}
  }
  function FA () {
    let e
    try {
      e = we.storage.getItem('debug')
    } catch (i) {}
    return (
      !e &&
        typeof process != 'undefined' &&
        'env' in process &&
        (e = process.env.DEBUG),
      e
    )
  }
  function LA () {
    try {
      return localStorage
    } catch (e) {}
  }
  pn.exports = ps()(we)
  var { formatters: NA } = pn.exports
  NA.j = function (e) {
    try {
      return JSON.stringify(e)
    } catch (i) {
      return '[UnexpectedJSONParseError]: ' + i.message
    }
  }
})
var nu = y((hC, tu) => {
  'use strict'
  tu.exports = (e, i) => {
    i = i || process.argv
    let t = e.startsWith('-') ? '' : e.length === 1 ? '-' : '--',
      n = i.indexOf(t + e),
      a = i.indexOf('--')
    return n !== -1 && (a === -1 ? !0 : n < a)
  }
})
var ds = y((xC, au) => {
  'use strict'
  var jA = require('os'),
    Se = nu(),
    se = process.env,
    _i
  Se('no-color') || Se('no-colors') || Se('color=false')
    ? (_i = !1)
    : (Se('color') || Se('colors') || Se('color=true') || Se('color=always')) &&
      (_i = !0)
  'FORCE_COLOR' in se &&
    (_i = se.FORCE_COLOR.length === 0 || parseInt(se.FORCE_COLOR, 10) !== 0)
  function TA (e) {
    return e === 0
      ? !1
      : { level: e, hasBasic: !0, has256: e >= 2, has16m: e >= 3 }
  }
  function DA (e) {
    if (_i === !1) return 0
    if (Se('color=16m') || Se('color=full') || Se('color=truecolor')) return 3
    if (Se('color=256')) return 2
    if (e && !e.isTTY && _i !== !0) return 0
    let i = _i ? 1 : 0
    if (process.platform === 'win32') {
      let t = jA.release().split('.')
      return Number(process.versions.node.split('.')[0]) >= 8 &&
        Number(t[0]) >= 10 &&
        Number(t[2]) >= 10586
        ? Number(t[2]) >= 14931
          ? 3
          : 2
        : 1
    }
    if ('CI' in se)
      return ['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(
        t => t in se
      ) || se.CI_NAME === 'codeship'
        ? 1
        : i
    if ('TEAMCITY_VERSION' in se)
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(se.TEAMCITY_VERSION) ? 1 : 0
    if (se.COLORTERM === 'truecolor') return 3
    if ('TERM_PROGRAM' in se) {
      let t = parseInt((se.TERM_PROGRAM_VERSION || '').split('.')[0], 10)
      switch (se.TERM_PROGRAM) {
        case 'iTerm.app':
          return t >= 3 ? 3 : 2
        case 'Apple_Terminal':
          return 2
      }
    }
    return /-256(color)?$/i.test(se.TERM)
      ? 2
      : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(
          se.TERM
        ) || 'COLORTERM' in se
      ? 1
      : (se.TERM === 'dumb', i)
  }
  function us (e) {
    let i = DA(e)
    return TA(i)
  }
  au.exports = {
    supportsColor: us,
    stdout: us(process.stdout),
    stderr: us(process.stderr)
  }
})
var ru = y((re, un) => {
  var qA = require('tty'),
    ms = require('util')
  re.init = PA
  re.log = HA
  re.formatArgs = MA
  re.save = $A
  re.load = GA
  re.useColors = UA
  re.colors = [6, 2, 3, 4, 5, 1]
  try {
    let e = ds()
    e &&
      (e.stderr || e).level >= 2 &&
      (re.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ])
  } catch (e) {}
  re.inspectOpts = Object.keys(process.env)
    .filter(e => /^debug_/i.test(e))
    .reduce((e, i) => {
      let t = i
          .substring(6)
          .toLowerCase()
          .replace(/_([a-z])/g, (a, s) => s.toUpperCase()),
        n = process.env[i]
      return (
        /^(yes|on|true|enabled)$/i.test(n)
          ? (n = !0)
          : /^(no|off|false|disabled)$/i.test(n)
          ? (n = !1)
          : n === 'null'
          ? (n = null)
          : (n = Number(n)),
        (e[t] = n),
        e
      )
    }, {})
  function UA () {
    return 'colors' in re.inspectOpts
      ? Boolean(re.inspectOpts.colors)
      : qA.isatty(process.stderr.fd)
  }
  function MA (e) {
    let { namespace: i, useColors: t } = this
    if (t) {
      let n = this.color,
        a = '[3' + (n < 8 ? n : '8;5;' + n),
        s = `  ${a};1m${i} [0m`
      ;(e[0] =
        s +
        e[0]
          .split(
            `
`
          )
          .join(
            `
` + s
          )),
        e.push(a + 'm+' + un.exports.humanize(this.diff) + '[0m')
    } else e[0] = zA() + i + ' ' + e[0]
  }
  function zA () {
    return re.inspectOpts.hideDate ? '' : new Date().toISOString() + ' '
  }
  function HA (...e) {
    return process.stderr.write(
      ms.format(...e) +
        `
`
    )
  }
  function $A (e) {
    e ? (process.env.DEBUG = e) : delete process.env.DEBUG
  }
  function GA () {
    return process.env.DEBUG
  }
  function PA (e) {
    e.inspectOpts = {}
    let i = Object.keys(re.inspectOpts)
    for (let t = 0; t < i.length; t++)
      e.inspectOpts[i[t]] = re.inspectOpts[i[t]]
  }
  un.exports = ps()(re)
  var { formatters: su } = un.exports
  su.o = function (e) {
    return (
      (this.inspectOpts.colors = this.useColors),
      ms.inspect(e, this.inspectOpts).replace(/\s*\n\s*/g, ' ')
    )
  }
  su.O = function (e) {
    return (
      (this.inspectOpts.colors = this.useColors),
      ms.inspect(e, this.inspectOpts)
    )
  }
})
var ou = y((vC, fs) => {
  typeof process == 'undefined' ||
  process.type === 'renderer' ||
  process.browser === !0 ||
  process.__nwjs
    ? (fs.exports = iu())
    : (fs.exports = ru())
})
var ki = y((gC, cu) => {
  var KA = ou(),
    WA = KA('presta')
  cu.exports = { debug: WA }
})
var dn = y((AC, lu) => {
  var pu = yi(),
    { NODE_ENV: hs } = process.env,
    uu = ''
  function JA () {
    if (!hs === 'test')
      throw new Error('Internal method was called outside test mode')
    return uu
  }
  function YA (e) {
    hs === 'test' ? (uu += e) : console.log(e)
  }
  function XA ({ action: e, meta: i, description: t, color: n = 'blue' }) {
    if (hs !== 'test') {
      let a = `  ${pu[n](e)} ${pu.gray(i)}`
      console.log(a.padEnd(40) + t)
    }
  }
  lu.exports = { getLogs: JA, log: YA, formatLog: XA }
})
var mu = y((bC, du) => {
  function VA () {
    let e = {}
    function i (s, ...r) {
      return e[s] ? e[s].map(o => o(...r)) : []
    }
    function t (s, r) {
      return (
        (e[s] = e[s] ? e[s].concat(r) : [r]),
        () => e[s].splice(e[s].indexOf(r), 1)
      )
    }
    function n () {
      e = {}
    }
    function a (s) {
      return e[s] || []
    }
    return { emit: i, on: t, clear: n, listeners: a }
  }
  du.exports = { createEmitter: VA }
})
var fn = y((yC, fu) => {
  var ze = require('path'),
    ZA = yi(),
    { CONFIG_DEFAULT: hu, OUTPUT_DYNAMIC_PAGES_ENTRY: eb } = cn(),
    { debug: ib } = ki(),
    { log: tb } = dn(),
    { createEmitter: nb } = mu(),
    mn = process.cwd()
  global.__presta__ = global.__presta__ || {
    cliArgs: {},
    configFile: {},
    pid: process.pid
  }
  function xs (e) {
    return (
      e.files && (e.files = [].concat(e.files).map(i => ze.resolve(mn, i))),
      e.output && (e.output = ze.resolve(mn, e.output)),
      e.assets && (e.assets = ze.resolve(mn, e.assets)),
      e
    )
  }
  function ab (e, i) {
    try {
      return require(ze.resolve(e || hu))
    } catch (t) {
      return (
        e &&
          (tb(`${ZA.red('~ error')} ${e}

  > ${t.stack || t}
`),
          i && process.exit(1)),
        {}
      )
    }
  }
  function xu ({
    env: e = global.__presta__.env,
    configFile: i = global.__presta__.configFile,
    cliArgs: t = global.__presta__.cliArgs
  }) {
    ;(i = xs(k({}, i))), (t = xs(t))
    let n = {
      output: t.output || i.output || ze.resolve('build'),
      assets: t.assets || i.assets || ze.resolve('public'),
      files:
        t.files && t.files.length ? t.files : i.files ? [].concat(i.files) : []
    }
    return (
      (global.__presta__ = k(k({}, global.__presta__), {
        env: e,
        cwd: mn,
        configFile: i,
        cliArgs: t,
        merged: n,
        configFilepath: ze.resolve(t.config || hu),
        dynamicEntryFilepath: ze.join(n.output, eb),
        emitter: nb()
      })),
      ib('config created', global.__presta__),
      global.__presta__
    )
  }
  function sb () {
    return (
      (global.__presta__ = xu(k(k({}, global.__presta__), { configFile: {} }))),
      global.__presta__
    )
  }
  function rb (e) {
    return JSON.stringify({
      cwd: e.cwd,
      files: e.merged.files,
      output: e.merged.output,
      assets: e.merged.assets
    })
  }
  function ob () {
    return global.__presta__
  }
  function cb () {
    global.__presta__ = { cliArgs: {}, configFile: {} }
  }
  fu.exports = {
    getCurrentConfig: ob,
    clearCurrentConfig: cb,
    resolvePaths: xs,
    getConfigFile: ab,
    createConfig: xu,
    removeConfigValues: sb,
    serialize: rb
  }
})
var vs = y((EC, vu) => {
  function lb (e) {
    ;(t.debug = t),
      (t.default = t),
      (t.coerce = c),
      (t.disable = s),
      (t.enable = a),
      (t.enabled = r),
      (t.humanize = ls()),
      (t.destroy = d),
      Object.keys(e).forEach(l => {
        t[l] = e[l]
      }),
      (t.names = []),
      (t.skips = []),
      (t.formatters = {})
    function i (l) {
      let p = 0
      for (let u = 0; u < l.length; u++)
        (p = (p << 5) - p + l.charCodeAt(u)), (p |= 0)
      return t.colors[Math.abs(p) % t.colors.length]
    }
    t.selectColor = i
    function t (l) {
      let p,
        u = null
      function m (...f) {
        if (!m.enabled) return
        let h = m,
          x = Number(new Date()),
          v = x - (p || x)
        ;(h.diff = v),
          (h.prev = p),
          (h.curr = x),
          (p = x),
          (f[0] = t.coerce(f[0])),
          typeof f[0] != 'string' && f.unshift('%O')
        let w = 0
        ;(f[0] = f[0].replace(/%([a-zA-Z%])/g, (Q, L) => {
          if (Q === '%%') return '%'
          w++
          let D = t.formatters[L]
          if (typeof D == 'function') {
            let E = f[w]
            ;(Q = D.call(h, E)), f.splice(w, 1), w--
          }
          return Q
        })),
          t.formatArgs.call(h, f),
          (h.log || t.log).apply(h, f)
      }
      return (
        (m.namespace = l),
        (m.useColors = t.useColors()),
        (m.color = t.selectColor(l)),
        (m.extend = n),
        (m.destroy = t.destroy),
        Object.defineProperty(m, 'enabled', {
          enumerable: !0,
          configurable: !1,
          get: () => (u === null ? t.enabled(l) : u),
          set: f => {
            u = f
          }
        }),
        typeof t.init == 'function' && t.init(m),
        m
      )
    }
    function n (l, p) {
      let u = t(this.namespace + (typeof p == 'undefined' ? ':' : p) + l)
      return (u.log = this.log), u
    }
    function a (l) {
      t.save(l), (t.names = []), (t.skips = [])
      let p,
        u = (typeof l == 'string' ? l : '').split(/[\s,]+/),
        m = u.length
      for (p = 0; p < m; p++)
        !u[p] ||
          ((l = u[p].replace(/\*/g, '.*?')),
          l[0] === '-'
            ? t.skips.push(new RegExp('^' + l.substr(1) + '$'))
            : t.names.push(new RegExp('^' + l + '$')))
    }
    function s () {
      let l = [...t.names.map(o), ...t.skips.map(o).map(p => '-' + p)].join(',')
      return t.enable(''), l
    }
    function r (l) {
      if (l[l.length - 1] === '*') return !0
      let p, u
      for (p = 0, u = t.skips.length; p < u; p++)
        if (t.skips[p].test(l)) return !1
      for (p = 0, u = t.names.length; p < u; p++)
        if (t.names[p].test(l)) return !0
      return !1
    }
    function o (l) {
      return l
        .toString()
        .substring(2, l.toString().length - 2)
        .replace(/\.\*\?$/, '*')
    }
    function c (l) {
      return l instanceof Error ? l.stack || l.message : l
    }
    function d () {
      console.warn(
        'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
      )
    }
    return t.enable(t.load()), t
  }
  vu.exports = lb
})
var gu = y((Ae, hn) => {
  Ae.formatArgs = pb
  Ae.save = ub
  Ae.load = db
  Ae.useColors = mb
  Ae.storage = fb()
  Ae.destroy = (() => {
    let e = !1
    return () => {
      e ||
        ((e = !0),
        console.warn(
          'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
        ))
    }
  })()
  Ae.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33'
  ]
  function mb () {
    return typeof window != 'undefined' &&
      window.process &&
      (window.process.type === 'renderer' || window.process.__nwjs)
      ? !0
      : typeof navigator != 'undefined' &&
        navigator.userAgent &&
        navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
      ? !1
      : (typeof document != 'undefined' &&
          document.documentElement &&
          document.documentElement.style &&
          document.documentElement.style.WebkitAppearance) ||
        (typeof window != 'undefined' &&
          window.console &&
          (window.console.firebug ||
            (window.console.exception && window.console.table))) ||
        (typeof navigator != 'undefined' &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
          parseInt(RegExp.$1, 10) >= 31) ||
        (typeof navigator != 'undefined' &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
  }
  function pb (e) {
    if (
      ((e[0] =
        (this.useColors ? '%c' : '') +
        this.namespace +
        (this.useColors ? ' %c' : ' ') +
        e[0] +
        (this.useColors ? '%c ' : ' ') +
        '+' +
        hn.exports.humanize(this.diff)),
      !this.useColors)
    )
      return
    let i = 'color: ' + this.color
    e.splice(1, 0, i, 'color: inherit')
    let t = 0,
      n = 0
    e[0].replace(/%[a-zA-Z%]/g, a => {
      a !== '%%' && (t++, a === '%c' && (n = t))
    }),
      e.splice(n, 0, i)
  }
  Ae.log = console.debug || console.log || (() => {})
  function ub (e) {
    try {
      e ? Ae.storage.setItem('debug', e) : Ae.storage.removeItem('debug')
    } catch (i) {}
  }
  function db () {
    let e
    try {
      e = Ae.storage.getItem('debug')
    } catch (i) {}
    return (
      !e &&
        typeof process != 'undefined' &&
        'env' in process &&
        (e = process.env.DEBUG),
      e
    )
  }
  function fb () {
    try {
      return localStorage
    } catch (e) {}
  }
  hn.exports = vs()(Ae)
  var { formatters: hb } = hn.exports
  hb.j = function (e) {
    try {
      return JSON.stringify(e)
    } catch (i) {
      return '[UnexpectedJSONParseError]: ' + i.message
    }
  }
})
var bu = y((te, xn) => {
  var xb = require('tty'),
    vn = require('util')
  te.init = vb
  te.log = gb
  te.formatArgs = Ab
  te.save = bb
  te.load = yb
  te.useColors = Eb
  te.destroy = vn.deprecate(() => {},
  'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.')
  te.colors = [6, 2, 3, 4, 5, 1]
  try {
    let e = ds()
    e &&
      (e.stderr || e).level >= 2 &&
      (te.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ])
  } catch (e) {}
  te.inspectOpts = Object.keys(process.env)
    .filter(e => /^debug_/i.test(e))
    .reduce((e, i) => {
      let t = i
          .substring(6)
          .toLowerCase()
          .replace(/_([a-z])/g, (a, s) => s.toUpperCase()),
        n = process.env[i]
      return (
        /^(yes|on|true|enabled)$/i.test(n)
          ? (n = !0)
          : /^(no|off|false|disabled)$/i.test(n)
          ? (n = !1)
          : n === 'null'
          ? (n = null)
          : (n = Number(n)),
        (e[t] = n),
        e
      )
    }, {})
  function Eb () {
    return 'colors' in te.inspectOpts
      ? Boolean(te.inspectOpts.colors)
      : xb.isatty(process.stderr.fd)
  }
  function Ab (e) {
    let { namespace: i, useColors: t } = this
    if (t) {
      let n = this.color,
        a = '[3' + (n < 8 ? n : '8;5;' + n),
        s = `  ${a};1m${i} [0m`
      ;(e[0] =
        s +
        e[0]
          .split(
            `
`
          )
          .join(
            `
` + s
          )),
        e.push(a + 'm+' + xn.exports.humanize(this.diff) + '[0m')
    } else e[0] = wb() + i + ' ' + e[0]
  }
  function wb () {
    return te.inspectOpts.hideDate ? '' : new Date().toISOString() + ' '
  }
  function gb (...e) {
    return process.stderr.write(
      vn.format(...e) +
        `
`
    )
  }
  function bb (e) {
    e ? (process.env.DEBUG = e) : delete process.env.DEBUG
  }
  function yb () {
    return process.env.DEBUG
  }
  function vb (e) {
    e.inspectOpts = {}
    let i = Object.keys(te.inspectOpts)
    for (let t = 0; t < i.length; t++)
      e.inspectOpts[i[t]] = te.inspectOpts[i[t]]
  }
  xn.exports = vs()(te)
  var { formatters: Au } = xn.exports
  Au.o = function (e) {
    return (
      (this.inspectOpts.colors = this.useColors),
      vn
        .inspect(e, this.inspectOpts)
        .split(
          `
`
        )
        .map(i => i.trim())
        .join(' ')
    )
  }
  Au.O = function (e) {
    return (
      (this.inspectOpts.colors = this.useColors),
      vn.inspect(e, this.inspectOpts)
    )
  }
})
var yu = y((wC, gs) => {
  typeof process == 'undefined' ||
  process.type === 'renderer' ||
  process.browser === !0 ||
  process.__nwjs
    ? (gs.exports = gu())
    : (gs.exports = bu())
})
var wu = y((CC, Eu) => {
  function As (e, i, t) {
    var n, a, s, r, o
    i == null && (i = 100)
    function c () {
      var l = Date.now() - r
      l < i && l >= 0
        ? (n = setTimeout(c, i - l))
        : ((n = null), t || ((o = e.apply(s, a)), (s = a = null)))
    }
    var d = function () {
      ;(s = this), (a = arguments), (r = Date.now())
      var l = t && !n
      return (
        n || (n = setTimeout(c, i)),
        l && ((o = e.apply(s, a)), (s = a = null)),
        o
      )
    }
    return (
      (d.clear = function () {
        n && (clearTimeout(n), (n = null))
      }),
      (d.flush = function () {
        n && ((o = e.apply(s, a)), (s = a = null), clearTimeout(n), (n = null))
      }),
      d
    )
  }
  As.debounce = As
  Eu.exports = As
})
var ku = y((_C, Cu) => {
  var rt = require('fs'),
    Cb = require('util'),
    _b = wu(),
    kb = require('events'),
    Bb = kb.EventEmitter,
    _u = !1
  Cu.exports = function (e) {
    return new si(e)
  }
  function si (e) {
    e || (e = {}),
      e.debounce === void 0 && (e.debounce = 10),
      e.persistent === void 0 && (e.persistent = !0),
      e.interval || (e.interval = 1e3),
      (this.polling = e.forcePolling),
      (this.opts = e),
      (this.watchers = {})
  }
  Cb.inherits(si, Bb)
  si.prototype.add = function (e) {
    var i = this
    ;(_u && !this.polling) ||
      this.watchers[e] ||
      rt.stat(e, function (t, n) {
        if (t) return
        var a = n.mtime
        function s () {
          rt.stat(e, function (o, c) {
            !i.watchers[e] ||
              (i.polling || (i.remove(e), r(!0)),
              c
                ? (c.isDirectory() || c.mtime > a) &&
                  ((a = c.mtime), i.emit('change', e, c))
                : i.emit('change', e, { deleted: !0 }))
          })
        }
        function r (o) {
          if (i.polling) {
            ;(i.watchers[e] = {
              close: function () {
                rt.unwatchFile(e)
              }
            }),
              rt.watchFile(e, i.opts, s)
            return
          }
          try {
            i.watchers[e] = rt.watch(e, i.opts, _b(s, i.opts.debounce))
          } catch (d) {
            if (d.code == 'EMFILE') {
              if (i.opts.fallback !== !1) {
                var c = i.poll()
                r(), i.emit('fallback', c)
                return
              }
              _u = !0
            }
            o || i.emit('error', d)
          }
        }
        r()
      })
  }
  si.prototype.poll = function () {
    if (this.polling) return 0
    this.polling = !0
    var e = Object.keys(this.watchers)
    return this.removeAll(), e.forEach(this.add, this), e.length
  }
  si.prototype.list = function () {
    return Object.keys(this.watchers)
  }
  si.prototype.remove = function (e) {
    var i = this.watchers[e]
    !i || (delete this.watchers[e], i.close())
  }
  si.prototype.removeAll = function () {
    this.list().forEach(this.remove, this)
  }
})
var Qu = y(gn => {
  'use strict'
  gn.parse = Bu
  gn.init = void 0
  var Sb = new Uint8Array(new Uint16Array([1]).buffer)[0] === 1
  function Bu (e, i = '@') {
    if (!U) return Su.then(() => Bu(e))
    let t = e.length + 1,
      n =
        (U.__heap_base.value || U.__heap_base) +
        4 * t -
        U.memory.buffer.byteLength
    n > 0 && U.memory.grow(Math.ceil(n / 65536))
    let a = U.sa(t - 1)
    if (((Sb ? Ib : Qb)(e, new Uint16Array(U.memory.buffer, a, t)), !U.parse()))
      throw Object.assign(
        new Error(
          `Parse error ${i}:${
            e.slice(0, U.e()).split(`
`).length
          }:${U.e() -
            e.lastIndexOf(
              `
`,
              U.e() - 1
            )}`
        ),
        { idx: U.e() }
      )
    let s = [],
      r = []
    for (; U.ri(); ) {
      let c = U.is(),
        d = U.ie(),
        l
      U.ip() && (l = o(e.slice(c - 1, d + 1))),
        s.push({ n: l, s: c, e: d, ss: U.ss(), se: U.se(), d: U.id() })
    }
    for (; U.re(); ) r.push(e.slice(U.es(), U.ee()))
    function o (c) {
      try {
        return (0, eval)(c)
      } catch {}
    }
    return [s, r, !!U.f()]
  }
  function Qb (e, i) {
    let t = e.length,
      n = 0
    for (; n < t; ) {
      let a = e.charCodeAt(n)
      i[n++] = ((255 & a) << 8) | (a >>> 8)
    }
  }
  function Ib (e, i) {
    let t = e.length,
      n = 0
    for (; n < t; ) i[n] = e.charCodeAt(n++)
  }
  var U,
    Su = WebAssembly.compile(
      ((bs =
        'AGFzbQEAAAABWAxgAX8Bf2AEf39/fwBgAn9/AGAAAX9gAABgBn9/f39/fwF/YAR/f39/AX9gA39/fwF/YAd/f39/f39/AX9gBX9/f39/AX9gAn9/AX9gCH9/f39/f39/AX8DMC8AAQIDAwMDAwMDAwMDAwMABAQABQQEAAAAAAQEBAQEAAUGBwgJCgsDAgAACgMICwQFAXABAQEFAwEAAQYPAn8BQfDwAAt/AEHw8AALB18QBm1lbW9yeQIAAnNhAAABZQADAmlzAAQCaWUABQJzcwAGAnNlAAcCaWQACAJpcAAJAmVzAAoCZWUACwJyaQAMAnJlAA0BZgAOBXBhcnNlAA8LX19oZWFwX2Jhc2UDAQrbNC9oAQF/QQAgADYCtAhBACgCkAgiASAAQQF0aiIAQQA7AQBBACAAQQJqIgA2ArgIQQAgADYCvAhBAEEANgKUCEEAQQA2AqQIQQBBADYCnAhBAEEANgKYCEEAQQA2AqwIQQBBADYCoAggAQurAQECf0EAKAKkCCIEQRhqQZQIIAQbQQAoArwIIgU2AgBBACAFNgKkCEEAIAQ2AqgIQQAgBUEcajYCvAggBSAANgIIAkACQEEAKAKICCADRw0AIAUgAjYCDAwBCwJAQQAoAoQIIANHDQAgBSACQQJqNgIMDAELIAVBACgCkAg2AgwLIAUgATYCACAFIAM2AhAgBSACNgIEIAVBADYCGCAFQQAoAoQIIANGOgAUC0gBAX9BACgCrAgiAkEIakGYCCACG0EAKAK8CCICNgIAQQAgAjYCrAhBACACQQxqNgK8CCACQQA2AgggAiABNgIEIAIgADYCAAsIAEEAKALACAsVAEEAKAKcCCgCAEEAKAKQCGtBAXULFQBBACgCnAgoAgRBACgCkAhrQQF1CxUAQQAoApwIKAIIQQAoApAIa0EBdQsVAEEAKAKcCCgCDEEAKAKQCGtBAXULOwEBfwJAQQAoApwIKAIQIgBBACgChAhHDQBBfw8LAkAgAEEAKAKICEcNAEF+DwsgAEEAKAKQCGtBAXULCwBBACgCnAgtABQLFQBBACgCoAgoAgBBACgCkAhrQQF1CxUAQQAoAqAIKAIEQQAoApAIa0EBdQslAQF/QQBBACgCnAgiAEEYakGUCCAAGygCACIANgKcCCAAQQBHCyUBAX9BAEEAKAKgCCIAQQhqQZgIIAAbKAIAIgA2AqAIIABBAEcLCABBAC0AxAgLhQwBBX8jAEGA8ABrIgEkAEEAQQE6AMQIQQBB//8DOwHKCEEAQQAoAowINgLMCEEAQQAoApAIQX5qIgI2AuAIQQAgAkEAKAK0CEEBdGoiAzYC5AhBAEEAOwHGCEEAQQA7AcgIQQBBADoA0AhBAEEANgLACEEAQQA6ALAIQQAgAUGA0ABqNgLUCEEAIAFBgBBqNgLYCEEAQQA6ANwIAkACQAJAA0BBACACQQJqIgQ2AuAIAkACQAJAAkAgAiADTw0AIAQvAQAiA0F3akEFSQ0DIANBm39qIgVBBE0NASADQSBGDQMCQCADQS9GDQAgA0E7Rg0DDAYLAkAgAi8BBCIEQSpGDQAgBEEvRw0GEBAMBAsQEQwDC0EAIQMgBCECQQAtALAIDQYMBQsCQAJAIAUOBQEFBQUAAQsgBBASRQ0BIAJBBGpB7QBB8ABB7wBB8gBB9AAQE0UNARAUDAELQQAvAcgIDQAgBBASRQ0AIAJBBGpB+ABB8ABB7wBB8gBB9AAQE0UNABAVQQAtAMQIDQBBAEEAKALgCCICNgLMCAwEC0EAQQAoAuAINgLMCAtBACgC5AghA0EAKALgCCECDAALC0EAIAI2AuAIQQBBADoAxAgLA0BBACACQQJqIgM2AuAIAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAJBACgC5AhPDQAgAy8BACIEQXdqQQVJDQ4gBEFgaiIFQQlNDQEgBEGgf2oiBUEJTQ0CAkACQAJAIARBhX9qIgNBAk0NACAEQS9HDRAgAi8BBCICQSpGDQEgAkEvRw0CEBAMEQsCQAJAIAMOAwARAQALAkBBACgCzAgiBC8BAEEpRw0AQQAoAqQIIgJFDQAgAigCBCAERw0AQQBBACgCqAgiAjYCpAgCQCACRQ0AIAJBADYCGAwBC0EAQQA2ApQICyABQQAvAcgIIgJqQQAtANwIOgAAQQAgAkEBajsByAhBACgC2AggAkECdGogBDYCAEEAQQA6ANwIDBALQQAvAcgIIgJFDQlBACACQX9qIgM7AcgIAkAgAkEALwHKCCIERw0AQQBBAC8BxghBf2oiAjsBxghBAEEAKALUCCACQf//A3FBAXRqLwEAOwHKCAwICyAEQf//A0YNDyADQf//A3EgBEkNCQwPCxARDA8LAkACQAJAAkBBACgCzAgiBC8BACICEBZFDQAgAkFVaiIDQQNLDQICQAJAAkAgAw4EAQUCAAELIARBfmovAQBBUGpB//8DcUEKSQ0DDAQLIARBfmovAQBBK0YNAgwDCyAEQX5qLwEAQS1GDQEMAgsCQCACQf0ARg0AIAJBKUcNAUEAKALYCEEALwHICEECdGooAgAQF0UNAQwCC0EAKALYCEEALwHICCIDQQJ0aigCABAYDQEgASADai0AAA0BCyAEEBkNACACRQ0AQQEhBCACQS9GQQAtANAIQQBHcUUNAQsQGkEAIQQLQQAgBDoA0AgMDQtBAC8ByghB//8DRkEALwHICEVxQQAtALAIRXEhAwwPCyAFDgoMCwELCwsLAgcEDAsgBQ4KAgoKBwoJCgoKCAILEBsMCQsQHAwICxAdDAcLQQAvAcgIIgINAQsQHkEAIQMMCAtBACACQX9qIgQ7AcgIQQAoAqQIIgJFDQQgAigCEEEAKALYCCAEQf//A3FBAnRqKAIARw0EIAIgAzYCBAwEC0EAQQAvAcgIIgJBAWo7AcgIQQAoAtgIIAJBAnRqQQAoAswINgIADAMLIAMQEkUNAiACLwEKQfMARw0CIAIvAQhB8wBHDQIgAi8BBkHhAEcNAiACLwEEQewARw0CAkACQCACLwEMIgRBd2oiAkEXSw0AQQEgAnRBn4CABHENAQsgBEGgAUcNAwtBAEEBOgDcCAwCCyADEBJFDQEgAkEEakHtAEHwAEHvAEHyAEH0ABATRQ0BEBQMAQtBAC8ByAgNACADEBJFDQAgAkEEakH4AEHwAEHvAEHyAEH0ABATRQ0AEBULQQBBACgC4Ag2AswIC0EAKALgCCECDAALCyABQYDwAGokACADC1ABBH9BACgC4AhBAmohAEEAKALkCCEBAkADQCAAIgJBfmogAU8NASACQQJqIQAgAi8BAEF2aiIDQQNLDQAgAw4EAQAAAQELC0EAIAI2AuAIC3cBAn9BAEEAKALgCCIAQQJqNgLgCCAAQQZqIQBBACgC5AghAQNAAkACQAJAIABBfGogAU8NACAAQX5qLwEAQSpHDQIgAC8BAEEvRw0CQQAgAEF+ajYC4AgMAQsgAEF+aiEAC0EAIAA2AuAIDwsgAEECaiEADAALCx0AAkBBACgCkAggAEcNAEEBDwsgAEF+ai8BABAfCz8BAX9BACEGAkAgAC8BCCAFRw0AIAAvAQYgBEcNACAALwEEIANHDQAgAC8BAiACRw0AIAAvAQAgAUYhBgsgBgv3AwEEf0EAQQAoAuAIIgBBDGoiATYC4AgCQAJAAkACQAJAECciAkFZaiIDQQdNDQAgAkEiRg0CIAJB+wBGDQIMAQsCQAJAIAMOCAMBAgMCAgIAAwtBAEEAKALgCEECajYC4AgQJ0HtAEcNA0EAKALgCCIDLwEGQeEARw0DIAMvAQRB9ABHDQMgAy8BAkHlAEcNA0EAKALMCC8BAEEuRg0DIAAgACADQQhqQQAoAogIEAEPC0EAKALYCEEALwHICCIDQQJ0aiAANgIAQQAgA0EBajsByAhBACgCzAgvAQBBLkYNAiAAQQAoAuAIQQJqQQAgABABQQBBACgC4AhBAmo2AuAIAkACQBAnIgNBIkYNAAJAIANBJ0cNABAcDAILQQBBACgC4AhBfmo2AuAIDwsQGwtBAEEAKALgCEECajYC4AgCQBAnQSlHDQBBACgCpAgiA0EBOgAUIANBACgC4Ag2AgRBAEEALwHICEF/ajsByAgPC0EAQQAoAuAIQX5qNgLgCA8LQQAoAuAIIAFGDQELQQAvAcgIDQFBACgC4AghA0EAKALkCCEBAkADQCADIAFPDQECQAJAIAMvAQAiAkEnRg0AIAJBIkcNAQsgACACECgPC0EAIANBAmoiAzYC4AgMAAsLEB4LDwtBAEEAKALgCEF+ajYC4AgLmAYBBH9BAEEAKALgCCIAQQxqIgE2AuAIECchAgJAAkACQAJAAkACQEEAKALgCCIDIAFHDQAgAhApRQ0BCwJAAkACQAJAIAJBn39qIgFBC00NAAJAAkAgAkEqRg0AIAJB9gBGDQUgAkH7AEcNA0EAIANBAmo2AuAIECchA0EAKALgCCEBA0AgA0H//wNxECoaQQAoAuAIIQIQJxoCQCABIAIQKyIDQSxHDQBBAEEAKALgCEECajYC4AgQJyEDC0EAKALgCCECAkAgA0H9AEYNACACIAFGDQwgAiEBIAJBACgC5AhNDQEMDAsLQQAgAkECajYC4AgMAQtBACADQQJqNgLgCBAnGkEAKALgCCICIAIQKxoLECchAgwBCyABDgwEAAEGAAUAAAAAAAIEC0EAKALgCCEDAkAgAkHmAEcNACADLwEGQe0ARw0AIAMvAQRB7wBHDQAgAy8BAkHyAEcNAEEAIANBCGo2AuAIIAAQJxAoDwtBACADQX5qNgLgCAwCCwJAIAMvAQhB8wBHDQAgAy8BBkHzAEcNACADLwEEQeEARw0AIAMvAQJB7ABHDQAgAy8BChAfRQ0AQQAgA0EKajYC4AgQJyECQQAoAuAIIQMgAhAqGiADQQAoAuAIEAJBAEEAKALgCEF+ajYC4AgPC0EAIANBBGoiAzYC4AgLQQAgA0EEaiICNgLgCEEAQQA6AMQIA0BBACACQQJqNgLgCBAnIQNBACgC4AghAgJAIAMQKkEgckH7AEcNAEEAQQAoAuAIQX5qNgLgCA8LQQAoAuAIIgMgAkYNASACIAMQAgJAECciAkEsRg0AAkAgAkE9Rw0AQQBBACgC4AhBfmo2AuAIDwtBAEEAKALgCEF+ajYC4AgPC0EAKALgCCECDAALCw8LQQAgA0EKajYC4AgQJxpBACgC4AghAwtBACADQRBqNgLgCAJAECciAkEqRw0AQQBBACgC4AhBAmo2AuAIECchAgtBACgC4AghAyACECoaIANBACgC4AgQAkEAQQAoAuAIQX5qNgLgCA8LIAMgA0EOahACDwsQHgt1AQF/AkACQCAAQV9qIgFBBUsNAEEBIAF0QTFxDQELIABBRmpB//8DcUEGSQ0AIABBWGpB//8DcUEHSSAAQSlHcQ0AAkAgAEGlf2oiAUEDSw0AIAEOBAEAAAEBCyAAQf0ARyAAQYV/akH//wNxQQRJcQ8LQQELPQEBf0EBIQECQCAAQfcAQegAQekAQewAQeUAECANACAAQeYAQe8AQfIAECENACAAQekAQeYAECIhAQsgAQutAQEDf0EBIQECQAJAAkACQAJAAkACQCAALwEAIgJBRWoiA0EDTQ0AIAJBm39qIgNBA00NASACQSlGDQMgAkH5AEcNAiAAQX5qQeYAQekAQe4AQeEAQewAQewAECMPCyADDgQCAQEFAgsgAw4EAgAAAwILQQAhAQsgAQ8LIABBfmpB5QBB7ABB8wAQIQ8LIABBfmpB4wBB4QBB9ABB4wAQJA8LIABBfmovAQBBPUYL7QMBAn9BACEBAkAgAC8BAEGcf2oiAkETSw0AAkACQAJAAkACQAJAAkACQCACDhQAAQIICAgICAgIAwQICAUIBggIBwALIABBfmovAQBBl39qIgJBA0sNBwJAAkAgAg4EAAkJAQALIABBfGpB9gBB7wAQIg8LIABBfGpB+QBB6QBB5QAQIQ8LIABBfmovAQBBjX9qIgJBAUsNBgJAAkAgAg4CAAEACwJAIABBfGovAQAiAkHhAEYNACACQewARw0IIABBempB5QAQJQ8LIABBempB4wAQJQ8LIABBfGpB5ABB5QBB7ABB5QAQJA8LIABBfmovAQBB7wBHDQUgAEF8ai8BAEHlAEcNBQJAIABBemovAQAiAkHwAEYNACACQeMARw0GIABBeGpB6QBB7gBB8wBB9ABB4QBB7gAQIw8LIABBeGpB9ABB+QAQIg8LQQEhASAAQX5qIgBB6QAQJQ0EIABB8gBB5QBB9ABB9QBB8gAQIA8LIABBfmpB5AAQJQ8LIABBfmpB5ABB5QBB4gBB9QBB5wBB5wBB5QAQJg8LIABBfmpB4QBB9wBB4QBB6QAQJA8LAkAgAEF+ai8BACICQe8ARg0AIAJB5QBHDQEgAEF8akHuABAlDwsgAEF8akH0AEHoAEHyABAhIQELIAELgwEBA38DQEEAQQAoAuAIIgBBAmoiATYC4AgCQAJAAkAgAEEAKALkCE8NACABLwEAIgFBpX9qIgJBAU0NAgJAIAFBdmoiAEEDTQ0AIAFBL0cNBAwCCyAADgQAAwMAAAsQHgsPCwJAAkAgAg4CAQABC0EAIABBBGo2AuAIDAELECwaDAALC5EBAQR/QQAoAuAIIQBBACgC5AghAQJAA0AgACICQQJqIQAgAiABTw0BAkAgAC8BACIDQdwARg0AAkAgA0F2aiICQQNNDQAgA0EiRw0CQQAgADYC4AgPCyACDgQCAQECAgsgAkEEaiEAIAIvAQRBDUcNACACQQZqIAAgAi8BBkEKRhshAAwACwtBACAANgLgCBAeC5EBAQR/QQAoAuAIIQBBACgC5AghAQJAA0AgACICQQJqIQAgAiABTw0BAkAgAC8BACIDQdwARg0AAkAgA0F2aiICQQNNDQAgA0EnRw0CQQAgADYC4AgPCyACDgQCAQECAgsgAkEEaiEAIAIvAQRBDUcNACACQQZqIAAgAi8BBkEKRhshAAwACwtBACAANgLgCBAeC8kBAQV/QQAoAuAIIQBBACgC5AghAQNAIAAiAkECaiEAAkACQCACIAFPDQAgAC8BACIDQaR/aiIEQQRNDQEgA0EkRw0CIAIvAQRB+wBHDQJBAEEALwHGCCIAQQFqOwHGCEEAKALUCCAAQQF0akEALwHKCDsBAEEAIAJBBGo2AuAIQQBBAC8ByAhBAWoiADsByghBACAAOwHICA8LQQAgADYC4AgQHg8LAkACQCAEDgUBAgICAAELQQAgADYC4AgPCyACQQRqIQAMAAsLNQEBf0EAQQE6ALAIQQAoAuAIIQBBAEEAKALkCEECajYC4AhBACAAQQAoApAIa0EBdTYCwAgLNAEBf0EBIQECQCAAQXdqQf//A3FBBUkNACAAQYABckGgAUYNACAAQS5HIAAQKXEhAQsgAQtJAQN/QQAhBgJAIABBeGoiB0EAKAKQCCIISQ0AIAcgASACIAMgBCAFEBNFDQACQCAHIAhHDQBBAQ8LIABBdmovAQAQHyEGCyAGC1kBA39BACEEAkAgAEF8aiIFQQAoApAIIgZJDQAgAC8BACADRw0AIABBfmovAQAgAkcNACAFLwEAIAFHDQACQCAFIAZHDQBBAQ8LIABBemovAQAQHyEECyAEC0wBA39BACEDAkAgAEF+aiIEQQAoApAIIgVJDQAgAC8BACACRw0AIAQvAQAgAUcNAAJAIAQgBUcNAEEBDwsgAEF8ai8BABAfIQMLIAMLSwEDf0EAIQcCQCAAQXZqIghBACgCkAgiCUkNACAIIAEgAiADIAQgBSAGEC1FDQACQCAIIAlHDQBBAQ8LIABBdGovAQAQHyEHCyAHC2YBA39BACEFAkAgAEF6aiIGQQAoApAIIgdJDQAgAC8BACAERw0AIABBfmovAQAgA0cNACAAQXxqLwEAIAJHDQAgBi8BACABRw0AAkAgBiAHRw0AQQEPCyAAQXhqLwEAEB8hBQsgBQs9AQJ/QQAhAgJAQQAoApAIIgMgAEsNACAALwEAIAFHDQACQCADIABHDQBBAQ8LIABBfmovAQAQHyECCyACC00BA39BACEIAkAgAEF0aiIJQQAoApAIIgpJDQAgCSABIAIgAyAEIAUgBiAHEC5FDQACQCAJIApHDQBBAQ8LIABBcmovAQAQHyEICyAIC3YBA39BACgC4AghAAJAA0ACQCAALwEAIgFBd2pBBUkNACABQSBGDQAgAUGgAUYNACABQS9HDQICQCAALwECIgBBKkYNACAAQS9HDQMQEAwBCxARC0EAQQAoAuAIIgJBAmoiADYC4AggAkEAKALkCEkNAAsLIAELWAACQAJAIAFBIkYNACABQSdHDQFBACgC4AghARAcIAAgAUECakEAKALgCEEAKAKECBABDwtBACgC4AghARAbIAAgAUECakEAKALgCEEAKAKECBABDwsQHgtoAQJ/QQEhAQJAAkAgAEFfaiICQQVLDQBBASACdEExcQ0BCyAAQfj/A3FBKEYNACAAQUZqQf//A3FBBkkNAAJAIABBpX9qIgJBA0sNACACQQFHDQELIABBhX9qQf//A3FBBEkhAQsgAQttAQJ/AkACQANAAkAgAEH//wNxIgFBd2oiAkEXSw0AQQEgAnRBn4CABHENAgsgAUGgAUYNASAAIQIgARApDQJBACECQQBBACgC4AgiAEECajYC4AggAC8BAiIADQAMAgsLIAAhAgsgAkH//wNxC1wBAn8CQEEAKALgCCICLwEAIgNB4QBHDQBBACACQQRqNgLgCBAnIQJBACgC4AghACACECoaQQAoAuAIIQEQJyEDQQAoAuAIIQILAkAgAiAARg0AIAAgARACCyADC4kBAQV/QQAoAuAIIQBBACgC5AghAQN/IABBAmohAgJAAkAgACABTw0AIAIvAQAiA0Gkf2oiBEEBTQ0BIAIhACADQXZqIgNBA0sNAiACIQAgAw4EAAICAAALQQAgAjYC4AgQHkEADwsCQAJAIAQOAgEAAQtBACACNgLgCEHdAA8LIABBBGohAAwACwtJAQF/QQAhBwJAIAAvAQogBkcNACAALwEIIAVHDQAgAC8BBiAERw0AIAAvAQQgA0cNACAALwECIAJHDQAgAC8BACABRiEHCyAHC1MBAX9BACEIAkAgAC8BDCAHRw0AIAAvAQogBkcNACAALwEIIAVHDQAgAC8BBiAERw0AIAAvAQQgA0cNACAALwECIAJHDQAgAC8BACABRiEICyAICwsfAgBBgAgLAgAAAEGECAsQAQAAAAIAAAAABAAAcDgAAA=='),
      typeof window != 'undefined' && typeof atob == 'function'
        ? Uint8Array.from(atob(bs), e => e.charCodeAt(0))
        : Buffer.from(bs, 'base64'))
    )
      .then(WebAssembly.instantiate)
      .then(({ exports: e }) => {
        U = e
      })
  gn.init = Su
  var bs
})
var Ru = y((BC, Iu) => {
  'use strict'
  var Rb = (e, i = {}) => {
    let t = i.safe === !0 || i.keepProtected === !0,
      n = !1,
      a = (s, r) => {
        let o = '',
          c,
          d
        for (let l of s.nodes)
          switch (l.type) {
            case 'block':
              if (i.first && n === !0) {
                o += a(l, s)
                break
              }
              if (i.preserveNewlines === !0) {
                ;(c = a(l, s)),
                  (d = c.split(`
`)),
                  (o += `
`.repeat(d.length - 1))
                break
              }
              if (t === !0 && l.protected === !0) {
                o += a(l, s)
                break
              }
              n = !0
              break
            case 'line':
              if (i.first && n === !0) {
                o += l.value
                break
              }
              t === !0 && l.protected === !0 && (o += l.value), (n = !0)
              break
            case 'open':
            case 'close':
            case 'text':
            case 'newline':
            default: {
              o += l.value || ''
              break
            }
          }
        return o
      }
    return a(e)
  }
  Iu.exports = Rb
})
var Lu = y((SC, Fu) => {
  'use strict'
  var ys = class {
      constructor (i) {
        ;(this.type = i.type),
          i.value && (this.value = i.value),
          i.match && (this.match = i.match),
          (this.newline = i.newline || '')
      }
      get protected () {
        return Boolean(this.match) && this.match[1] === '!'
      }
    },
    Ou = class extends ys {
      constructor (i) {
        super(i)
        this.nodes = i.nodes || []
      }
      push (i) {
        this.nodes.push(i)
      }
      get protected () {
        return this.nodes.length > 0 && this.nodes[0].protected === !0
      }
    }
  Fu.exports = { Node: ys, Block: Ou }
})
var Nu = y(O => {
  'use strict'
  O.ada = { LINE_REGEX: /^--.*/ }
  O.apl = { LINE_REGEX: /^⍝.*/ }
  O.applescript = { BLOCK_OPEN_REGEX: /^\(\*/, BLOCK_CLOSE_REGEX: /^\*\)/ }
  O.csharp = { LINE_REGEX: /^\/\/.*/ }
  O.haskell = {
    BLOCK_OPEN_REGEX: /^\{-/,
    BLOCK_CLOSE_REGEX: /^-\}/,
    LINE_REGEX: /^--.*/
  }
  O.html = {
    BLOCK_OPEN_REGEX: /^\n*<!--(?!-?>)/,
    BLOCK_CLOSE_REGEX: /^(?<!(?:<!-))-->/,
    BLOCK_CLOSE_LOOSE_REGEX: /^(?<!(?:<!-))--\s*>/,
    BLOCK_CLOSE_STRICT_NEWLINE_REGEX: /^(?<!(?:<!-))-->(\s*\n+|\n*)/,
    BLOCK_CLOSE_STRICT_LOOSE_REGEX: /^(?<!(?:<!-))--\s*>(\s*\n+|\n*)/
  }
  O.javascript = {
    BLOCK_OPEN_REGEX: /^\/\*\*?(!?)/,
    BLOCK_CLOSE_REGEX: /^\*\/(\n?)/,
    LINE_REGEX: /^\/\/(!?).*/
  }
  O.lua = {
    BLOCK_OPEN_REGEX: /^--\[\[/,
    BLOCK_CLOSE_REGEX: /^\]\]/,
    LINE_REGEX: /^--.*/
  }
  O.matlab = {
    BLOCK_OPEN_REGEX: /^%{/,
    BLOCK_CLOSE_REGEX: /^%}/,
    LINE_REGEX: /^%.*/
  }
  O.perl = { LINE_REGEX: /^#.*/ }
  O.php = k(k({}, O.javascript), { LINE_REGEX: /^(#|\/\/).*?(?=\?>|\n)/ })
  O.python = {
    BLOCK_OPEN_REGEX: /^"""/,
    BLOCK_CLOSE_REGEX: /^"""/,
    LINE_REGEX: /^#.*/
  }
  O.ruby = {
    BLOCK_OPEN_REGEX: /^=begin/,
    BLOCK_CLOSE_REGEX: /^=end/,
    LINE_REGEX: /^#.*/
  }
  O.shebang = O.hashbang = { LINE_REGEX: /^#!.*/ }
  O.c = O.javascript
  O.csharp = O.javascript
  O.css = O.javascript
  O.java = O.javascript
  O.js = O.javascript
  O.less = O.javascript
  O.pascal = O.applescript
  O.ocaml = O.applescript
  O.sass = O.javascript
  O.sql = O.ada
  O.swift = O.javascript
  O.ts = O.javascript
  O.typscript = O.javascript
  O.xml = O.html
})
var Du = y((IC, ju) => {
  'use strict'
  var { Node: Ke, Block: Tu } = Lu(),
    Fb = Nu(),
    Es = {
      ESCAPED_CHAR_REGEX: /^\\./,
      QUOTED_STRING_REGEX: /^(['"`])((?:\\.|[^\1])+?)(\1)/,
      NEWLINE_REGEX: /^\r*\n/
    },
    Ob = (e, i = {}) => {
      if (typeof e != 'string')
        throw new TypeError('Expected input to be a string')
      let t = new Tu({ type: 'root', nodes: [] }),
        n = [t],
        a = (i.language || 'javascript').toLowerCase(),
        s = Fb[a]
      if (typeof s == 'undefined')
        throw new Error(`Language "${a}" is not supported by strip-comments`)
      let { LINE_REGEX: r, BLOCK_OPEN_REGEX: o, BLOCK_CLOSE_REGEX: c } = s,
        d = t,
        l = e,
        p,
        u,
        m = [o, c].filter(Boolean),
        f = !1
      m.every(C => C.source === '^"""') && (f = !0)
      let h = (C = l[0] || '') => ((l = l.slice(C.length)), C),
        x = (C, Q = 'text') => {
          let L = C.exec(l)
          if (L) return h(L[0]), { type: Q, value: L[0], match: L }
        },
        v = C => {
          if (u && u.type === 'text' && C.type === 'text') {
            u.value += C.value
            return
          }
          d.push(C), C.nodes && (n.push(C), (d = C)), (u = C)
        },
        w = () => {
          if (d.type === 'root') throw new SyntaxError('Unclosed block comment')
          n.pop(), (d = n[n.length - 1])
        }
      for (; l !== ''; ) {
        if ((p = x(Es.ESCAPED_CHAR_REGEX, 'text'))) {
          v(new Ke(p))
          continue
        }
        if (
          d.type !== 'block' &&
          (!u || !/\w$/.test(u.value)) &&
          !(f && l.startsWith('"""')) &&
          (p = x(Es.QUOTED_STRING_REGEX, 'text'))
        ) {
          v(new Ke(p))
          continue
        }
        if ((p = x(Es.NEWLINE_REGEX, 'newline'))) {
          v(new Ke(p))
          continue
        }
        if (o && i.block && !(f && d.type === 'block') && (p = x(o, 'open'))) {
          v(new Tu({ type: 'block' })), v(new Ke(p))
          continue
        }
        if (c && d.type === 'block' && i.block && (p = x(c, 'close'))) {
          ;(p.newline = p.match[1] || ''), v(new Ke(p)), w()
          continue
        }
        if (r && d.type !== 'block' && i.line && (p = x(r, 'line'))) {
          v(new Ke(p))
          continue
        }
        if ((p = x(/^[a-zABD-Z0-9\t ]+/, 'text'))) {
          v(new Ke(p))
          continue
        }
        v(new Ke({ type: 'text', value: h(l[0]) }))
      }
      return t
    }
  ju.exports = Ob
})
var Pu = y((RC, qu) => {
  'use strict'
  var An = Ru(),
    ot = Du(),
    bn = (qu.exports = (e, i) => {
      let t = k(k({}, i), { block: !0, line: !0 })
      return An(ot(e, t), t)
    })
  bn.block = (e, i) => {
    let t = k(k({}, i), { block: !0 })
    return An(ot(e, t), t)
  }
  bn.line = (e, i) => {
    let t = k(k({}, i), { line: !0 })
    return An(ot(e, t), t)
  }
  bn.first = (e, i) => {
    let t = k(k({}, i), { block: !0, line: !0, first: !0 })
    return An(ot(e, t), t)
  }
  bn.parse = ot
})
var Gu = y((FC, Hu) => {
  var Lb = require('fs'),
    ws = require('path'),
    { createRequire: Nb } = require('module'),
    ct = yu()('wdg'),
    jb = ku(),
    { parse: Mu } = Qu(),
    Tb = Pu(),
    Db = /(?<![^;\n])[ ]*import(?:["'\s]*([\w*${}\n\r\t, ]+)\s*from\s*)?\s*["'](.*?)["']/gm,
    qb = /(?<!\.)\bimport\((?:['"].+['"]|`[^$]+`)\)/gm
  function Pb () {
    let e = {}
    return {
      emit (i, ...t) {
        return e[i] ? e[i].map(n => n(...t)) : []
      },
      on (i, t) {
        return (
          (e[i] = e[i] ? e[i].concat(t) : [t]),
          () => e[i].slice(e[i].indexOf(t), 1)
        )
      },
      clear () {
        e = {}
      },
      listeners (i) {
        return e[i] || []
      }
    }
  }
  function Hb (e, i) {
    for (let t of Object.keys(i))
      if (e.indexOf(t) === 0) return ws.join(i[t], e.replace(t, ''))
    return e
  }
  function $u (e, i, t) {
    for (let n of t) {
      let a = e[n]
      delete require.cache[a], $u(e, i, i[a].parentPointers)
    }
  }
  function Mb (e) {
    e = Tb(e)
    let i = [],
      t,
      n = new RegExp(Db)
    for (; (t = n.exec(e)); ) i.push(t)
    let a = new RegExp(qb)
    for (; (t = a.exec(e)); ) i.push(t)
    return i.map(([s]) => s).join(`
`)
  }
  async function $b ({ id: e, alias: i }) {
    let t = Lb.readFileSync(e, 'utf-8'),
      n = []
    try {
      n = (await Mu(t))[0].map(a => a.n)
    } catch (a) {
      n = (await Mu(Mb(t)))[0].map(s => s.n)
    }
    return n
      .map(a => {
        let s = Nb(e),
          r
        try {
          r = s.resolve(a)
        } catch (o) {
          try {
            r = s.resolve(Hb(a, i))
          } catch (c) {
            r = require.resolve(a)
          }
        }
        return r === a ? void 0 : r
      })
      .filter(Boolean)
  }
  Hu.exports = function ({ alias: i = {} } = {}) {
    ct('initialized with', { alias: i })
    let t = Pb(),
      n = [],
      a = {},
      s = jb(),
      r = []
    function o (p) {
      let { pointer: u, parentPointers: m, childrenPointers: f } = a[p]
      for (let h of m) {
        let x = a[n[h]].childrenPointers
        x.splice(x.indexOf(u), 1)
      }
      for (let h of f) {
        let x = a[n[h]].parentPointers
        x.splice(x.indexOf(u), 1)
        let v = a[n[h]].entryPointers
        v.includes(u) && v.splice(v.indexOf(u), 1),
          (v.length === 0 || x.length === 0) && o(n[h])
      }
      delete a[p], s.remove(p)
    }
    async function c (p, u) {
      let {
          entryPointer: m,
          parentPointer: f,
          visitedIds: h,
          bootstrapping: x
        } = u,
        v = m === void 0,
        w = /^\.(j|t)sx?$/.test(ws.extname(p))
      if (!h.includes(p)) {
        h.push(p), s.add(p), n.includes(p) || n.push(p)
        let C = n.indexOf(p)
        ;(m = v ? C : m),
          (f = v ? C : f),
          a[p] ||
            (a[p] = {
              pointer: C,
              entryPointers: [m],
              parentPointers: v ? [] : [f],
              childrenPointers: []
            })
        let Q = a[p],
          L = a[n[f]]
        if (
          (Q.entryPointers.includes(m) || Q.entryPointers.push(m),
          v ||
            (Q.parentPointers.includes(f) || Q.parentPointers.push(f),
            L.childrenPointers.includes(C) || L.childrenPointers.push(C)),
          !w)
        )
          return
        try {
          let D = w ? await $b({ id: p, alias: i }) : []
          if (!x) for (let E of Q.childrenPointers) D.includes(n[E]) || o(n[E])
          for (let E of D)
            L.childrenPointers.includes(n.indexOf(E)) ||
              (await c(E, {
                entryPointer: m,
                parentPointer: C,
                visitedIds: h,
                bootstrapping: x
              }))
        } catch (D) {
          ct('walk error', D),
            D instanceof SyntaxError &&
              (D = new SyntaxError(D.message, p, D.lineNumber)),
            t.listeners('error').length || console.error(D),
            t.emit('error', D)
        }
      }
    }
    function d (p) {
      let { entryPointers: u } = a[p]
      $u(n, a, [n.indexOf(p)]),
        t.emit(
          'change',
          u.map(m => n[m])
        )
    }
    function l (p) {
      let u = ws.isAbsolute(p)
      if (!u) {
        let m = new Error(
          `Paths added or removed must be absolute. You passed ${p}.`
        )
        t.emit('error', m), t.listeners('error').length || console.error(m)
      }
      return u
    }
    return (
      s.on('change', async (p, u) => {
        let { pointer: m, entryPointers: f } = a[p],
          h = f.includes(m)
        u.deleted
          ? (ct('remove', p),
            h
              ? (t.emit('remove', [n[m]]),
                r.splice(r.indexOf(n[m]), 1),
                n.splice(m, 1),
                o(p))
              : (d(p), o(p)))
          : (ct('change', p),
            d(p),
            await c(p, {
              visitedIds: [],
              entryPointer: h ? void 0 : a[p].entryPointers[0],
              parentPointer: h ? void 0 : a[p].parentPointers[0]
            }))
      }),
      {
        get ids () {
          return n
        },
        get tree () {
          return a
        },
        on (p, u) {
          return t.on(p, u)
        },
        close () {
          t.clear(), s.removeAll(), s.removeAllListeners()
        },
        async add (p) {
          ct('add', p),
            (p = [].concat(p).filter(u => (r.includes(u) ? !1 : l(u)))),
            t.emit('add', p),
            r.push(...p)
          for (let u of r) await c(u, { visitedIds: [], bootstrapping: !0 })
        },
        remove (p) {
          ;(p = [].concat(p).filter(l)), t.emit('remove', p)
          for (let u of p) r.includes(u) && (r.splice(r.indexOf(u), 1), o(u))
        }
      }
    )
  }
})
var zu = y((LC, Uu) => {
  var Gb = Ve(),
    OC = require('path'),
    { debug: Ub } = ki(),
    { serialize: zb } = fn()
  function Kb (e, i) {
    let t = i.env === 'production' ? 'presta' : 'presta:internal',
      n = Object.keys(i.configFile).length ? i.configFilepath : void 0
    return `import { createRouter, createHandler } from '${t}/utils';

${n ? `import * as userConfig from '${n}'` : 'const userConfig = {}'}
${e.map(
  (a, s) => `import * as Template${s} from '${a.replace(/\\/g, '\\\\')}';`
).join(`
`)}

export const config = Object.assign({}, userConfig, ${zb(i)});
export const files = [
  ${e.map((a, s) => `Template${s}`).join(`,
  `)}
];
export const router = createRouter(files, config);
export const handler = createHandler(router, config);
`
  }
  function Wb (e, i) {
    let t = i.dynamicEntryFilepath
    return Gb.outputFileSync(t, Kb(e, i)), Ub('created entry', t), t
  }
  Uu.exports = { createDynamicEntry: Wb }
})
var Xu = y((NC, Ku) => {
  var Wu = Ve(),
    Jb = require('path'),
    Yb = Ea()
  function Ju (e) {
    return /export\s.+\sroute\s+\=/.test(Wu.readFileSync(e, 'utf-8'))
  }
  function Yu (e) {
    return /export\s.+\sgetStaticPaths/.test(Wu.readFileSync(e, 'utf-8'))
  }
  function Xb (e) {
    return Yu(e) || Ju(e)
  }
  function Vb (e) {
    return []
      .concat(e.merged.files)
      .map(i => Jb.resolve(e.cwd, i))
      .map(i => Yb.sync(i, { cwd: e.cwd }))
      .flat()
  }
  Ku.exports = { isPrestaFile: Xb, isDynamic: Ju, isStatic: Yu, getFiles: Vb }
})
var Zu = y((jC, Vu) => {
  Vu.exports = {
    'application/1d-interleaved-parityfec': { source: 'iana' },
    'application/3gpdash-qoe-report+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/3gpp-ims+xml': { source: 'iana', compressible: !0 },
    'application/a2l': { source: 'iana' },
    'application/activemessage': { source: 'iana' },
    'application/activity+json': { source: 'iana', compressible: !0 },
    'application/alto-costmap+json': { source: 'iana', compressible: !0 },
    'application/alto-costmapfilter+json': { source: 'iana', compressible: !0 },
    'application/alto-directory+json': { source: 'iana', compressible: !0 },
    'application/alto-endpointcost+json': { source: 'iana', compressible: !0 },
    'application/alto-endpointcostparams+json': {
      source: 'iana',
      compressible: !0
    },
    'application/alto-endpointprop+json': { source: 'iana', compressible: !0 },
    'application/alto-endpointpropparams+json': {
      source: 'iana',
      compressible: !0
    },
    'application/alto-error+json': { source: 'iana', compressible: !0 },
    'application/alto-networkmap+json': { source: 'iana', compressible: !0 },
    'application/alto-networkmapfilter+json': {
      source: 'iana',
      compressible: !0
    },
    'application/alto-updatestreamcontrol+json': {
      source: 'iana',
      compressible: !0
    },
    'application/alto-updatestreamparams+json': {
      source: 'iana',
      compressible: !0
    },
    'application/aml': { source: 'iana' },
    'application/andrew-inset': { source: 'iana', extensions: ['ez'] },
    'application/applefile': { source: 'iana' },
    'application/applixware': { source: 'apache', extensions: ['aw'] },
    'application/atf': { source: 'iana' },
    'application/atfx': { source: 'iana' },
    'application/atom+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['atom']
    },
    'application/atomcat+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['atomcat']
    },
    'application/atomdeleted+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['atomdeleted']
    },
    'application/atomicmail': { source: 'iana' },
    'application/atomsvc+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['atomsvc']
    },
    'application/atsc-dwd+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['dwd']
    },
    'application/atsc-dynamic-event-message': { source: 'iana' },
    'application/atsc-held+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['held']
    },
    'application/atsc-rdt+json': { source: 'iana', compressible: !0 },
    'application/atsc-rsat+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rsat']
    },
    'application/atxml': { source: 'iana' },
    'application/auth-policy+xml': { source: 'iana', compressible: !0 },
    'application/bacnet-xdd+zip': { source: 'iana', compressible: !1 },
    'application/batch-smtp': { source: 'iana' },
    'application/bdoc': { compressible: !1, extensions: ['bdoc'] },
    'application/beep+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/calendar+json': { source: 'iana', compressible: !0 },
    'application/calendar+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xcs']
    },
    'application/call-completion': { source: 'iana' },
    'application/cals-1840': { source: 'iana' },
    'application/captive+json': { source: 'iana', compressible: !0 },
    'application/cbor': { source: 'iana' },
    'application/cbor-seq': { source: 'iana' },
    'application/cccex': { source: 'iana' },
    'application/ccmp+xml': { source: 'iana', compressible: !0 },
    'application/ccxml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['ccxml']
    },
    'application/cdfx+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['cdfx']
    },
    'application/cdmi-capability': { source: 'iana', extensions: ['cdmia'] },
    'application/cdmi-container': { source: 'iana', extensions: ['cdmic'] },
    'application/cdmi-domain': { source: 'iana', extensions: ['cdmid'] },
    'application/cdmi-object': { source: 'iana', extensions: ['cdmio'] },
    'application/cdmi-queue': { source: 'iana', extensions: ['cdmiq'] },
    'application/cdni': { source: 'iana' },
    'application/cea': { source: 'iana' },
    'application/cea-2018+xml': { source: 'iana', compressible: !0 },
    'application/cellml+xml': { source: 'iana', compressible: !0 },
    'application/cfw': { source: 'iana' },
    'application/clr': { source: 'iana' },
    'application/clue+xml': { source: 'iana', compressible: !0 },
    'application/clue_info+xml': { source: 'iana', compressible: !0 },
    'application/cms': { source: 'iana' },
    'application/cnrp+xml': { source: 'iana', compressible: !0 },
    'application/coap-group+json': { source: 'iana', compressible: !0 },
    'application/coap-payload': { source: 'iana' },
    'application/commonground': { source: 'iana' },
    'application/conference-info+xml': { source: 'iana', compressible: !0 },
    'application/cose': { source: 'iana' },
    'application/cose-key': { source: 'iana' },
    'application/cose-key-set': { source: 'iana' },
    'application/cpl+xml': { source: 'iana', compressible: !0 },
    'application/csrattrs': { source: 'iana' },
    'application/csta+xml': { source: 'iana', compressible: !0 },
    'application/cstadata+xml': { source: 'iana', compressible: !0 },
    'application/csvm+json': { source: 'iana', compressible: !0 },
    'application/cu-seeme': { source: 'apache', extensions: ['cu'] },
    'application/cwt': { source: 'iana' },
    'application/cybercash': { source: 'iana' },
    'application/dart': { compressible: !0 },
    'application/dash+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mpd']
    },
    'application/dashdelta': { source: 'iana' },
    'application/davmount+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['davmount']
    },
    'application/dca-rft': { source: 'iana' },
    'application/dcd': { source: 'iana' },
    'application/dec-dx': { source: 'iana' },
    'application/dialog-info+xml': { source: 'iana', compressible: !0 },
    'application/dicom': { source: 'iana' },
    'application/dicom+json': { source: 'iana', compressible: !0 },
    'application/dicom+xml': { source: 'iana', compressible: !0 },
    'application/dii': { source: 'iana' },
    'application/dit': { source: 'iana' },
    'application/dns': { source: 'iana' },
    'application/dns+json': { source: 'iana', compressible: !0 },
    'application/dns-message': { source: 'iana' },
    'application/docbook+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['dbk']
    },
    'application/dots+cbor': { source: 'iana' },
    'application/dskpp+xml': { source: 'iana', compressible: !0 },
    'application/dssc+der': { source: 'iana', extensions: ['dssc'] },
    'application/dssc+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xdssc']
    },
    'application/dvcs': { source: 'iana' },
    'application/ecmascript': {
      source: 'iana',
      compressible: !0,
      extensions: ['es', 'ecma']
    },
    'application/edi-consent': { source: 'iana' },
    'application/edi-x12': { source: 'iana', compressible: !1 },
    'application/edifact': { source: 'iana', compressible: !1 },
    'application/efi': { source: 'iana' },
    'application/elm+json': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/elm+xml': { source: 'iana', compressible: !0 },
    'application/emergencycalldata.cap+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/emergencycalldata.comment+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/emergencycalldata.control+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/emergencycalldata.deviceinfo+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/emergencycalldata.ecall.msd': { source: 'iana' },
    'application/emergencycalldata.providerinfo+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/emergencycalldata.serviceinfo+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/emergencycalldata.subscriberinfo+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/emergencycalldata.veds+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/emma+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['emma']
    },
    'application/emotionml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['emotionml']
    },
    'application/encaprtp': { source: 'iana' },
    'application/epp+xml': { source: 'iana', compressible: !0 },
    'application/epub+zip': {
      source: 'iana',
      compressible: !1,
      extensions: ['epub']
    },
    'application/eshop': { source: 'iana' },
    'application/exi': { source: 'iana', extensions: ['exi'] },
    'application/expect-ct-report+json': { source: 'iana', compressible: !0 },
    'application/fastinfoset': { source: 'iana' },
    'application/fastsoap': { source: 'iana' },
    'application/fdt+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['fdt']
    },
    'application/fhir+json': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/fhir+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/fido.trusted-apps+json': { compressible: !0 },
    'application/fits': { source: 'iana' },
    'application/flexfec': { source: 'iana' },
    'application/font-sfnt': { source: 'iana' },
    'application/font-tdpfr': { source: 'iana', extensions: ['pfr'] },
    'application/font-woff': { source: 'iana', compressible: !1 },
    'application/framework-attributes+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/geo+json': {
      source: 'iana',
      compressible: !0,
      extensions: ['geojson']
    },
    'application/geo+json-seq': { source: 'iana' },
    'application/geopackage+sqlite3': { source: 'iana' },
    'application/geoxacml+xml': { source: 'iana', compressible: !0 },
    'application/gltf-buffer': { source: 'iana' },
    'application/gml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['gml']
    },
    'application/gpx+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['gpx']
    },
    'application/gxf': { source: 'apache', extensions: ['gxf'] },
    'application/gzip': {
      source: 'iana',
      compressible: !1,
      extensions: ['gz']
    },
    'application/h224': { source: 'iana' },
    'application/held+xml': { source: 'iana', compressible: !0 },
    'application/hjson': { extensions: ['hjson'] },
    'application/http': { source: 'iana' },
    'application/hyperstudio': { source: 'iana', extensions: ['stk'] },
    'application/ibe-key-request+xml': { source: 'iana', compressible: !0 },
    'application/ibe-pkg-reply+xml': { source: 'iana', compressible: !0 },
    'application/ibe-pp-data': { source: 'iana' },
    'application/iges': { source: 'iana' },
    'application/im-iscomposing+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/index': { source: 'iana' },
    'application/index.cmd': { source: 'iana' },
    'application/index.obj': { source: 'iana' },
    'application/index.response': { source: 'iana' },
    'application/index.vnd': { source: 'iana' },
    'application/inkml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['ink', 'inkml']
    },
    'application/iotp': { source: 'iana' },
    'application/ipfix': { source: 'iana', extensions: ['ipfix'] },
    'application/ipp': { source: 'iana' },
    'application/isup': { source: 'iana' },
    'application/its+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['its']
    },
    'application/java-archive': {
      source: 'apache',
      compressible: !1,
      extensions: ['jar', 'war', 'ear']
    },
    'application/java-serialized-object': {
      source: 'apache',
      compressible: !1,
      extensions: ['ser']
    },
    'application/java-vm': {
      source: 'apache',
      compressible: !1,
      extensions: ['class']
    },
    'application/javascript': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['js', 'mjs']
    },
    'application/jf2feed+json': { source: 'iana', compressible: !0 },
    'application/jose': { source: 'iana' },
    'application/jose+json': { source: 'iana', compressible: !0 },
    'application/jrd+json': { source: 'iana', compressible: !0 },
    'application/jscalendar+json': { source: 'iana', compressible: !0 },
    'application/json': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['json', 'map']
    },
    'application/json-patch+json': { source: 'iana', compressible: !0 },
    'application/json-seq': { source: 'iana' },
    'application/json5': { extensions: ['json5'] },
    'application/jsonml+json': {
      source: 'apache',
      compressible: !0,
      extensions: ['jsonml']
    },
    'application/jwk+json': { source: 'iana', compressible: !0 },
    'application/jwk-set+json': { source: 'iana', compressible: !0 },
    'application/jwt': { source: 'iana' },
    'application/kpml-request+xml': { source: 'iana', compressible: !0 },
    'application/kpml-response+xml': { source: 'iana', compressible: !0 },
    'application/ld+json': {
      source: 'iana',
      compressible: !0,
      extensions: ['jsonld']
    },
    'application/lgr+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['lgr']
    },
    'application/link-format': { source: 'iana' },
    'application/load-control+xml': { source: 'iana', compressible: !0 },
    'application/lost+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['lostxml']
    },
    'application/lostsync+xml': { source: 'iana', compressible: !0 },
    'application/lpf+zip': { source: 'iana', compressible: !1 },
    'application/lxf': { source: 'iana' },
    'application/mac-binhex40': { source: 'iana', extensions: ['hqx'] },
    'application/mac-compactpro': { source: 'apache', extensions: ['cpt'] },
    'application/macwriteii': { source: 'iana' },
    'application/mads+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mads']
    },
    'application/manifest+json': {
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['webmanifest']
    },
    'application/marc': { source: 'iana', extensions: ['mrc'] },
    'application/marcxml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mrcx']
    },
    'application/mathematica': {
      source: 'iana',
      extensions: ['ma', 'nb', 'mb']
    },
    'application/mathml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mathml']
    },
    'application/mathml-content+xml': { source: 'iana', compressible: !0 },
    'application/mathml-presentation+xml': { source: 'iana', compressible: !0 },
    'application/mbms-associated-procedure-description+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/mbms-deregister+xml': { source: 'iana', compressible: !0 },
    'application/mbms-envelope+xml': { source: 'iana', compressible: !0 },
    'application/mbms-msk+xml': { source: 'iana', compressible: !0 },
    'application/mbms-msk-response+xml': { source: 'iana', compressible: !0 },
    'application/mbms-protection-description+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/mbms-reception-report+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/mbms-register+xml': { source: 'iana', compressible: !0 },
    'application/mbms-register-response+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/mbms-schedule+xml': { source: 'iana', compressible: !0 },
    'application/mbms-user-service-description+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/mbox': { source: 'iana', extensions: ['mbox'] },
    'application/media-policy-dataset+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/media_control+xml': { source: 'iana', compressible: !0 },
    'application/mediaservercontrol+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mscml']
    },
    'application/merge-patch+json': { source: 'iana', compressible: !0 },
    'application/metalink+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['metalink']
    },
    'application/metalink4+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['meta4']
    },
    'application/mets+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mets']
    },
    'application/mf4': { source: 'iana' },
    'application/mikey': { source: 'iana' },
    'application/mipc': { source: 'iana' },
    'application/mmt-aei+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['maei']
    },
    'application/mmt-usd+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['musd']
    },
    'application/mods+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mods']
    },
    'application/moss-keys': { source: 'iana' },
    'application/moss-signature': { source: 'iana' },
    'application/mosskey-data': { source: 'iana' },
    'application/mosskey-request': { source: 'iana' },
    'application/mp21': { source: 'iana', extensions: ['m21', 'mp21'] },
    'application/mp4': { source: 'iana', extensions: ['mp4s', 'm4p'] },
    'application/mpeg4-generic': { source: 'iana' },
    'application/mpeg4-iod': { source: 'iana' },
    'application/mpeg4-iod-xmt': { source: 'iana' },
    'application/mrb-consumer+xml': { source: 'iana', compressible: !0 },
    'application/mrb-publish+xml': { source: 'iana', compressible: !0 },
    'application/msc-ivr+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/msc-mixer+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/msword': {
      source: 'iana',
      compressible: !1,
      extensions: ['doc', 'dot']
    },
    'application/mud+json': { source: 'iana', compressible: !0 },
    'application/multipart-core': { source: 'iana' },
    'application/mxf': { source: 'iana', extensions: ['mxf'] },
    'application/n-quads': { source: 'iana', extensions: ['nq'] },
    'application/n-triples': { source: 'iana', extensions: ['nt'] },
    'application/nasdata': { source: 'iana' },
    'application/news-checkgroups': { source: 'iana', charset: 'US-ASCII' },
    'application/news-groupinfo': { source: 'iana', charset: 'US-ASCII' },
    'application/news-transmission': { source: 'iana' },
    'application/nlsml+xml': { source: 'iana', compressible: !0 },
    'application/node': { source: 'iana', extensions: ['cjs'] },
    'application/nss': { source: 'iana' },
    'application/ocsp-request': { source: 'iana' },
    'application/ocsp-response': { source: 'iana' },
    'application/octet-stream': {
      source: 'iana',
      compressible: !1,
      extensions: [
        'bin',
        'dms',
        'lrf',
        'mar',
        'so',
        'dist',
        'distz',
        'pkg',
        'bpk',
        'dump',
        'elc',
        'deploy',
        'exe',
        'dll',
        'deb',
        'dmg',
        'iso',
        'img',
        'msi',
        'msp',
        'msm',
        'buffer'
      ]
    },
    'application/oda': { source: 'iana', extensions: ['oda'] },
    'application/odm+xml': { source: 'iana', compressible: !0 },
    'application/odx': { source: 'iana' },
    'application/oebps-package+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['opf']
    },
    'application/ogg': {
      source: 'iana',
      compressible: !1,
      extensions: ['ogx']
    },
    'application/omdoc+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['omdoc']
    },
    'application/onenote': {
      source: 'apache',
      extensions: ['onetoc', 'onetoc2', 'onetmp', 'onepkg']
    },
    'application/opc-nodeset+xml': { source: 'iana', compressible: !0 },
    'application/oscore': { source: 'iana' },
    'application/oxps': { source: 'iana', extensions: ['oxps'] },
    'application/p2p-overlay+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['relo']
    },
    'application/parityfec': { source: 'iana' },
    'application/passport': { source: 'iana' },
    'application/patch-ops-error+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xer']
    },
    'application/pdf': {
      source: 'iana',
      compressible: !1,
      extensions: ['pdf']
    },
    'application/pdx': { source: 'iana' },
    'application/pem-certificate-chain': { source: 'iana' },
    'application/pgp-encrypted': {
      source: 'iana',
      compressible: !1,
      extensions: ['pgp']
    },
    'application/pgp-keys': { source: 'iana' },
    'application/pgp-signature': { source: 'iana', extensions: ['asc', 'sig'] },
    'application/pics-rules': { source: 'apache', extensions: ['prf'] },
    'application/pidf+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/pidf-diff+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/pkcs10': { source: 'iana', extensions: ['p10'] },
    'application/pkcs12': { source: 'iana' },
    'application/pkcs7-mime': { source: 'iana', extensions: ['p7m', 'p7c'] },
    'application/pkcs7-signature': { source: 'iana', extensions: ['p7s'] },
    'application/pkcs8': { source: 'iana', extensions: ['p8'] },
    'application/pkcs8-encrypted': { source: 'iana' },
    'application/pkix-attr-cert': { source: 'iana', extensions: ['ac'] },
    'application/pkix-cert': { source: 'iana', extensions: ['cer'] },
    'application/pkix-crl': { source: 'iana', extensions: ['crl'] },
    'application/pkix-pkipath': { source: 'iana', extensions: ['pkipath'] },
    'application/pkixcmp': { source: 'iana', extensions: ['pki'] },
    'application/pls+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['pls']
    },
    'application/poc-settings+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/postscript': {
      source: 'iana',
      compressible: !0,
      extensions: ['ai', 'eps', 'ps']
    },
    'application/ppsp-tracker+json': { source: 'iana', compressible: !0 },
    'application/problem+json': { source: 'iana', compressible: !0 },
    'application/problem+xml': { source: 'iana', compressible: !0 },
    'application/provenance+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['provx']
    },
    'application/prs.alvestrand.titrax-sheet': { source: 'iana' },
    'application/prs.cww': { source: 'iana', extensions: ['cww'] },
    'application/prs.cyn': { source: 'iana', charset: '7-BIT' },
    'application/prs.hpub+zip': { source: 'iana', compressible: !1 },
    'application/prs.nprend': { source: 'iana' },
    'application/prs.plucker': { source: 'iana' },
    'application/prs.rdf-xml-crypt': { source: 'iana' },
    'application/prs.xsf+xml': { source: 'iana', compressible: !0 },
    'application/pskc+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['pskcxml']
    },
    'application/pvd+json': { source: 'iana', compressible: !0 },
    'application/qsig': { source: 'iana' },
    'application/raml+yaml': { compressible: !0, extensions: ['raml'] },
    'application/raptorfec': { source: 'iana' },
    'application/rdap+json': { source: 'iana', compressible: !0 },
    'application/rdf+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rdf', 'owl']
    },
    'application/reginfo+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rif']
    },
    'application/relax-ng-compact-syntax': {
      source: 'iana',
      extensions: ['rnc']
    },
    'application/remote-printing': { source: 'iana' },
    'application/reputon+json': { source: 'iana', compressible: !0 },
    'application/resource-lists+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rl']
    },
    'application/resource-lists-diff+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rld']
    },
    'application/rfc+xml': { source: 'iana', compressible: !0 },
    'application/riscos': { source: 'iana' },
    'application/rlmi+xml': { source: 'iana', compressible: !0 },
    'application/rls-services+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rs']
    },
    'application/route-apd+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rapd']
    },
    'application/route-s-tsid+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['sls']
    },
    'application/route-usd+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rusd']
    },
    'application/rpki-ghostbusters': { source: 'iana', extensions: ['gbr'] },
    'application/rpki-manifest': { source: 'iana', extensions: ['mft'] },
    'application/rpki-publication': { source: 'iana' },
    'application/rpki-roa': { source: 'iana', extensions: ['roa'] },
    'application/rpki-updown': { source: 'iana' },
    'application/rsd+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['rsd']
    },
    'application/rss+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['rss']
    },
    'application/rtf': {
      source: 'iana',
      compressible: !0,
      extensions: ['rtf']
    },
    'application/rtploopback': { source: 'iana' },
    'application/rtx': { source: 'iana' },
    'application/samlassertion+xml': { source: 'iana', compressible: !0 },
    'application/samlmetadata+xml': { source: 'iana', compressible: !0 },
    'application/sarif+json': { source: 'iana', compressible: !0 },
    'application/sbe': { source: 'iana' },
    'application/sbml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['sbml']
    },
    'application/scaip+xml': { source: 'iana', compressible: !0 },
    'application/scim+json': { source: 'iana', compressible: !0 },
    'application/scvp-cv-request': { source: 'iana', extensions: ['scq'] },
    'application/scvp-cv-response': { source: 'iana', extensions: ['scs'] },
    'application/scvp-vp-request': { source: 'iana', extensions: ['spq'] },
    'application/scvp-vp-response': { source: 'iana', extensions: ['spp'] },
    'application/sdp': { source: 'iana', extensions: ['sdp'] },
    'application/secevent+jwt': { source: 'iana' },
    'application/senml+cbor': { source: 'iana' },
    'application/senml+json': { source: 'iana', compressible: !0 },
    'application/senml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['senmlx']
    },
    'application/senml-etch+cbor': { source: 'iana' },
    'application/senml-etch+json': { source: 'iana', compressible: !0 },
    'application/senml-exi': { source: 'iana' },
    'application/sensml+cbor': { source: 'iana' },
    'application/sensml+json': { source: 'iana', compressible: !0 },
    'application/sensml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['sensmlx']
    },
    'application/sensml-exi': { source: 'iana' },
    'application/sep+xml': { source: 'iana', compressible: !0 },
    'application/sep-exi': { source: 'iana' },
    'application/session-info': { source: 'iana' },
    'application/set-payment': { source: 'iana' },
    'application/set-payment-initiation': {
      source: 'iana',
      extensions: ['setpay']
    },
    'application/set-registration': { source: 'iana' },
    'application/set-registration-initiation': {
      source: 'iana',
      extensions: ['setreg']
    },
    'application/sgml': { source: 'iana' },
    'application/sgml-open-catalog': { source: 'iana' },
    'application/shf+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['shf']
    },
    'application/sieve': { source: 'iana', extensions: ['siv', 'sieve'] },
    'application/simple-filter+xml': { source: 'iana', compressible: !0 },
    'application/simple-message-summary': { source: 'iana' },
    'application/simplesymbolcontainer': { source: 'iana' },
    'application/sipc': { source: 'iana' },
    'application/slate': { source: 'iana' },
    'application/smil': { source: 'iana' },
    'application/smil+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['smi', 'smil']
    },
    'application/smpte336m': { source: 'iana' },
    'application/soap+fastinfoset': { source: 'iana' },
    'application/soap+xml': { source: 'iana', compressible: !0 },
    'application/sparql-query': { source: 'iana', extensions: ['rq'] },
    'application/sparql-results+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['srx']
    },
    'application/spirits-event+xml': { source: 'iana', compressible: !0 },
    'application/sql': { source: 'iana' },
    'application/srgs': { source: 'iana', extensions: ['gram'] },
    'application/srgs+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['grxml']
    },
    'application/sru+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['sru']
    },
    'application/ssdl+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['ssdl']
    },
    'application/ssml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['ssml']
    },
    'application/stix+json': { source: 'iana', compressible: !0 },
    'application/swid+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['swidtag']
    },
    'application/tamp-apex-update': { source: 'iana' },
    'application/tamp-apex-update-confirm': { source: 'iana' },
    'application/tamp-community-update': { source: 'iana' },
    'application/tamp-community-update-confirm': { source: 'iana' },
    'application/tamp-error': { source: 'iana' },
    'application/tamp-sequence-adjust': { source: 'iana' },
    'application/tamp-sequence-adjust-confirm': { source: 'iana' },
    'application/tamp-status-query': { source: 'iana' },
    'application/tamp-status-response': { source: 'iana' },
    'application/tamp-update': { source: 'iana' },
    'application/tamp-update-confirm': { source: 'iana' },
    'application/tar': { compressible: !0 },
    'application/taxii+json': { source: 'iana', compressible: !0 },
    'application/td+json': { source: 'iana', compressible: !0 },
    'application/tei+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['tei', 'teicorpus']
    },
    'application/tetra_isi': { source: 'iana' },
    'application/thraud+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['tfi']
    },
    'application/timestamp-query': { source: 'iana' },
    'application/timestamp-reply': { source: 'iana' },
    'application/timestamped-data': { source: 'iana', extensions: ['tsd'] },
    'application/tlsrpt+gzip': { source: 'iana' },
    'application/tlsrpt+json': { source: 'iana', compressible: !0 },
    'application/tnauthlist': { source: 'iana' },
    'application/toml': { compressible: !0, extensions: ['toml'] },
    'application/trickle-ice-sdpfrag': { source: 'iana' },
    'application/trig': { source: 'iana' },
    'application/ttml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['ttml']
    },
    'application/tve-trigger': { source: 'iana' },
    'application/tzif': { source: 'iana' },
    'application/tzif-leap': { source: 'iana' },
    'application/ubjson': { compressible: !1, extensions: ['ubj'] },
    'application/ulpfec': { source: 'iana' },
    'application/urc-grpsheet+xml': { source: 'iana', compressible: !0 },
    'application/urc-ressheet+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['rsheet']
    },
    'application/urc-targetdesc+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['td']
    },
    'application/urc-uisocketdesc+xml': { source: 'iana', compressible: !0 },
    'application/vcard+json': { source: 'iana', compressible: !0 },
    'application/vcard+xml': { source: 'iana', compressible: !0 },
    'application/vemmi': { source: 'iana' },
    'application/vividence.scriptfile': { source: 'apache' },
    'application/vnd.1000minds.decision-model+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['1km']
    },
    'application/vnd.3gpp-prose+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp-prose-pc3ch+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp-v2x-local-service-information': { source: 'iana' },
    'application/vnd.3gpp.access-transfer-events+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.bsf+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp.gmop+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp.interworking-data': { source: 'iana' },
    'application/vnd.3gpp.mc-signalling-ear': { source: 'iana' },
    'application/vnd.3gpp.mcdata-affiliation-command+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcdata-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcdata-payload': { source: 'iana' },
    'application/vnd.3gpp.mcdata-service-config+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcdata-signalling': { source: 'iana' },
    'application/vnd.3gpp.mcdata-ue-config+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcdata-user-profile+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-affiliation-command+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-floor-request+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-info+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp.mcptt-location-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-mbms-usage-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-service-config+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-signed+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-ue-config+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-ue-init-config+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcptt-user-profile+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-affiliation-command+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-affiliation-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-location-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-mbms-usage-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-service-config+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-transmission-request+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-ue-config+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mcvideo-user-profile+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.mid-call+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp.pic-bw-large': {
      source: 'iana',
      extensions: ['plb']
    },
    'application/vnd.3gpp.pic-bw-small': {
      source: 'iana',
      extensions: ['psb']
    },
    'application/vnd.3gpp.pic-bw-var': { source: 'iana', extensions: ['pvb'] },
    'application/vnd.3gpp.sms': { source: 'iana' },
    'application/vnd.3gpp.sms+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp.srvcc-ext+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp.srvcc-info+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp.state-and-event-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.3gpp.ussd+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp2.bcmcsinfo+xml': { source: 'iana', compressible: !0 },
    'application/vnd.3gpp2.sms': { source: 'iana' },
    'application/vnd.3gpp2.tcap': { source: 'iana', extensions: ['tcap'] },
    'application/vnd.3lightssoftware.imagescal': { source: 'iana' },
    'application/vnd.3m.post-it-notes': { source: 'iana', extensions: ['pwn'] },
    'application/vnd.accpac.simply.aso': {
      source: 'iana',
      extensions: ['aso']
    },
    'application/vnd.accpac.simply.imp': {
      source: 'iana',
      extensions: ['imp']
    },
    'application/vnd.acucobol': { source: 'iana', extensions: ['acu'] },
    'application/vnd.acucorp': { source: 'iana', extensions: ['atc', 'acutc'] },
    'application/vnd.adobe.air-application-installer-package+zip': {
      source: 'apache',
      compressible: !1,
      extensions: ['air']
    },
    'application/vnd.adobe.flash.movie': { source: 'iana' },
    'application/vnd.adobe.formscentral.fcdt': {
      source: 'iana',
      extensions: ['fcdt']
    },
    'application/vnd.adobe.fxp': {
      source: 'iana',
      extensions: ['fxp', 'fxpl']
    },
    'application/vnd.adobe.partial-upload': { source: 'iana' },
    'application/vnd.adobe.xdp+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xdp']
    },
    'application/vnd.adobe.xfdf': { source: 'iana', extensions: ['xfdf'] },
    'application/vnd.aether.imp': { source: 'iana' },
    'application/vnd.afpc.afplinedata': { source: 'iana' },
    'application/vnd.afpc.afplinedata-pagedef': { source: 'iana' },
    'application/vnd.afpc.cmoca-cmresource': { source: 'iana' },
    'application/vnd.afpc.foca-charset': { source: 'iana' },
    'application/vnd.afpc.foca-codedfont': { source: 'iana' },
    'application/vnd.afpc.foca-codepage': { source: 'iana' },
    'application/vnd.afpc.modca': { source: 'iana' },
    'application/vnd.afpc.modca-cmtable': { source: 'iana' },
    'application/vnd.afpc.modca-formdef': { source: 'iana' },
    'application/vnd.afpc.modca-mediummap': { source: 'iana' },
    'application/vnd.afpc.modca-objectcontainer': { source: 'iana' },
    'application/vnd.afpc.modca-overlay': { source: 'iana' },
    'application/vnd.afpc.modca-pagesegment': { source: 'iana' },
    'application/vnd.ah-barcode': { source: 'iana' },
    'application/vnd.ahead.space': { source: 'iana', extensions: ['ahead'] },
    'application/vnd.airzip.filesecure.azf': {
      source: 'iana',
      extensions: ['azf']
    },
    'application/vnd.airzip.filesecure.azs': {
      source: 'iana',
      extensions: ['azs']
    },
    'application/vnd.amadeus+json': { source: 'iana', compressible: !0 },
    'application/vnd.amazon.ebook': { source: 'apache', extensions: ['azw'] },
    'application/vnd.amazon.mobi8-ebook': { source: 'iana' },
    'application/vnd.americandynamics.acc': {
      source: 'iana',
      extensions: ['acc']
    },
    'application/vnd.amiga.ami': { source: 'iana', extensions: ['ami'] },
    'application/vnd.amundsen.maze+xml': { source: 'iana', compressible: !0 },
    'application/vnd.android.ota': { source: 'iana' },
    'application/vnd.android.package-archive': {
      source: 'apache',
      compressible: !1,
      extensions: ['apk']
    },
    'application/vnd.anki': { source: 'iana' },
    'application/vnd.anser-web-certificate-issue-initiation': {
      source: 'iana',
      extensions: ['cii']
    },
    'application/vnd.anser-web-funds-transfer-initiation': {
      source: 'apache',
      extensions: ['fti']
    },
    'application/vnd.antix.game-component': {
      source: 'iana',
      extensions: ['atx']
    },
    'application/vnd.apache.thrift.binary': { source: 'iana' },
    'application/vnd.apache.thrift.compact': { source: 'iana' },
    'application/vnd.apache.thrift.json': { source: 'iana' },
    'application/vnd.api+json': { source: 'iana', compressible: !0 },
    'application/vnd.aplextor.warrp+json': { source: 'iana', compressible: !0 },
    'application/vnd.apothekende.reservation+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.apple.installer+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mpkg']
    },
    'application/vnd.apple.keynote': { source: 'iana', extensions: ['key'] },
    'application/vnd.apple.mpegurl': { source: 'iana', extensions: ['m3u8'] },
    'application/vnd.apple.numbers': {
      source: 'iana',
      extensions: ['numbers']
    },
    'application/vnd.apple.pages': { source: 'iana', extensions: ['pages'] },
    'application/vnd.apple.pkpass': {
      compressible: !1,
      extensions: ['pkpass']
    },
    'application/vnd.arastra.swi': { source: 'iana' },
    'application/vnd.aristanetworks.swi': {
      source: 'iana',
      extensions: ['swi']
    },
    'application/vnd.artisan+json': { source: 'iana', compressible: !0 },
    'application/vnd.artsquare': { source: 'iana' },
    'application/vnd.astraea-software.iota': {
      source: 'iana',
      extensions: ['iota']
    },
    'application/vnd.audiograph': { source: 'iana', extensions: ['aep'] },
    'application/vnd.autopackage': { source: 'iana' },
    'application/vnd.avalon+json': { source: 'iana', compressible: !0 },
    'application/vnd.avistar+xml': { source: 'iana', compressible: !0 },
    'application/vnd.balsamiq.bmml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['bmml']
    },
    'application/vnd.balsamiq.bmpr': { source: 'iana' },
    'application/vnd.banana-accounting': { source: 'iana' },
    'application/vnd.bbf.usp.error': { source: 'iana' },
    'application/vnd.bbf.usp.msg': { source: 'iana' },
    'application/vnd.bbf.usp.msg+json': { source: 'iana', compressible: !0 },
    'application/vnd.bekitzur-stech+json': { source: 'iana', compressible: !0 },
    'application/vnd.bint.med-content': { source: 'iana' },
    'application/vnd.biopax.rdf+xml': { source: 'iana', compressible: !0 },
    'application/vnd.blink-idb-value-wrapper': { source: 'iana' },
    'application/vnd.blueice.multipass': {
      source: 'iana',
      extensions: ['mpm']
    },
    'application/vnd.bluetooth.ep.oob': { source: 'iana' },
    'application/vnd.bluetooth.le.oob': { source: 'iana' },
    'application/vnd.bmi': { source: 'iana', extensions: ['bmi'] },
    'application/vnd.bpf': { source: 'iana' },
    'application/vnd.bpf3': { source: 'iana' },
    'application/vnd.businessobjects': { source: 'iana', extensions: ['rep'] },
    'application/vnd.byu.uapi+json': { source: 'iana', compressible: !0 },
    'application/vnd.cab-jscript': { source: 'iana' },
    'application/vnd.canon-cpdl': { source: 'iana' },
    'application/vnd.canon-lips': { source: 'iana' },
    'application/vnd.capasystems-pg+json': { source: 'iana', compressible: !0 },
    'application/vnd.cendio.thinlinc.clientconf': { source: 'iana' },
    'application/vnd.century-systems.tcp_stream': { source: 'iana' },
    'application/vnd.chemdraw+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['cdxml']
    },
    'application/vnd.chess-pgn': { source: 'iana' },
    'application/vnd.chipnuts.karaoke-mmd': {
      source: 'iana',
      extensions: ['mmd']
    },
    'application/vnd.ciedi': { source: 'iana' },
    'application/vnd.cinderella': { source: 'iana', extensions: ['cdy'] },
    'application/vnd.cirpack.isdn-ext': { source: 'iana' },
    'application/vnd.citationstyles.style+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['csl']
    },
    'application/vnd.claymore': { source: 'iana', extensions: ['cla'] },
    'application/vnd.cloanto.rp9': { source: 'iana', extensions: ['rp9'] },
    'application/vnd.clonk.c4group': {
      source: 'iana',
      extensions: ['c4g', 'c4d', 'c4f', 'c4p', 'c4u']
    },
    'application/vnd.cluetrust.cartomobile-config': {
      source: 'iana',
      extensions: ['c11amc']
    },
    'application/vnd.cluetrust.cartomobile-config-pkg': {
      source: 'iana',
      extensions: ['c11amz']
    },
    'application/vnd.coffeescript': { source: 'iana' },
    'application/vnd.collabio.xodocuments.document': { source: 'iana' },
    'application/vnd.collabio.xodocuments.document-template': {
      source: 'iana'
    },
    'application/vnd.collabio.xodocuments.presentation': { source: 'iana' },
    'application/vnd.collabio.xodocuments.presentation-template': {
      source: 'iana'
    },
    'application/vnd.collabio.xodocuments.spreadsheet': { source: 'iana' },
    'application/vnd.collabio.xodocuments.spreadsheet-template': {
      source: 'iana'
    },
    'application/vnd.collection+json': { source: 'iana', compressible: !0 },
    'application/vnd.collection.doc+json': { source: 'iana', compressible: !0 },
    'application/vnd.collection.next+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.comicbook+zip': { source: 'iana', compressible: !1 },
    'application/vnd.comicbook-rar': { source: 'iana' },
    'application/vnd.commerce-battelle': { source: 'iana' },
    'application/vnd.commonspace': { source: 'iana', extensions: ['csp'] },
    'application/vnd.contact.cmsg': { source: 'iana', extensions: ['cdbcmsg'] },
    'application/vnd.coreos.ignition+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.cosmocaller': { source: 'iana', extensions: ['cmc'] },
    'application/vnd.crick.clicker': { source: 'iana', extensions: ['clkx'] },
    'application/vnd.crick.clicker.keyboard': {
      source: 'iana',
      extensions: ['clkk']
    },
    'application/vnd.crick.clicker.palette': {
      source: 'iana',
      extensions: ['clkp']
    },
    'application/vnd.crick.clicker.template': {
      source: 'iana',
      extensions: ['clkt']
    },
    'application/vnd.crick.clicker.wordbank': {
      source: 'iana',
      extensions: ['clkw']
    },
    'application/vnd.criticaltools.wbs+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['wbs']
    },
    'application/vnd.cryptii.pipe+json': { source: 'iana', compressible: !0 },
    'application/vnd.crypto-shade-file': { source: 'iana' },
    'application/vnd.cryptomator.encrypted': { source: 'iana' },
    'application/vnd.ctc-posml': { source: 'iana', extensions: ['pml'] },
    'application/vnd.ctct.ws+xml': { source: 'iana', compressible: !0 },
    'application/vnd.cups-pdf': { source: 'iana' },
    'application/vnd.cups-postscript': { source: 'iana' },
    'application/vnd.cups-ppd': { source: 'iana', extensions: ['ppd'] },
    'application/vnd.cups-raster': { source: 'iana' },
    'application/vnd.cups-raw': { source: 'iana' },
    'application/vnd.curl': { source: 'iana' },
    'application/vnd.curl.car': { source: 'apache', extensions: ['car'] },
    'application/vnd.curl.pcurl': { source: 'apache', extensions: ['pcurl'] },
    'application/vnd.cyan.dean.root+xml': { source: 'iana', compressible: !0 },
    'application/vnd.cybank': { source: 'iana' },
    'application/vnd.cyclonedx+json': { source: 'iana', compressible: !0 },
    'application/vnd.cyclonedx+xml': { source: 'iana', compressible: !0 },
    'application/vnd.d2l.coursepackage1p0+zip': {
      source: 'iana',
      compressible: !1
    },
    'application/vnd.d3m-dataset': { source: 'iana' },
    'application/vnd.d3m-problem': { source: 'iana' },
    'application/vnd.dart': {
      source: 'iana',
      compressible: !0,
      extensions: ['dart']
    },
    'application/vnd.data-vision.rdz': { source: 'iana', extensions: ['rdz'] },
    'application/vnd.datapackage+json': { source: 'iana', compressible: !0 },
    'application/vnd.dataresource+json': { source: 'iana', compressible: !0 },
    'application/vnd.dbf': { source: 'iana', extensions: ['dbf'] },
    'application/vnd.debian.binary-package': { source: 'iana' },
    'application/vnd.dece.data': {
      source: 'iana',
      extensions: ['uvf', 'uvvf', 'uvd', 'uvvd']
    },
    'application/vnd.dece.ttml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['uvt', 'uvvt']
    },
    'application/vnd.dece.unspecified': {
      source: 'iana',
      extensions: ['uvx', 'uvvx']
    },
    'application/vnd.dece.zip': { source: 'iana', extensions: ['uvz', 'uvvz'] },
    'application/vnd.denovo.fcselayout-link': {
      source: 'iana',
      extensions: ['fe_launch']
    },
    'application/vnd.desmume.movie': { source: 'iana' },
    'application/vnd.dir-bi.plate-dl-nosuffix': { source: 'iana' },
    'application/vnd.dm.delegation+xml': { source: 'iana', compressible: !0 },
    'application/vnd.dna': { source: 'iana', extensions: ['dna'] },
    'application/vnd.document+json': { source: 'iana', compressible: !0 },
    'application/vnd.dolby.mlp': { source: 'apache', extensions: ['mlp'] },
    'application/vnd.dolby.mobile.1': { source: 'iana' },
    'application/vnd.dolby.mobile.2': { source: 'iana' },
    'application/vnd.doremir.scorecloud-binary-document': { source: 'iana' },
    'application/vnd.dpgraph': { source: 'iana', extensions: ['dpg'] },
    'application/vnd.dreamfactory': { source: 'iana', extensions: ['dfac'] },
    'application/vnd.drive+json': { source: 'iana', compressible: !0 },
    'application/vnd.ds-keypoint': { source: 'apache', extensions: ['kpxx'] },
    'application/vnd.dtg.local': { source: 'iana' },
    'application/vnd.dtg.local.flash': { source: 'iana' },
    'application/vnd.dtg.local.html': { source: 'iana' },
    'application/vnd.dvb.ait': { source: 'iana', extensions: ['ait'] },
    'application/vnd.dvb.dvbisl+xml': { source: 'iana', compressible: !0 },
    'application/vnd.dvb.dvbj': { source: 'iana' },
    'application/vnd.dvb.esgcontainer': { source: 'iana' },
    'application/vnd.dvb.ipdcdftnotifaccess': { source: 'iana' },
    'application/vnd.dvb.ipdcesgaccess': { source: 'iana' },
    'application/vnd.dvb.ipdcesgaccess2': { source: 'iana' },
    'application/vnd.dvb.ipdcesgpdd': { source: 'iana' },
    'application/vnd.dvb.ipdcroaming': { source: 'iana' },
    'application/vnd.dvb.iptv.alfec-base': { source: 'iana' },
    'application/vnd.dvb.iptv.alfec-enhancement': { source: 'iana' },
    'application/vnd.dvb.notif-aggregate-root+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.dvb.notif-container+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.dvb.notif-generic+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.dvb.notif-ia-msglist+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.dvb.notif-ia-registration-request+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.dvb.notif-ia-registration-response+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.dvb.notif-init+xml': { source: 'iana', compressible: !0 },
    'application/vnd.dvb.pfr': { source: 'iana' },
    'application/vnd.dvb.service': { source: 'iana', extensions: ['svc'] },
    'application/vnd.dxr': { source: 'iana' },
    'application/vnd.dynageo': { source: 'iana', extensions: ['geo'] },
    'application/vnd.dzr': { source: 'iana' },
    'application/vnd.easykaraoke.cdgdownload': { source: 'iana' },
    'application/vnd.ecdis-update': { source: 'iana' },
    'application/vnd.ecip.rlp': { source: 'iana' },
    'application/vnd.ecowin.chart': { source: 'iana', extensions: ['mag'] },
    'application/vnd.ecowin.filerequest': { source: 'iana' },
    'application/vnd.ecowin.fileupdate': { source: 'iana' },
    'application/vnd.ecowin.series': { source: 'iana' },
    'application/vnd.ecowin.seriesrequest': { source: 'iana' },
    'application/vnd.ecowin.seriesupdate': { source: 'iana' },
    'application/vnd.efi.img': { source: 'iana' },
    'application/vnd.efi.iso': { source: 'iana' },
    'application/vnd.emclient.accessrequest+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.enliven': { source: 'iana', extensions: ['nml'] },
    'application/vnd.enphase.envoy': { source: 'iana' },
    'application/vnd.eprints.data+xml': { source: 'iana', compressible: !0 },
    'application/vnd.epson.esf': { source: 'iana', extensions: ['esf'] },
    'application/vnd.epson.msf': { source: 'iana', extensions: ['msf'] },
    'application/vnd.epson.quickanime': { source: 'iana', extensions: ['qam'] },
    'application/vnd.epson.salt': { source: 'iana', extensions: ['slt'] },
    'application/vnd.epson.ssf': { source: 'iana', extensions: ['ssf'] },
    'application/vnd.ericsson.quickcall': { source: 'iana' },
    'application/vnd.espass-espass+zip': { source: 'iana', compressible: !1 },
    'application/vnd.eszigno3+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['es3', 'et3']
    },
    'application/vnd.etsi.aoc+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.asic-e+zip': { source: 'iana', compressible: !1 },
    'application/vnd.etsi.asic-s+zip': { source: 'iana', compressible: !1 },
    'application/vnd.etsi.cug+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.iptvcommand+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.etsi.iptvdiscovery+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.etsi.iptvprofile+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.etsi.iptvsad-bc+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.iptvsad-cod+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.etsi.iptvsad-npvr+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.etsi.iptvservice+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.etsi.iptvsync+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.iptvueprofile+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.etsi.mcid+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.mheg5': { source: 'iana' },
    'application/vnd.etsi.overload-control-policy-dataset+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.etsi.pstn+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.sci+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.simservs+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.timestamp-token': { source: 'iana' },
    'application/vnd.etsi.tsl+xml': { source: 'iana', compressible: !0 },
    'application/vnd.etsi.tsl.der': { source: 'iana' },
    'application/vnd.eudora.data': { source: 'iana' },
    'application/vnd.evolv.ecig.profile': { source: 'iana' },
    'application/vnd.evolv.ecig.settings': { source: 'iana' },
    'application/vnd.evolv.ecig.theme': { source: 'iana' },
    'application/vnd.exstream-empower+zip': {
      source: 'iana',
      compressible: !1
    },
    'application/vnd.exstream-package': { source: 'iana' },
    'application/vnd.ezpix-album': { source: 'iana', extensions: ['ez2'] },
    'application/vnd.ezpix-package': { source: 'iana', extensions: ['ez3'] },
    'application/vnd.f-secure.mobile': { source: 'iana' },
    'application/vnd.fastcopy-disk-image': { source: 'iana' },
    'application/vnd.fdf': { source: 'iana', extensions: ['fdf'] },
    'application/vnd.fdsn.mseed': { source: 'iana', extensions: ['mseed'] },
    'application/vnd.fdsn.seed': {
      source: 'iana',
      extensions: ['seed', 'dataless']
    },
    'application/vnd.ffsns': { source: 'iana' },
    'application/vnd.ficlab.flb+zip': { source: 'iana', compressible: !1 },
    'application/vnd.filmit.zfc': { source: 'iana' },
    'application/vnd.fints': { source: 'iana' },
    'application/vnd.firemonkeys.cloudcell': { source: 'iana' },
    'application/vnd.flographit': { source: 'iana', extensions: ['gph'] },
    'application/vnd.fluxtime.clip': { source: 'iana', extensions: ['ftc'] },
    'application/vnd.font-fontforge-sfd': { source: 'iana' },
    'application/vnd.framemaker': {
      source: 'iana',
      extensions: ['fm', 'frame', 'maker', 'book']
    },
    'application/vnd.frogans.fnc': { source: 'iana', extensions: ['fnc'] },
    'application/vnd.frogans.ltf': { source: 'iana', extensions: ['ltf'] },
    'application/vnd.fsc.weblaunch': { source: 'iana', extensions: ['fsc'] },
    'application/vnd.fujitsu.oasys': { source: 'iana', extensions: ['oas'] },
    'application/vnd.fujitsu.oasys2': { source: 'iana', extensions: ['oa2'] },
    'application/vnd.fujitsu.oasys3': { source: 'iana', extensions: ['oa3'] },
    'application/vnd.fujitsu.oasysgp': { source: 'iana', extensions: ['fg5'] },
    'application/vnd.fujitsu.oasysprs': { source: 'iana', extensions: ['bh2'] },
    'application/vnd.fujixerox.art-ex': { source: 'iana' },
    'application/vnd.fujixerox.art4': { source: 'iana' },
    'application/vnd.fujixerox.ddd': { source: 'iana', extensions: ['ddd'] },
    'application/vnd.fujixerox.docuworks': {
      source: 'iana',
      extensions: ['xdw']
    },
    'application/vnd.fujixerox.docuworks.binder': {
      source: 'iana',
      extensions: ['xbd']
    },
    'application/vnd.fujixerox.docuworks.container': { source: 'iana' },
    'application/vnd.fujixerox.hbpl': { source: 'iana' },
    'application/vnd.fut-misnet': { source: 'iana' },
    'application/vnd.futoin+cbor': { source: 'iana' },
    'application/vnd.futoin+json': { source: 'iana', compressible: !0 },
    'application/vnd.fuzzysheet': { source: 'iana', extensions: ['fzs'] },
    'application/vnd.genomatix.tuxedo': { source: 'iana', extensions: ['txd'] },
    'application/vnd.gentics.grd+json': { source: 'iana', compressible: !0 },
    'application/vnd.geo+json': { source: 'iana', compressible: !0 },
    'application/vnd.geocube+xml': { source: 'iana', compressible: !0 },
    'application/vnd.geogebra.file': { source: 'iana', extensions: ['ggb'] },
    'application/vnd.geogebra.slides': { source: 'iana' },
    'application/vnd.geogebra.tool': { source: 'iana', extensions: ['ggt'] },
    'application/vnd.geometry-explorer': {
      source: 'iana',
      extensions: ['gex', 'gre']
    },
    'application/vnd.geonext': { source: 'iana', extensions: ['gxt'] },
    'application/vnd.geoplan': { source: 'iana', extensions: ['g2w'] },
    'application/vnd.geospace': { source: 'iana', extensions: ['g3w'] },
    'application/vnd.gerber': { source: 'iana' },
    'application/vnd.globalplatform.card-content-mgt': { source: 'iana' },
    'application/vnd.globalplatform.card-content-mgt-response': {
      source: 'iana'
    },
    'application/vnd.gmx': { source: 'iana', extensions: ['gmx'] },
    'application/vnd.google-apps.document': {
      compressible: !1,
      extensions: ['gdoc']
    },
    'application/vnd.google-apps.presentation': {
      compressible: !1,
      extensions: ['gslides']
    },
    'application/vnd.google-apps.spreadsheet': {
      compressible: !1,
      extensions: ['gsheet']
    },
    'application/vnd.google-earth.kml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['kml']
    },
    'application/vnd.google-earth.kmz': {
      source: 'iana',
      compressible: !1,
      extensions: ['kmz']
    },
    'application/vnd.gov.sk.e-form+xml': { source: 'iana', compressible: !0 },
    'application/vnd.gov.sk.e-form+zip': { source: 'iana', compressible: !1 },
    'application/vnd.gov.sk.xmldatacontainer+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.grafeq': { source: 'iana', extensions: ['gqf', 'gqs'] },
    'application/vnd.gridmp': { source: 'iana' },
    'application/vnd.groove-account': { source: 'iana', extensions: ['gac'] },
    'application/vnd.groove-help': { source: 'iana', extensions: ['ghf'] },
    'application/vnd.groove-identity-message': {
      source: 'iana',
      extensions: ['gim']
    },
    'application/vnd.groove-injector': { source: 'iana', extensions: ['grv'] },
    'application/vnd.groove-tool-message': {
      source: 'iana',
      extensions: ['gtm']
    },
    'application/vnd.groove-tool-template': {
      source: 'iana',
      extensions: ['tpl']
    },
    'application/vnd.groove-vcard': { source: 'iana', extensions: ['vcg'] },
    'application/vnd.hal+json': { source: 'iana', compressible: !0 },
    'application/vnd.hal+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['hal']
    },
    'application/vnd.handheld-entertainment+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['zmm']
    },
    'application/vnd.hbci': { source: 'iana', extensions: ['hbci'] },
    'application/vnd.hc+json': { source: 'iana', compressible: !0 },
    'application/vnd.hcl-bireports': { source: 'iana' },
    'application/vnd.hdt': { source: 'iana' },
    'application/vnd.heroku+json': { source: 'iana', compressible: !0 },
    'application/vnd.hhe.lesson-player': {
      source: 'iana',
      extensions: ['les']
    },
    'application/vnd.hp-hpgl': { source: 'iana', extensions: ['hpgl'] },
    'application/vnd.hp-hpid': { source: 'iana', extensions: ['hpid'] },
    'application/vnd.hp-hps': { source: 'iana', extensions: ['hps'] },
    'application/vnd.hp-jlyt': { source: 'iana', extensions: ['jlt'] },
    'application/vnd.hp-pcl': { source: 'iana', extensions: ['pcl'] },
    'application/vnd.hp-pclxl': { source: 'iana', extensions: ['pclxl'] },
    'application/vnd.httphone': { source: 'iana' },
    'application/vnd.hydrostatix.sof-data': {
      source: 'iana',
      extensions: ['sfd-hdstx']
    },
    'application/vnd.hyper+json': { source: 'iana', compressible: !0 },
    'application/vnd.hyper-item+json': { source: 'iana', compressible: !0 },
    'application/vnd.hyperdrive+json': { source: 'iana', compressible: !0 },
    'application/vnd.hzn-3d-crossword': { source: 'iana' },
    'application/vnd.ibm.afplinedata': { source: 'iana' },
    'application/vnd.ibm.electronic-media': { source: 'iana' },
    'application/vnd.ibm.minipay': { source: 'iana', extensions: ['mpy'] },
    'application/vnd.ibm.modcap': {
      source: 'iana',
      extensions: ['afp', 'listafp', 'list3820']
    },
    'application/vnd.ibm.rights-management': {
      source: 'iana',
      extensions: ['irm']
    },
    'application/vnd.ibm.secure-container': {
      source: 'iana',
      extensions: ['sc']
    },
    'application/vnd.iccprofile': {
      source: 'iana',
      extensions: ['icc', 'icm']
    },
    'application/vnd.ieee.1905': { source: 'iana' },
    'application/vnd.igloader': { source: 'iana', extensions: ['igl'] },
    'application/vnd.imagemeter.folder+zip': {
      source: 'iana',
      compressible: !1
    },
    'application/vnd.imagemeter.image+zip': {
      source: 'iana',
      compressible: !1
    },
    'application/vnd.immervision-ivp': { source: 'iana', extensions: ['ivp'] },
    'application/vnd.immervision-ivu': { source: 'iana', extensions: ['ivu'] },
    'application/vnd.ims.imsccv1p1': { source: 'iana' },
    'application/vnd.ims.imsccv1p2': { source: 'iana' },
    'application/vnd.ims.imsccv1p3': { source: 'iana' },
    'application/vnd.ims.lis.v2.result+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ims.lti.v2.toolconsumerprofile+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ims.lti.v2.toolproxy+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ims.lti.v2.toolproxy.id+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ims.lti.v2.toolsettings+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ims.lti.v2.toolsettings.simple+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.informedcontrol.rms+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.informix-visionary': { source: 'iana' },
    'application/vnd.infotech.project': { source: 'iana' },
    'application/vnd.infotech.project+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.innopath.wamp.notification': { source: 'iana' },
    'application/vnd.insors.igm': { source: 'iana', extensions: ['igm'] },
    'application/vnd.intercon.formnet': {
      source: 'iana',
      extensions: ['xpw', 'xpx']
    },
    'application/vnd.intergeo': { source: 'iana', extensions: ['i2g'] },
    'application/vnd.intertrust.digibox': { source: 'iana' },
    'application/vnd.intertrust.nncp': { source: 'iana' },
    'application/vnd.intu.qbo': { source: 'iana', extensions: ['qbo'] },
    'application/vnd.intu.qfx': { source: 'iana', extensions: ['qfx'] },
    'application/vnd.iptc.g2.catalogitem+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.iptc.g2.conceptitem+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.iptc.g2.knowledgeitem+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.iptc.g2.newsitem+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.iptc.g2.newsmessage+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.iptc.g2.packageitem+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.iptc.g2.planningitem+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ipunplugged.rcprofile': {
      source: 'iana',
      extensions: ['rcprofile']
    },
    'application/vnd.irepository.package+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['irp']
    },
    'application/vnd.is-xpr': { source: 'iana', extensions: ['xpr'] },
    'application/vnd.isac.fcs': { source: 'iana', extensions: ['fcs'] },
    'application/vnd.iso11783-10+zip': { source: 'iana', compressible: !1 },
    'application/vnd.jam': { source: 'iana', extensions: ['jam'] },
    'application/vnd.japannet-directory-service': { source: 'iana' },
    'application/vnd.japannet-jpnstore-wakeup': { source: 'iana' },
    'application/vnd.japannet-payment-wakeup': { source: 'iana' },
    'application/vnd.japannet-registration': { source: 'iana' },
    'application/vnd.japannet-registration-wakeup': { source: 'iana' },
    'application/vnd.japannet-setstore-wakeup': { source: 'iana' },
    'application/vnd.japannet-verification': { source: 'iana' },
    'application/vnd.japannet-verification-wakeup': { source: 'iana' },
    'application/vnd.jcp.javame.midlet-rms': {
      source: 'iana',
      extensions: ['rms']
    },
    'application/vnd.jisp': { source: 'iana', extensions: ['jisp'] },
    'application/vnd.joost.joda-archive': {
      source: 'iana',
      extensions: ['joda']
    },
    'application/vnd.jsk.isdn-ngn': { source: 'iana' },
    'application/vnd.kahootz': { source: 'iana', extensions: ['ktz', 'ktr'] },
    'application/vnd.kde.karbon': { source: 'iana', extensions: ['karbon'] },
    'application/vnd.kde.kchart': { source: 'iana', extensions: ['chrt'] },
    'application/vnd.kde.kformula': { source: 'iana', extensions: ['kfo'] },
    'application/vnd.kde.kivio': { source: 'iana', extensions: ['flw'] },
    'application/vnd.kde.kontour': { source: 'iana', extensions: ['kon'] },
    'application/vnd.kde.kpresenter': {
      source: 'iana',
      extensions: ['kpr', 'kpt']
    },
    'application/vnd.kde.kspread': { source: 'iana', extensions: ['ksp'] },
    'application/vnd.kde.kword': { source: 'iana', extensions: ['kwd', 'kwt'] },
    'application/vnd.kenameaapp': { source: 'iana', extensions: ['htke'] },
    'application/vnd.kidspiration': { source: 'iana', extensions: ['kia'] },
    'application/vnd.kinar': { source: 'iana', extensions: ['kne', 'knp'] },
    'application/vnd.koan': {
      source: 'iana',
      extensions: ['skp', 'skd', 'skt', 'skm']
    },
    'application/vnd.kodak-descriptor': { source: 'iana', extensions: ['sse'] },
    'application/vnd.las': { source: 'iana' },
    'application/vnd.las.las+json': { source: 'iana', compressible: !0 },
    'application/vnd.las.las+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['lasxml']
    },
    'application/vnd.laszip': { source: 'iana' },
    'application/vnd.leap+json': { source: 'iana', compressible: !0 },
    'application/vnd.liberty-request+xml': { source: 'iana', compressible: !0 },
    'application/vnd.llamagraphics.life-balance.desktop': {
      source: 'iana',
      extensions: ['lbd']
    },
    'application/vnd.llamagraphics.life-balance.exchange+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['lbe']
    },
    'application/vnd.logipipe.circuit+zip': {
      source: 'iana',
      compressible: !1
    },
    'application/vnd.loom': { source: 'iana' },
    'application/vnd.lotus-1-2-3': { source: 'iana', extensions: ['123'] },
    'application/vnd.lotus-approach': { source: 'iana', extensions: ['apr'] },
    'application/vnd.lotus-freelance': { source: 'iana', extensions: ['pre'] },
    'application/vnd.lotus-notes': { source: 'iana', extensions: ['nsf'] },
    'application/vnd.lotus-organizer': { source: 'iana', extensions: ['org'] },
    'application/vnd.lotus-screencam': { source: 'iana', extensions: ['scm'] },
    'application/vnd.lotus-wordpro': { source: 'iana', extensions: ['lwp'] },
    'application/vnd.macports.portpkg': {
      source: 'iana',
      extensions: ['portpkg']
    },
    'application/vnd.mapbox-vector-tile': { source: 'iana' },
    'application/vnd.marlin.drm.actiontoken+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.marlin.drm.conftoken+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.marlin.drm.license+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.marlin.drm.mdcf': { source: 'iana' },
    'application/vnd.mason+json': { source: 'iana', compressible: !0 },
    'application/vnd.maxmind.maxmind-db': { source: 'iana' },
    'application/vnd.mcd': { source: 'iana', extensions: ['mcd'] },
    'application/vnd.medcalcdata': { source: 'iana', extensions: ['mc1'] },
    'application/vnd.mediastation.cdkey': {
      source: 'iana',
      extensions: ['cdkey']
    },
    'application/vnd.meridian-slingshot': { source: 'iana' },
    'application/vnd.mfer': { source: 'iana', extensions: ['mwf'] },
    'application/vnd.mfmp': { source: 'iana', extensions: ['mfm'] },
    'application/vnd.micro+json': { source: 'iana', compressible: !0 },
    'application/vnd.micrografx.flo': { source: 'iana', extensions: ['flo'] },
    'application/vnd.micrografx.igx': { source: 'iana', extensions: ['igx'] },
    'application/vnd.microsoft.portable-executable': { source: 'iana' },
    'application/vnd.microsoft.windows.thumbnail-cache': { source: 'iana' },
    'application/vnd.miele+json': { source: 'iana', compressible: !0 },
    'application/vnd.mif': { source: 'iana', extensions: ['mif'] },
    'application/vnd.minisoft-hp3000-save': { source: 'iana' },
    'application/vnd.mitsubishi.misty-guard.trustweb': { source: 'iana' },
    'application/vnd.mobius.daf': { source: 'iana', extensions: ['daf'] },
    'application/vnd.mobius.dis': { source: 'iana', extensions: ['dis'] },
    'application/vnd.mobius.mbk': { source: 'iana', extensions: ['mbk'] },
    'application/vnd.mobius.mqy': { source: 'iana', extensions: ['mqy'] },
    'application/vnd.mobius.msl': { source: 'iana', extensions: ['msl'] },
    'application/vnd.mobius.plc': { source: 'iana', extensions: ['plc'] },
    'application/vnd.mobius.txf': { source: 'iana', extensions: ['txf'] },
    'application/vnd.mophun.application': {
      source: 'iana',
      extensions: ['mpn']
    },
    'application/vnd.mophun.certificate': {
      source: 'iana',
      extensions: ['mpc']
    },
    'application/vnd.motorola.flexsuite': { source: 'iana' },
    'application/vnd.motorola.flexsuite.adsi': { source: 'iana' },
    'application/vnd.motorola.flexsuite.fis': { source: 'iana' },
    'application/vnd.motorola.flexsuite.gotap': { source: 'iana' },
    'application/vnd.motorola.flexsuite.kmr': { source: 'iana' },
    'application/vnd.motorola.flexsuite.ttc': { source: 'iana' },
    'application/vnd.motorola.flexsuite.wem': { source: 'iana' },
    'application/vnd.motorola.iprm': { source: 'iana' },
    'application/vnd.mozilla.xul+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xul']
    },
    'application/vnd.ms-3mfdocument': { source: 'iana' },
    'application/vnd.ms-artgalry': { source: 'iana', extensions: ['cil'] },
    'application/vnd.ms-asf': { source: 'iana' },
    'application/vnd.ms-cab-compressed': {
      source: 'iana',
      extensions: ['cab']
    },
    'application/vnd.ms-color.iccprofile': { source: 'apache' },
    'application/vnd.ms-excel': {
      source: 'iana',
      compressible: !1,
      extensions: ['xls', 'xlm', 'xla', 'xlc', 'xlt', 'xlw']
    },
    'application/vnd.ms-excel.addin.macroenabled.12': {
      source: 'iana',
      extensions: ['xlam']
    },
    'application/vnd.ms-excel.sheet.binary.macroenabled.12': {
      source: 'iana',
      extensions: ['xlsb']
    },
    'application/vnd.ms-excel.sheet.macroenabled.12': {
      source: 'iana',
      extensions: ['xlsm']
    },
    'application/vnd.ms-excel.template.macroenabled.12': {
      source: 'iana',
      extensions: ['xltm']
    },
    'application/vnd.ms-fontobject': {
      source: 'iana',
      compressible: !0,
      extensions: ['eot']
    },
    'application/vnd.ms-htmlhelp': { source: 'iana', extensions: ['chm'] },
    'application/vnd.ms-ims': { source: 'iana', extensions: ['ims'] },
    'application/vnd.ms-lrm': { source: 'iana', extensions: ['lrm'] },
    'application/vnd.ms-office.activex+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ms-officetheme': { source: 'iana', extensions: ['thmx'] },
    'application/vnd.ms-opentype': { source: 'apache', compressible: !0 },
    'application/vnd.ms-outlook': { compressible: !1, extensions: ['msg'] },
    'application/vnd.ms-package.obfuscated-opentype': { source: 'apache' },
    'application/vnd.ms-pki.seccat': { source: 'apache', extensions: ['cat'] },
    'application/vnd.ms-pki.stl': { source: 'apache', extensions: ['stl'] },
    'application/vnd.ms-playready.initiator+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ms-powerpoint': {
      source: 'iana',
      compressible: !1,
      extensions: ['ppt', 'pps', 'pot']
    },
    'application/vnd.ms-powerpoint.addin.macroenabled.12': {
      source: 'iana',
      extensions: ['ppam']
    },
    'application/vnd.ms-powerpoint.presentation.macroenabled.12': {
      source: 'iana',
      extensions: ['pptm']
    },
    'application/vnd.ms-powerpoint.slide.macroenabled.12': {
      source: 'iana',
      extensions: ['sldm']
    },
    'application/vnd.ms-powerpoint.slideshow.macroenabled.12': {
      source: 'iana',
      extensions: ['ppsm']
    },
    'application/vnd.ms-powerpoint.template.macroenabled.12': {
      source: 'iana',
      extensions: ['potm']
    },
    'application/vnd.ms-printdevicecapabilities+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ms-printing.printticket+xml': {
      source: 'apache',
      compressible: !0
    },
    'application/vnd.ms-printschematicket+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.ms-project': {
      source: 'iana',
      extensions: ['mpp', 'mpt']
    },
    'application/vnd.ms-tnef': { source: 'iana' },
    'application/vnd.ms-windows.devicepairing': { source: 'iana' },
    'application/vnd.ms-windows.nwprinting.oob': { source: 'iana' },
    'application/vnd.ms-windows.printerpairing': { source: 'iana' },
    'application/vnd.ms-windows.wsd.oob': { source: 'iana' },
    'application/vnd.ms-wmdrm.lic-chlg-req': { source: 'iana' },
    'application/vnd.ms-wmdrm.lic-resp': { source: 'iana' },
    'application/vnd.ms-wmdrm.meter-chlg-req': { source: 'iana' },
    'application/vnd.ms-wmdrm.meter-resp': { source: 'iana' },
    'application/vnd.ms-word.document.macroenabled.12': {
      source: 'iana',
      extensions: ['docm']
    },
    'application/vnd.ms-word.template.macroenabled.12': {
      source: 'iana',
      extensions: ['dotm']
    },
    'application/vnd.ms-works': {
      source: 'iana',
      extensions: ['wps', 'wks', 'wcm', 'wdb']
    },
    'application/vnd.ms-wpl': { source: 'iana', extensions: ['wpl'] },
    'application/vnd.ms-xpsdocument': {
      source: 'iana',
      compressible: !1,
      extensions: ['xps']
    },
    'application/vnd.msa-disk-image': { source: 'iana' },
    'application/vnd.mseq': { source: 'iana', extensions: ['mseq'] },
    'application/vnd.msign': { source: 'iana' },
    'application/vnd.multiad.creator': { source: 'iana' },
    'application/vnd.multiad.creator.cif': { source: 'iana' },
    'application/vnd.music-niff': { source: 'iana' },
    'application/vnd.musician': { source: 'iana', extensions: ['mus'] },
    'application/vnd.muvee.style': { source: 'iana', extensions: ['msty'] },
    'application/vnd.mynfc': { source: 'iana', extensions: ['taglet'] },
    'application/vnd.ncd.control': { source: 'iana' },
    'application/vnd.ncd.reference': { source: 'iana' },
    'application/vnd.nearst.inv+json': { source: 'iana', compressible: !0 },
    'application/vnd.nebumind.line': { source: 'iana' },
    'application/vnd.nervana': { source: 'iana' },
    'application/vnd.netfpx': { source: 'iana' },
    'application/vnd.neurolanguage.nlu': {
      source: 'iana',
      extensions: ['nlu']
    },
    'application/vnd.nimn': { source: 'iana' },
    'application/vnd.nintendo.nitro.rom': { source: 'iana' },
    'application/vnd.nintendo.snes.rom': { source: 'iana' },
    'application/vnd.nitf': { source: 'iana', extensions: ['ntf', 'nitf'] },
    'application/vnd.noblenet-directory': {
      source: 'iana',
      extensions: ['nnd']
    },
    'application/vnd.noblenet-sealer': { source: 'iana', extensions: ['nns'] },
    'application/vnd.noblenet-web': { source: 'iana', extensions: ['nnw'] },
    'application/vnd.nokia.catalogs': { source: 'iana' },
    'application/vnd.nokia.conml+wbxml': { source: 'iana' },
    'application/vnd.nokia.conml+xml': { source: 'iana', compressible: !0 },
    'application/vnd.nokia.iptv.config+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.nokia.isds-radio-presets': { source: 'iana' },
    'application/vnd.nokia.landmark+wbxml': { source: 'iana' },
    'application/vnd.nokia.landmark+xml': { source: 'iana', compressible: !0 },
    'application/vnd.nokia.landmarkcollection+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.nokia.n-gage.ac+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['ac']
    },
    'application/vnd.nokia.n-gage.data': {
      source: 'iana',
      extensions: ['ngdat']
    },
    'application/vnd.nokia.n-gage.symbian.install': {
      source: 'iana',
      extensions: ['n-gage']
    },
    'application/vnd.nokia.ncd': { source: 'iana' },
    'application/vnd.nokia.pcd+wbxml': { source: 'iana' },
    'application/vnd.nokia.pcd+xml': { source: 'iana', compressible: !0 },
    'application/vnd.nokia.radio-preset': {
      source: 'iana',
      extensions: ['rpst']
    },
    'application/vnd.nokia.radio-presets': {
      source: 'iana',
      extensions: ['rpss']
    },
    'application/vnd.novadigm.edm': { source: 'iana', extensions: ['edm'] },
    'application/vnd.novadigm.edx': { source: 'iana', extensions: ['edx'] },
    'application/vnd.novadigm.ext': { source: 'iana', extensions: ['ext'] },
    'application/vnd.ntt-local.content-share': { source: 'iana' },
    'application/vnd.ntt-local.file-transfer': { source: 'iana' },
    'application/vnd.ntt-local.ogw_remote-access': { source: 'iana' },
    'application/vnd.ntt-local.sip-ta_remote': { source: 'iana' },
    'application/vnd.ntt-local.sip-ta_tcp_stream': { source: 'iana' },
    'application/vnd.oasis.opendocument.chart': {
      source: 'iana',
      extensions: ['odc']
    },
    'application/vnd.oasis.opendocument.chart-template': {
      source: 'iana',
      extensions: ['otc']
    },
    'application/vnd.oasis.opendocument.database': {
      source: 'iana',
      extensions: ['odb']
    },
    'application/vnd.oasis.opendocument.formula': {
      source: 'iana',
      extensions: ['odf']
    },
    'application/vnd.oasis.opendocument.formula-template': {
      source: 'iana',
      extensions: ['odft']
    },
    'application/vnd.oasis.opendocument.graphics': {
      source: 'iana',
      compressible: !1,
      extensions: ['odg']
    },
    'application/vnd.oasis.opendocument.graphics-template': {
      source: 'iana',
      extensions: ['otg']
    },
    'application/vnd.oasis.opendocument.image': {
      source: 'iana',
      extensions: ['odi']
    },
    'application/vnd.oasis.opendocument.image-template': {
      source: 'iana',
      extensions: ['oti']
    },
    'application/vnd.oasis.opendocument.presentation': {
      source: 'iana',
      compressible: !1,
      extensions: ['odp']
    },
    'application/vnd.oasis.opendocument.presentation-template': {
      source: 'iana',
      extensions: ['otp']
    },
    'application/vnd.oasis.opendocument.spreadsheet': {
      source: 'iana',
      compressible: !1,
      extensions: ['ods']
    },
    'application/vnd.oasis.opendocument.spreadsheet-template': {
      source: 'iana',
      extensions: ['ots']
    },
    'application/vnd.oasis.opendocument.text': {
      source: 'iana',
      compressible: !1,
      extensions: ['odt']
    },
    'application/vnd.oasis.opendocument.text-master': {
      source: 'iana',
      extensions: ['odm']
    },
    'application/vnd.oasis.opendocument.text-template': {
      source: 'iana',
      extensions: ['ott']
    },
    'application/vnd.oasis.opendocument.text-web': {
      source: 'iana',
      extensions: ['oth']
    },
    'application/vnd.obn': { source: 'iana' },
    'application/vnd.ocf+cbor': { source: 'iana' },
    'application/vnd.oci.image.manifest.v1+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oftn.l10n+json': { source: 'iana', compressible: !0 },
    'application/vnd.oipf.contentaccessdownload+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oipf.contentaccessstreaming+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oipf.cspg-hexbinary': { source: 'iana' },
    'application/vnd.oipf.dae.svg+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oipf.dae.xhtml+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oipf.mippvcontrolmessage+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oipf.pae.gem': { source: 'iana' },
    'application/vnd.oipf.spdiscovery+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oipf.spdlist+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oipf.ueprofile+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oipf.userprofile+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.olpc-sugar': { source: 'iana', extensions: ['xo'] },
    'application/vnd.oma-scws-config': { source: 'iana' },
    'application/vnd.oma-scws-http-request': { source: 'iana' },
    'application/vnd.oma-scws-http-response': { source: 'iana' },
    'application/vnd.oma.bcast.associated-procedure-parameter+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.bcast.drm-trigger+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.bcast.imd+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oma.bcast.ltkm': { source: 'iana' },
    'application/vnd.oma.bcast.notification+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.bcast.provisioningtrigger': { source: 'iana' },
    'application/vnd.oma.bcast.sgboot': { source: 'iana' },
    'application/vnd.oma.bcast.sgdd+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oma.bcast.sgdu': { source: 'iana' },
    'application/vnd.oma.bcast.simple-symbol-container': { source: 'iana' },
    'application/vnd.oma.bcast.smartcard-trigger+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.bcast.sprov+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oma.bcast.stkm': { source: 'iana' },
    'application/vnd.oma.cab-address-book+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.cab-feature-handler+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.cab-pcc+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oma.cab-subs-invite+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.cab-user-prefs+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.dcd': { source: 'iana' },
    'application/vnd.oma.dcdc': { source: 'iana' },
    'application/vnd.oma.dd2+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['dd2']
    },
    'application/vnd.oma.drm.risd+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oma.group-usage-list+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.lwm2m+cbor': { source: 'iana' },
    'application/vnd.oma.lwm2m+json': { source: 'iana', compressible: !0 },
    'application/vnd.oma.lwm2m+tlv': { source: 'iana' },
    'application/vnd.oma.pal+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oma.poc.detailed-progress-report+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.poc.final-report+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.poc.groups+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oma.poc.invocation-descriptor+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.poc.optimized-progress-report+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.push': { source: 'iana' },
    'application/vnd.oma.scidm.messages+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oma.xcap-directory+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.omads-email+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/vnd.omads-file+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/vnd.omads-folder+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/vnd.omaloc-supl-init': { source: 'iana' },
    'application/vnd.onepager': { source: 'iana' },
    'application/vnd.onepagertamp': { source: 'iana' },
    'application/vnd.onepagertamx': { source: 'iana' },
    'application/vnd.onepagertat': { source: 'iana' },
    'application/vnd.onepagertatp': { source: 'iana' },
    'application/vnd.onepagertatx': { source: 'iana' },
    'application/vnd.openblox.game+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['obgx']
    },
    'application/vnd.openblox.game-binary': { source: 'iana' },
    'application/vnd.openeye.oeb': { source: 'iana' },
    'application/vnd.openofficeorg.extension': {
      source: 'apache',
      extensions: ['oxt']
    },
    'application/vnd.openstreetmap.data+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['osm']
    },
    'application/vnd.openxmlformats-officedocument.custom-properties+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.customxmlproperties+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.drawing+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.drawingml.chart+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.extended-properties+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.comments+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.presentation': {
      source: 'iana',
      compressible: !1,
      extensions: ['pptx']
    },
    'application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.presprops+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.slide': {
      source: 'iana',
      extensions: ['sldx']
    },
    'application/vnd.openxmlformats-officedocument.presentationml.slide+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.slideshow': {
      source: 'iana',
      extensions: ['ppsx']
    },
    'application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.tags+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.template': {
      source: 'iana',
      extensions: ['potx']
    },
    'application/vnd.openxmlformats-officedocument.presentationml.template.main+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
      source: 'iana',
      compressible: !1,
      extensions: ['xlsx']
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.template': {
      source: 'iana',
      extensions: ['xltx']
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.theme+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.themeoverride+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.vmldrawing': {
      source: 'iana'
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': {
      source: 'iana',
      compressible: !1,
      extensions: ['docx']
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.template': {
      source: 'iana',
      extensions: ['dotx']
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-package.core-properties+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.openxmlformats-package.relationships+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.oracle.resource+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.orange.indata': { source: 'iana' },
    'application/vnd.osa.netdeploy': { source: 'iana' },
    'application/vnd.osgeo.mapguide.package': {
      source: 'iana',
      extensions: ['mgp']
    },
    'application/vnd.osgi.bundle': { source: 'iana' },
    'application/vnd.osgi.dp': { source: 'iana', extensions: ['dp'] },
    'application/vnd.osgi.subsystem': { source: 'iana', extensions: ['esa'] },
    'application/vnd.otps.ct-kip+xml': { source: 'iana', compressible: !0 },
    'application/vnd.oxli.countgraph': { source: 'iana' },
    'application/vnd.pagerduty+json': { source: 'iana', compressible: !0 },
    'application/vnd.palm': {
      source: 'iana',
      extensions: ['pdb', 'pqa', 'oprc']
    },
    'application/vnd.panoply': { source: 'iana' },
    'application/vnd.paos.xml': { source: 'iana' },
    'application/vnd.patentdive': { source: 'iana' },
    'application/vnd.patientecommsdoc': { source: 'iana' },
    'application/vnd.pawaafile': { source: 'iana', extensions: ['paw'] },
    'application/vnd.pcos': { source: 'iana' },
    'application/vnd.pg.format': { source: 'iana', extensions: ['str'] },
    'application/vnd.pg.osasli': { source: 'iana', extensions: ['ei6'] },
    'application/vnd.piaccess.application-licence': { source: 'iana' },
    'application/vnd.picsel': { source: 'iana', extensions: ['efif'] },
    'application/vnd.pmi.widget': { source: 'iana', extensions: ['wg'] },
    'application/vnd.poc.group-advertisement+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.pocketlearn': { source: 'iana', extensions: ['plf'] },
    'application/vnd.powerbuilder6': { source: 'iana', extensions: ['pbd'] },
    'application/vnd.powerbuilder6-s': { source: 'iana' },
    'application/vnd.powerbuilder7': { source: 'iana' },
    'application/vnd.powerbuilder7-s': { source: 'iana' },
    'application/vnd.powerbuilder75': { source: 'iana' },
    'application/vnd.powerbuilder75-s': { source: 'iana' },
    'application/vnd.preminet': { source: 'iana' },
    'application/vnd.previewsystems.box': {
      source: 'iana',
      extensions: ['box']
    },
    'application/vnd.proteus.magazine': { source: 'iana', extensions: ['mgz'] },
    'application/vnd.psfs': { source: 'iana' },
    'application/vnd.publishare-delta-tree': {
      source: 'iana',
      extensions: ['qps']
    },
    'application/vnd.pvi.ptid1': { source: 'iana', extensions: ['ptid'] },
    'application/vnd.pwg-multiplexed': { source: 'iana' },
    'application/vnd.pwg-xhtml-print+xml': { source: 'iana', compressible: !0 },
    'application/vnd.qualcomm.brew-app-res': { source: 'iana' },
    'application/vnd.quarantainenet': { source: 'iana' },
    'application/vnd.quark.quarkxpress': {
      source: 'iana',
      extensions: ['qxd', 'qxt', 'qwd', 'qwt', 'qxl', 'qxb']
    },
    'application/vnd.quobject-quoxdocument': { source: 'iana' },
    'application/vnd.radisys.moml+xml': { source: 'iana', compressible: !0 },
    'application/vnd.radisys.msml+xml': { source: 'iana', compressible: !0 },
    'application/vnd.radisys.msml-audit+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-audit-conf+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-audit-conn+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-audit-dialog+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-audit-stream+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-conf+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-dialog+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-dialog-base+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-dialog-fax-detect+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-dialog-fax-sendrecv+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-dialog-group+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-dialog-speech+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.radisys.msml-dialog-transform+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.rainstor.data': { source: 'iana' },
    'application/vnd.rapid': { source: 'iana' },
    'application/vnd.rar': { source: 'iana', extensions: ['rar'] },
    'application/vnd.realvnc.bed': { source: 'iana', extensions: ['bed'] },
    'application/vnd.recordare.musicxml': {
      source: 'iana',
      extensions: ['mxl']
    },
    'application/vnd.recordare.musicxml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['musicxml']
    },
    'application/vnd.renlearn.rlprint': { source: 'iana' },
    'application/vnd.restful+json': { source: 'iana', compressible: !0 },
    'application/vnd.rig.cryptonote': {
      source: 'iana',
      extensions: ['cryptonote']
    },
    'application/vnd.rim.cod': { source: 'apache', extensions: ['cod'] },
    'application/vnd.rn-realmedia': { source: 'apache', extensions: ['rm'] },
    'application/vnd.rn-realmedia-vbr': {
      source: 'apache',
      extensions: ['rmvb']
    },
    'application/vnd.route66.link66+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['link66']
    },
    'application/vnd.rs-274x': { source: 'iana' },
    'application/vnd.ruckus.download': { source: 'iana' },
    'application/vnd.s3sms': { source: 'iana' },
    'application/vnd.sailingtracker.track': {
      source: 'iana',
      extensions: ['st']
    },
    'application/vnd.sar': { source: 'iana' },
    'application/vnd.sbm.cid': { source: 'iana' },
    'application/vnd.sbm.mid2': { source: 'iana' },
    'application/vnd.scribus': { source: 'iana' },
    'application/vnd.sealed.3df': { source: 'iana' },
    'application/vnd.sealed.csf': { source: 'iana' },
    'application/vnd.sealed.doc': { source: 'iana' },
    'application/vnd.sealed.eml': { source: 'iana' },
    'application/vnd.sealed.mht': { source: 'iana' },
    'application/vnd.sealed.net': { source: 'iana' },
    'application/vnd.sealed.ppt': { source: 'iana' },
    'application/vnd.sealed.tiff': { source: 'iana' },
    'application/vnd.sealed.xls': { source: 'iana' },
    'application/vnd.sealedmedia.softseal.html': { source: 'iana' },
    'application/vnd.sealedmedia.softseal.pdf': { source: 'iana' },
    'application/vnd.seemail': { source: 'iana', extensions: ['see'] },
    'application/vnd.seis+json': { source: 'iana', compressible: !0 },
    'application/vnd.sema': { source: 'iana', extensions: ['sema'] },
    'application/vnd.semd': { source: 'iana', extensions: ['semd'] },
    'application/vnd.semf': { source: 'iana', extensions: ['semf'] },
    'application/vnd.shade-save-file': { source: 'iana' },
    'application/vnd.shana.informed.formdata': {
      source: 'iana',
      extensions: ['ifm']
    },
    'application/vnd.shana.informed.formtemplate': {
      source: 'iana',
      extensions: ['itp']
    },
    'application/vnd.shana.informed.interchange': {
      source: 'iana',
      extensions: ['iif']
    },
    'application/vnd.shana.informed.package': {
      source: 'iana',
      extensions: ['ipk']
    },
    'application/vnd.shootproof+json': { source: 'iana', compressible: !0 },
    'application/vnd.shopkick+json': { source: 'iana', compressible: !0 },
    'application/vnd.shp': { source: 'iana' },
    'application/vnd.shx': { source: 'iana' },
    'application/vnd.sigrok.session': { source: 'iana' },
    'application/vnd.simtech-mindmapper': {
      source: 'iana',
      extensions: ['twd', 'twds']
    },
    'application/vnd.siren+json': { source: 'iana', compressible: !0 },
    'application/vnd.smaf': { source: 'iana', extensions: ['mmf'] },
    'application/vnd.smart.notebook': { source: 'iana' },
    'application/vnd.smart.teacher': {
      source: 'iana',
      extensions: ['teacher']
    },
    'application/vnd.snesdev-page-table': { source: 'iana' },
    'application/vnd.software602.filler.form+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['fo']
    },
    'application/vnd.software602.filler.form-xml-zip': { source: 'iana' },
    'application/vnd.solent.sdkm+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['sdkm', 'sdkd']
    },
    'application/vnd.spotfire.dxp': { source: 'iana', extensions: ['dxp'] },
    'application/vnd.spotfire.sfs': { source: 'iana', extensions: ['sfs'] },
    'application/vnd.sqlite3': { source: 'iana' },
    'application/vnd.sss-cod': { source: 'iana' },
    'application/vnd.sss-dtf': { source: 'iana' },
    'application/vnd.sss-ntf': { source: 'iana' },
    'application/vnd.stardivision.calc': {
      source: 'apache',
      extensions: ['sdc']
    },
    'application/vnd.stardivision.draw': {
      source: 'apache',
      extensions: ['sda']
    },
    'application/vnd.stardivision.impress': {
      source: 'apache',
      extensions: ['sdd']
    },
    'application/vnd.stardivision.math': {
      source: 'apache',
      extensions: ['smf']
    },
    'application/vnd.stardivision.writer': {
      source: 'apache',
      extensions: ['sdw', 'vor']
    },
    'application/vnd.stardivision.writer-global': {
      source: 'apache',
      extensions: ['sgl']
    },
    'application/vnd.stepmania.package': {
      source: 'iana',
      extensions: ['smzip']
    },
    'application/vnd.stepmania.stepchart': {
      source: 'iana',
      extensions: ['sm']
    },
    'application/vnd.street-stream': { source: 'iana' },
    'application/vnd.sun.wadl+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['wadl']
    },
    'application/vnd.sun.xml.calc': { source: 'apache', extensions: ['sxc'] },
    'application/vnd.sun.xml.calc.template': {
      source: 'apache',
      extensions: ['stc']
    },
    'application/vnd.sun.xml.draw': { source: 'apache', extensions: ['sxd'] },
    'application/vnd.sun.xml.draw.template': {
      source: 'apache',
      extensions: ['std']
    },
    'application/vnd.sun.xml.impress': {
      source: 'apache',
      extensions: ['sxi']
    },
    'application/vnd.sun.xml.impress.template': {
      source: 'apache',
      extensions: ['sti']
    },
    'application/vnd.sun.xml.math': { source: 'apache', extensions: ['sxm'] },
    'application/vnd.sun.xml.writer': { source: 'apache', extensions: ['sxw'] },
    'application/vnd.sun.xml.writer.global': {
      source: 'apache',
      extensions: ['sxg']
    },
    'application/vnd.sun.xml.writer.template': {
      source: 'apache',
      extensions: ['stw']
    },
    'application/vnd.sus-calendar': {
      source: 'iana',
      extensions: ['sus', 'susp']
    },
    'application/vnd.svd': { source: 'iana', extensions: ['svd'] },
    'application/vnd.swiftview-ics': { source: 'iana' },
    'application/vnd.sycle+xml': { source: 'iana', compressible: !0 },
    'application/vnd.symbian.install': {
      source: 'apache',
      extensions: ['sis', 'sisx']
    },
    'application/vnd.syncml+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['xsm']
    },
    'application/vnd.syncml.dm+wbxml': {
      source: 'iana',
      charset: 'UTF-8',
      extensions: ['bdm']
    },
    'application/vnd.syncml.dm+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['xdm']
    },
    'application/vnd.syncml.dm.notification': { source: 'iana' },
    'application/vnd.syncml.dmddf+wbxml': { source: 'iana' },
    'application/vnd.syncml.dmddf+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['ddf']
    },
    'application/vnd.syncml.dmtnds+wbxml': { source: 'iana' },
    'application/vnd.syncml.dmtnds+xml': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0
    },
    'application/vnd.syncml.ds.notification': { source: 'iana' },
    'application/vnd.tableschema+json': { source: 'iana', compressible: !0 },
    'application/vnd.tao.intent-module-archive': {
      source: 'iana',
      extensions: ['tao']
    },
    'application/vnd.tcpdump.pcap': {
      source: 'iana',
      extensions: ['pcap', 'cap', 'dmp']
    },
    'application/vnd.think-cell.ppttc+json': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.tmd.mediaflex.api+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/vnd.tml': { source: 'iana' },
    'application/vnd.tmobile-livetv': { source: 'iana', extensions: ['tmo'] },
    'application/vnd.tri.onesource': { source: 'iana' },
    'application/vnd.trid.tpt': { source: 'iana', extensions: ['tpt'] },
    'application/vnd.triscape.mxs': { source: 'iana', extensions: ['mxs'] },
    'application/vnd.trueapp': { source: 'iana', extensions: ['tra'] },
    'application/vnd.truedoc': { source: 'iana' },
    'application/vnd.ubisoft.webplayer': { source: 'iana' },
    'application/vnd.ufdl': { source: 'iana', extensions: ['ufd', 'ufdl'] },
    'application/vnd.uiq.theme': { source: 'iana', extensions: ['utz'] },
    'application/vnd.umajin': { source: 'iana', extensions: ['umj'] },
    'application/vnd.unity': { source: 'iana', extensions: ['unityweb'] },
    'application/vnd.uoml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['uoml']
    },
    'application/vnd.uplanet.alert': { source: 'iana' },
    'application/vnd.uplanet.alert-wbxml': { source: 'iana' },
    'application/vnd.uplanet.bearer-choice': { source: 'iana' },
    'application/vnd.uplanet.bearer-choice-wbxml': { source: 'iana' },
    'application/vnd.uplanet.cacheop': { source: 'iana' },
    'application/vnd.uplanet.cacheop-wbxml': { source: 'iana' },
    'application/vnd.uplanet.channel': { source: 'iana' },
    'application/vnd.uplanet.channel-wbxml': { source: 'iana' },
    'application/vnd.uplanet.list': { source: 'iana' },
    'application/vnd.uplanet.list-wbxml': { source: 'iana' },
    'application/vnd.uplanet.listcmd': { source: 'iana' },
    'application/vnd.uplanet.listcmd-wbxml': { source: 'iana' },
    'application/vnd.uplanet.signal': { source: 'iana' },
    'application/vnd.uri-map': { source: 'iana' },
    'application/vnd.valve.source.material': { source: 'iana' },
    'application/vnd.vcx': { source: 'iana', extensions: ['vcx'] },
    'application/vnd.vd-study': { source: 'iana' },
    'application/vnd.vectorworks': { source: 'iana' },
    'application/vnd.vel+json': { source: 'iana', compressible: !0 },
    'application/vnd.verimatrix.vcas': { source: 'iana' },
    'application/vnd.veryant.thin': { source: 'iana' },
    'application/vnd.ves.encrypted': { source: 'iana' },
    'application/vnd.vidsoft.vidconference': { source: 'iana' },
    'application/vnd.visio': {
      source: 'iana',
      extensions: ['vsd', 'vst', 'vss', 'vsw']
    },
    'application/vnd.visionary': { source: 'iana', extensions: ['vis'] },
    'application/vnd.vividence.scriptfile': { source: 'iana' },
    'application/vnd.vsf': { source: 'iana', extensions: ['vsf'] },
    'application/vnd.wap.sic': { source: 'iana' },
    'application/vnd.wap.slc': { source: 'iana' },
    'application/vnd.wap.wbxml': {
      source: 'iana',
      charset: 'UTF-8',
      extensions: ['wbxml']
    },
    'application/vnd.wap.wmlc': { source: 'iana', extensions: ['wmlc'] },
    'application/vnd.wap.wmlscriptc': { source: 'iana', extensions: ['wmlsc'] },
    'application/vnd.webturbo': { source: 'iana', extensions: ['wtb'] },
    'application/vnd.wfa.dpp': { source: 'iana' },
    'application/vnd.wfa.p2p': { source: 'iana' },
    'application/vnd.wfa.wsc': { source: 'iana' },
    'application/vnd.windows.devicepairing': { source: 'iana' },
    'application/vnd.wmc': { source: 'iana' },
    'application/vnd.wmf.bootstrap': { source: 'iana' },
    'application/vnd.wolfram.mathematica': { source: 'iana' },
    'application/vnd.wolfram.mathematica.package': { source: 'iana' },
    'application/vnd.wolfram.player': { source: 'iana', extensions: ['nbp'] },
    'application/vnd.wordperfect': { source: 'iana', extensions: ['wpd'] },
    'application/vnd.wqd': { source: 'iana', extensions: ['wqd'] },
    'application/vnd.wrq-hp3000-labelled': { source: 'iana' },
    'application/vnd.wt.stf': { source: 'iana', extensions: ['stf'] },
    'application/vnd.wv.csp+wbxml': { source: 'iana' },
    'application/vnd.wv.csp+xml': { source: 'iana', compressible: !0 },
    'application/vnd.wv.ssp+xml': { source: 'iana', compressible: !0 },
    'application/vnd.xacml+json': { source: 'iana', compressible: !0 },
    'application/vnd.xara': { source: 'iana', extensions: ['xar'] },
    'application/vnd.xfdl': { source: 'iana', extensions: ['xfdl'] },
    'application/vnd.xfdl.webform': { source: 'iana' },
    'application/vnd.xmi+xml': { source: 'iana', compressible: !0 },
    'application/vnd.xmpie.cpkg': { source: 'iana' },
    'application/vnd.xmpie.dpkg': { source: 'iana' },
    'application/vnd.xmpie.plan': { source: 'iana' },
    'application/vnd.xmpie.ppkg': { source: 'iana' },
    'application/vnd.xmpie.xlim': { source: 'iana' },
    'application/vnd.yamaha.hv-dic': { source: 'iana', extensions: ['hvd'] },
    'application/vnd.yamaha.hv-script': { source: 'iana', extensions: ['hvs'] },
    'application/vnd.yamaha.hv-voice': { source: 'iana', extensions: ['hvp'] },
    'application/vnd.yamaha.openscoreformat': {
      source: 'iana',
      extensions: ['osf']
    },
    'application/vnd.yamaha.openscoreformat.osfpvg+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['osfpvg']
    },
    'application/vnd.yamaha.remote-setup': { source: 'iana' },
    'application/vnd.yamaha.smaf-audio': {
      source: 'iana',
      extensions: ['saf']
    },
    'application/vnd.yamaha.smaf-phrase': {
      source: 'iana',
      extensions: ['spf']
    },
    'application/vnd.yamaha.through-ngn': { source: 'iana' },
    'application/vnd.yamaha.tunnel-udpencap': { source: 'iana' },
    'application/vnd.yaoweme': { source: 'iana' },
    'application/vnd.yellowriver-custom-menu': {
      source: 'iana',
      extensions: ['cmp']
    },
    'application/vnd.youtube.yt': { source: 'iana' },
    'application/vnd.zul': { source: 'iana', extensions: ['zir', 'zirz'] },
    'application/vnd.zzazz.deck+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['zaz']
    },
    'application/voicexml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['vxml']
    },
    'application/voucher-cms+json': { source: 'iana', compressible: !0 },
    'application/vq-rtcpxr': { source: 'iana' },
    'application/wasm': { compressible: !0, extensions: ['wasm'] },
    'application/watcherinfo+xml': { source: 'iana', compressible: !0 },
    'application/webpush-options+json': { source: 'iana', compressible: !0 },
    'application/whoispp-query': { source: 'iana' },
    'application/whoispp-response': { source: 'iana' },
    'application/widget': { source: 'iana', extensions: ['wgt'] },
    'application/winhlp': { source: 'apache', extensions: ['hlp'] },
    'application/wita': { source: 'iana' },
    'application/wordperfect5.1': { source: 'iana' },
    'application/wsdl+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['wsdl']
    },
    'application/wspolicy+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['wspolicy']
    },
    'application/x-7z-compressed': {
      source: 'apache',
      compressible: !1,
      extensions: ['7z']
    },
    'application/x-abiword': { source: 'apache', extensions: ['abw'] },
    'application/x-ace-compressed': { source: 'apache', extensions: ['ace'] },
    'application/x-amf': { source: 'apache' },
    'application/x-apple-diskimage': { source: 'apache', extensions: ['dmg'] },
    'application/x-arj': { compressible: !1, extensions: ['arj'] },
    'application/x-authorware-bin': {
      source: 'apache',
      extensions: ['aab', 'x32', 'u32', 'vox']
    },
    'application/x-authorware-map': { source: 'apache', extensions: ['aam'] },
    'application/x-authorware-seg': { source: 'apache', extensions: ['aas'] },
    'application/x-bcpio': { source: 'apache', extensions: ['bcpio'] },
    'application/x-bdoc': { compressible: !1, extensions: ['bdoc'] },
    'application/x-bittorrent': { source: 'apache', extensions: ['torrent'] },
    'application/x-blorb': { source: 'apache', extensions: ['blb', 'blorb'] },
    'application/x-bzip': {
      source: 'apache',
      compressible: !1,
      extensions: ['bz']
    },
    'application/x-bzip2': {
      source: 'apache',
      compressible: !1,
      extensions: ['bz2', 'boz']
    },
    'application/x-cbr': {
      source: 'apache',
      extensions: ['cbr', 'cba', 'cbt', 'cbz', 'cb7']
    },
    'application/x-cdlink': { source: 'apache', extensions: ['vcd'] },
    'application/x-cfs-compressed': { source: 'apache', extensions: ['cfs'] },
    'application/x-chat': { source: 'apache', extensions: ['chat'] },
    'application/x-chess-pgn': { source: 'apache', extensions: ['pgn'] },
    'application/x-chrome-extension': { extensions: ['crx'] },
    'application/x-cocoa': { source: 'nginx', extensions: ['cco'] },
    'application/x-compress': { source: 'apache' },
    'application/x-conference': { source: 'apache', extensions: ['nsc'] },
    'application/x-cpio': { source: 'apache', extensions: ['cpio'] },
    'application/x-csh': { source: 'apache', extensions: ['csh'] },
    'application/x-deb': { compressible: !1 },
    'application/x-debian-package': {
      source: 'apache',
      extensions: ['deb', 'udeb']
    },
    'application/x-dgc-compressed': { source: 'apache', extensions: ['dgc'] },
    'application/x-director': {
      source: 'apache',
      extensions: [
        'dir',
        'dcr',
        'dxr',
        'cst',
        'cct',
        'cxt',
        'w3d',
        'fgd',
        'swa'
      ]
    },
    'application/x-doom': { source: 'apache', extensions: ['wad'] },
    'application/x-dtbncx+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['ncx']
    },
    'application/x-dtbook+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['dtb']
    },
    'application/x-dtbresource+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['res']
    },
    'application/x-dvi': {
      source: 'apache',
      compressible: !1,
      extensions: ['dvi']
    },
    'application/x-envoy': { source: 'apache', extensions: ['evy'] },
    'application/x-eva': { source: 'apache', extensions: ['eva'] },
    'application/x-font-bdf': { source: 'apache', extensions: ['bdf'] },
    'application/x-font-dos': { source: 'apache' },
    'application/x-font-framemaker': { source: 'apache' },
    'application/x-font-ghostscript': { source: 'apache', extensions: ['gsf'] },
    'application/x-font-libgrx': { source: 'apache' },
    'application/x-font-linux-psf': { source: 'apache', extensions: ['psf'] },
    'application/x-font-pcf': { source: 'apache', extensions: ['pcf'] },
    'application/x-font-snf': { source: 'apache', extensions: ['snf'] },
    'application/x-font-speedo': { source: 'apache' },
    'application/x-font-sunos-news': { source: 'apache' },
    'application/x-font-type1': {
      source: 'apache',
      extensions: ['pfa', 'pfb', 'pfm', 'afm']
    },
    'application/x-font-vfont': { source: 'apache' },
    'application/x-freearc': { source: 'apache', extensions: ['arc'] },
    'application/x-futuresplash': { source: 'apache', extensions: ['spl'] },
    'application/x-gca-compressed': { source: 'apache', extensions: ['gca'] },
    'application/x-glulx': { source: 'apache', extensions: ['ulx'] },
    'application/x-gnumeric': { source: 'apache', extensions: ['gnumeric'] },
    'application/x-gramps-xml': { source: 'apache', extensions: ['gramps'] },
    'application/x-gtar': { source: 'apache', extensions: ['gtar'] },
    'application/x-gzip': { source: 'apache' },
    'application/x-hdf': { source: 'apache', extensions: ['hdf'] },
    'application/x-httpd-php': { compressible: !0, extensions: ['php'] },
    'application/x-install-instructions': {
      source: 'apache',
      extensions: ['install']
    },
    'application/x-iso9660-image': { source: 'apache', extensions: ['iso'] },
    'application/x-java-archive-diff': {
      source: 'nginx',
      extensions: ['jardiff']
    },
    'application/x-java-jnlp-file': {
      source: 'apache',
      compressible: !1,
      extensions: ['jnlp']
    },
    'application/x-javascript': { compressible: !0 },
    'application/x-keepass2': { extensions: ['kdbx'] },
    'application/x-latex': {
      source: 'apache',
      compressible: !1,
      extensions: ['latex']
    },
    'application/x-lua-bytecode': { extensions: ['luac'] },
    'application/x-lzh-compressed': {
      source: 'apache',
      extensions: ['lzh', 'lha']
    },
    'application/x-makeself': { source: 'nginx', extensions: ['run'] },
    'application/x-mie': { source: 'apache', extensions: ['mie'] },
    'application/x-mobipocket-ebook': {
      source: 'apache',
      extensions: ['prc', 'mobi']
    },
    'application/x-mpegurl': { compressible: !1 },
    'application/x-ms-application': {
      source: 'apache',
      extensions: ['application']
    },
    'application/x-ms-shortcut': { source: 'apache', extensions: ['lnk'] },
    'application/x-ms-wmd': { source: 'apache', extensions: ['wmd'] },
    'application/x-ms-wmz': { source: 'apache', extensions: ['wmz'] },
    'application/x-ms-xbap': { source: 'apache', extensions: ['xbap'] },
    'application/x-msaccess': { source: 'apache', extensions: ['mdb'] },
    'application/x-msbinder': { source: 'apache', extensions: ['obd'] },
    'application/x-mscardfile': { source: 'apache', extensions: ['crd'] },
    'application/x-msclip': { source: 'apache', extensions: ['clp'] },
    'application/x-msdos-program': { extensions: ['exe'] },
    'application/x-msdownload': {
      source: 'apache',
      extensions: ['exe', 'dll', 'com', 'bat', 'msi']
    },
    'application/x-msmediaview': {
      source: 'apache',
      extensions: ['mvb', 'm13', 'm14']
    },
    'application/x-msmetafile': {
      source: 'apache',
      extensions: ['wmf', 'wmz', 'emf', 'emz']
    },
    'application/x-msmoney': { source: 'apache', extensions: ['mny'] },
    'application/x-mspublisher': { source: 'apache', extensions: ['pub'] },
    'application/x-msschedule': { source: 'apache', extensions: ['scd'] },
    'application/x-msterminal': { source: 'apache', extensions: ['trm'] },
    'application/x-mswrite': { source: 'apache', extensions: ['wri'] },
    'application/x-netcdf': { source: 'apache', extensions: ['nc', 'cdf'] },
    'application/x-ns-proxy-autoconfig': {
      compressible: !0,
      extensions: ['pac']
    },
    'application/x-nzb': { source: 'apache', extensions: ['nzb'] },
    'application/x-perl': { source: 'nginx', extensions: ['pl', 'pm'] },
    'application/x-pilot': { source: 'nginx', extensions: ['prc', 'pdb'] },
    'application/x-pkcs12': {
      source: 'apache',
      compressible: !1,
      extensions: ['p12', 'pfx']
    },
    'application/x-pkcs7-certificates': {
      source: 'apache',
      extensions: ['p7b', 'spc']
    },
    'application/x-pkcs7-certreqresp': {
      source: 'apache',
      extensions: ['p7r']
    },
    'application/x-pki-message': { source: 'iana' },
    'application/x-rar-compressed': {
      source: 'apache',
      compressible: !1,
      extensions: ['rar']
    },
    'application/x-redhat-package-manager': {
      source: 'nginx',
      extensions: ['rpm']
    },
    'application/x-research-info-systems': {
      source: 'apache',
      extensions: ['ris']
    },
    'application/x-sea': { source: 'nginx', extensions: ['sea'] },
    'application/x-sh': {
      source: 'apache',
      compressible: !0,
      extensions: ['sh']
    },
    'application/x-shar': { source: 'apache', extensions: ['shar'] },
    'application/x-shockwave-flash': {
      source: 'apache',
      compressible: !1,
      extensions: ['swf']
    },
    'application/x-silverlight-app': { source: 'apache', extensions: ['xap'] },
    'application/x-sql': { source: 'apache', extensions: ['sql'] },
    'application/x-stuffit': {
      source: 'apache',
      compressible: !1,
      extensions: ['sit']
    },
    'application/x-stuffitx': { source: 'apache', extensions: ['sitx'] },
    'application/x-subrip': { source: 'apache', extensions: ['srt'] },
    'application/x-sv4cpio': { source: 'apache', extensions: ['sv4cpio'] },
    'application/x-sv4crc': { source: 'apache', extensions: ['sv4crc'] },
    'application/x-t3vm-image': { source: 'apache', extensions: ['t3'] },
    'application/x-tads': { source: 'apache', extensions: ['gam'] },
    'application/x-tar': {
      source: 'apache',
      compressible: !0,
      extensions: ['tar']
    },
    'application/x-tcl': { source: 'apache', extensions: ['tcl', 'tk'] },
    'application/x-tex': { source: 'apache', extensions: ['tex'] },
    'application/x-tex-tfm': { source: 'apache', extensions: ['tfm'] },
    'application/x-texinfo': {
      source: 'apache',
      extensions: ['texinfo', 'texi']
    },
    'application/x-tgif': { source: 'apache', extensions: ['obj'] },
    'application/x-ustar': { source: 'apache', extensions: ['ustar'] },
    'application/x-virtualbox-hdd': { compressible: !0, extensions: ['hdd'] },
    'application/x-virtualbox-ova': { compressible: !0, extensions: ['ova'] },
    'application/x-virtualbox-ovf': { compressible: !0, extensions: ['ovf'] },
    'application/x-virtualbox-vbox': { compressible: !0, extensions: ['vbox'] },
    'application/x-virtualbox-vbox-extpack': {
      compressible: !1,
      extensions: ['vbox-extpack']
    },
    'application/x-virtualbox-vdi': { compressible: !0, extensions: ['vdi'] },
    'application/x-virtualbox-vhd': { compressible: !0, extensions: ['vhd'] },
    'application/x-virtualbox-vmdk': { compressible: !0, extensions: ['vmdk'] },
    'application/x-wais-source': { source: 'apache', extensions: ['src'] },
    'application/x-web-app-manifest+json': {
      compressible: !0,
      extensions: ['webapp']
    },
    'application/x-www-form-urlencoded': { source: 'iana', compressible: !0 },
    'application/x-x509-ca-cert': {
      source: 'iana',
      extensions: ['der', 'crt', 'pem']
    },
    'application/x-x509-ca-ra-cert': { source: 'iana' },
    'application/x-x509-next-ca-cert': { source: 'iana' },
    'application/x-xfig': { source: 'apache', extensions: ['fig'] },
    'application/x-xliff+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['xlf']
    },
    'application/x-xpinstall': {
      source: 'apache',
      compressible: !1,
      extensions: ['xpi']
    },
    'application/x-xz': { source: 'apache', extensions: ['xz'] },
    'application/x-zmachine': {
      source: 'apache',
      extensions: ['z1', 'z2', 'z3', 'z4', 'z5', 'z6', 'z7', 'z8']
    },
    'application/x400-bp': { source: 'iana' },
    'application/xacml+xml': { source: 'iana', compressible: !0 },
    'application/xaml+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['xaml']
    },
    'application/xcap-att+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xav']
    },
    'application/xcap-caps+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xca']
    },
    'application/xcap-diff+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xdf']
    },
    'application/xcap-el+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xel']
    },
    'application/xcap-error+xml': { source: 'iana', compressible: !0 },
    'application/xcap-ns+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xns']
    },
    'application/xcon-conference-info+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/xcon-conference-info-diff+xml': {
      source: 'iana',
      compressible: !0
    },
    'application/xenc+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xenc']
    },
    'application/xhtml+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xhtml', 'xht']
    },
    'application/xhtml-voice+xml': { source: 'apache', compressible: !0 },
    'application/xliff+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xlf']
    },
    'application/xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xml', 'xsl', 'xsd', 'rng']
    },
    'application/xml-dtd': {
      source: 'iana',
      compressible: !0,
      extensions: ['dtd']
    },
    'application/xml-external-parsed-entity': { source: 'iana' },
    'application/xml-patch+xml': { source: 'iana', compressible: !0 },
    'application/xmpp+xml': { source: 'iana', compressible: !0 },
    'application/xop+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xop']
    },
    'application/xproc+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['xpl']
    },
    'application/xslt+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['xsl', 'xslt']
    },
    'application/xspf+xml': {
      source: 'apache',
      compressible: !0,
      extensions: ['xspf']
    },
    'application/xv+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['mxml', 'xhvml', 'xvml', 'xvm']
    },
    'application/yang': { source: 'iana', extensions: ['yang'] },
    'application/yang-data+json': { source: 'iana', compressible: !0 },
    'application/yang-data+xml': { source: 'iana', compressible: !0 },
    'application/yang-patch+json': { source: 'iana', compressible: !0 },
    'application/yang-patch+xml': { source: 'iana', compressible: !0 },
    'application/yin+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['yin']
    },
    'application/zip': {
      source: 'iana',
      compressible: !1,
      extensions: ['zip']
    },
    'application/zlib': { source: 'iana' },
    'application/zstd': { source: 'iana' },
    'audio/1d-interleaved-parityfec': { source: 'iana' },
    'audio/32kadpcm': { source: 'iana' },
    'audio/3gpp': { source: 'iana', compressible: !1, extensions: ['3gpp'] },
    'audio/3gpp2': { source: 'iana' },
    'audio/aac': { source: 'iana' },
    'audio/ac3': { source: 'iana' },
    'audio/adpcm': { source: 'apache', extensions: ['adp'] },
    'audio/amr': { source: 'iana', extensions: ['amr'] },
    'audio/amr-wb': { source: 'iana' },
    'audio/amr-wb+': { source: 'iana' },
    'audio/aptx': { source: 'iana' },
    'audio/asc': { source: 'iana' },
    'audio/atrac-advanced-lossless': { source: 'iana' },
    'audio/atrac-x': { source: 'iana' },
    'audio/atrac3': { source: 'iana' },
    'audio/basic': {
      source: 'iana',
      compressible: !1,
      extensions: ['au', 'snd']
    },
    'audio/bv16': { source: 'iana' },
    'audio/bv32': { source: 'iana' },
    'audio/clearmode': { source: 'iana' },
    'audio/cn': { source: 'iana' },
    'audio/dat12': { source: 'iana' },
    'audio/dls': { source: 'iana' },
    'audio/dsr-es201108': { source: 'iana' },
    'audio/dsr-es202050': { source: 'iana' },
    'audio/dsr-es202211': { source: 'iana' },
    'audio/dsr-es202212': { source: 'iana' },
    'audio/dv': { source: 'iana' },
    'audio/dvi4': { source: 'iana' },
    'audio/eac3': { source: 'iana' },
    'audio/encaprtp': { source: 'iana' },
    'audio/evrc': { source: 'iana' },
    'audio/evrc-qcp': { source: 'iana' },
    'audio/evrc0': { source: 'iana' },
    'audio/evrc1': { source: 'iana' },
    'audio/evrcb': { source: 'iana' },
    'audio/evrcb0': { source: 'iana' },
    'audio/evrcb1': { source: 'iana' },
    'audio/evrcnw': { source: 'iana' },
    'audio/evrcnw0': { source: 'iana' },
    'audio/evrcnw1': { source: 'iana' },
    'audio/evrcwb': { source: 'iana' },
    'audio/evrcwb0': { source: 'iana' },
    'audio/evrcwb1': { source: 'iana' },
    'audio/evs': { source: 'iana' },
    'audio/flexfec': { source: 'iana' },
    'audio/fwdred': { source: 'iana' },
    'audio/g711-0': { source: 'iana' },
    'audio/g719': { source: 'iana' },
    'audio/g722': { source: 'iana' },
    'audio/g7221': { source: 'iana' },
    'audio/g723': { source: 'iana' },
    'audio/g726-16': { source: 'iana' },
    'audio/g726-24': { source: 'iana' },
    'audio/g726-32': { source: 'iana' },
    'audio/g726-40': { source: 'iana' },
    'audio/g728': { source: 'iana' },
    'audio/g729': { source: 'iana' },
    'audio/g7291': { source: 'iana' },
    'audio/g729d': { source: 'iana' },
    'audio/g729e': { source: 'iana' },
    'audio/gsm': { source: 'iana' },
    'audio/gsm-efr': { source: 'iana' },
    'audio/gsm-hr-08': { source: 'iana' },
    'audio/ilbc': { source: 'iana' },
    'audio/ip-mr_v2.5': { source: 'iana' },
    'audio/isac': { source: 'apache' },
    'audio/l16': { source: 'iana' },
    'audio/l20': { source: 'iana' },
    'audio/l24': { source: 'iana', compressible: !1 },
    'audio/l8': { source: 'iana' },
    'audio/lpc': { source: 'iana' },
    'audio/melp': { source: 'iana' },
    'audio/melp1200': { source: 'iana' },
    'audio/melp2400': { source: 'iana' },
    'audio/melp600': { source: 'iana' },
    'audio/mhas': { source: 'iana' },
    'audio/midi': {
      source: 'apache',
      extensions: ['mid', 'midi', 'kar', 'rmi']
    },
    'audio/mobile-xmf': { source: 'iana', extensions: ['mxmf'] },
    'audio/mp3': { compressible: !1, extensions: ['mp3'] },
    'audio/mp4': {
      source: 'iana',
      compressible: !1,
      extensions: ['m4a', 'mp4a']
    },
    'audio/mp4a-latm': { source: 'iana' },
    'audio/mpa': { source: 'iana' },
    'audio/mpa-robust': { source: 'iana' },
    'audio/mpeg': {
      source: 'iana',
      compressible: !1,
      extensions: ['mpga', 'mp2', 'mp2a', 'mp3', 'm2a', 'm3a']
    },
    'audio/mpeg4-generic': { source: 'iana' },
    'audio/musepack': { source: 'apache' },
    'audio/ogg': {
      source: 'iana',
      compressible: !1,
      extensions: ['oga', 'ogg', 'spx', 'opus']
    },
    'audio/opus': { source: 'iana' },
    'audio/parityfec': { source: 'iana' },
    'audio/pcma': { source: 'iana' },
    'audio/pcma-wb': { source: 'iana' },
    'audio/pcmu': { source: 'iana' },
    'audio/pcmu-wb': { source: 'iana' },
    'audio/prs.sid': { source: 'iana' },
    'audio/qcelp': { source: 'iana' },
    'audio/raptorfec': { source: 'iana' },
    'audio/red': { source: 'iana' },
    'audio/rtp-enc-aescm128': { source: 'iana' },
    'audio/rtp-midi': { source: 'iana' },
    'audio/rtploopback': { source: 'iana' },
    'audio/rtx': { source: 'iana' },
    'audio/s3m': { source: 'apache', extensions: ['s3m'] },
    'audio/scip': { source: 'iana' },
    'audio/silk': { source: 'apache', extensions: ['sil'] },
    'audio/smv': { source: 'iana' },
    'audio/smv-qcp': { source: 'iana' },
    'audio/smv0': { source: 'iana' },
    'audio/sofa': { source: 'iana' },
    'audio/sp-midi': { source: 'iana' },
    'audio/speex': { source: 'iana' },
    'audio/t140c': { source: 'iana' },
    'audio/t38': { source: 'iana' },
    'audio/telephone-event': { source: 'iana' },
    'audio/tetra_acelp': { source: 'iana' },
    'audio/tetra_acelp_bb': { source: 'iana' },
    'audio/tone': { source: 'iana' },
    'audio/tsvcis': { source: 'iana' },
    'audio/uemclip': { source: 'iana' },
    'audio/ulpfec': { source: 'iana' },
    'audio/usac': { source: 'iana' },
    'audio/vdvi': { source: 'iana' },
    'audio/vmr-wb': { source: 'iana' },
    'audio/vnd.3gpp.iufp': { source: 'iana' },
    'audio/vnd.4sb': { source: 'iana' },
    'audio/vnd.audiokoz': { source: 'iana' },
    'audio/vnd.celp': { source: 'iana' },
    'audio/vnd.cisco.nse': { source: 'iana' },
    'audio/vnd.cmles.radio-events': { source: 'iana' },
    'audio/vnd.cns.anp1': { source: 'iana' },
    'audio/vnd.cns.inf1': { source: 'iana' },
    'audio/vnd.dece.audio': { source: 'iana', extensions: ['uva', 'uvva'] },
    'audio/vnd.digital-winds': { source: 'iana', extensions: ['eol'] },
    'audio/vnd.dlna.adts': { source: 'iana' },
    'audio/vnd.dolby.heaac.1': { source: 'iana' },
    'audio/vnd.dolby.heaac.2': { source: 'iana' },
    'audio/vnd.dolby.mlp': { source: 'iana' },
    'audio/vnd.dolby.mps': { source: 'iana' },
    'audio/vnd.dolby.pl2': { source: 'iana' },
    'audio/vnd.dolby.pl2x': { source: 'iana' },
    'audio/vnd.dolby.pl2z': { source: 'iana' },
    'audio/vnd.dolby.pulse.1': { source: 'iana' },
    'audio/vnd.dra': { source: 'iana', extensions: ['dra'] },
    'audio/vnd.dts': { source: 'iana', extensions: ['dts'] },
    'audio/vnd.dts.hd': { source: 'iana', extensions: ['dtshd'] },
    'audio/vnd.dts.uhd': { source: 'iana' },
    'audio/vnd.dvb.file': { source: 'iana' },
    'audio/vnd.everad.plj': { source: 'iana' },
    'audio/vnd.hns.audio': { source: 'iana' },
    'audio/vnd.lucent.voice': { source: 'iana', extensions: ['lvp'] },
    'audio/vnd.ms-playready.media.pya': { source: 'iana', extensions: ['pya'] },
    'audio/vnd.nokia.mobile-xmf': { source: 'iana' },
    'audio/vnd.nortel.vbk': { source: 'iana' },
    'audio/vnd.nuera.ecelp4800': { source: 'iana', extensions: ['ecelp4800'] },
    'audio/vnd.nuera.ecelp7470': { source: 'iana', extensions: ['ecelp7470'] },
    'audio/vnd.nuera.ecelp9600': { source: 'iana', extensions: ['ecelp9600'] },
    'audio/vnd.octel.sbc': { source: 'iana' },
    'audio/vnd.presonus.multitrack': { source: 'iana' },
    'audio/vnd.qcelp': { source: 'iana' },
    'audio/vnd.rhetorex.32kadpcm': { source: 'iana' },
    'audio/vnd.rip': { source: 'iana', extensions: ['rip'] },
    'audio/vnd.rn-realaudio': { compressible: !1 },
    'audio/vnd.sealedmedia.softseal.mpeg': { source: 'iana' },
    'audio/vnd.vmx.cvsd': { source: 'iana' },
    'audio/vnd.wave': { compressible: !1 },
    'audio/vorbis': { source: 'iana', compressible: !1 },
    'audio/vorbis-config': { source: 'iana' },
    'audio/wav': { compressible: !1, extensions: ['wav'] },
    'audio/wave': { compressible: !1, extensions: ['wav'] },
    'audio/webm': { source: 'apache', compressible: !1, extensions: ['weba'] },
    'audio/x-aac': { source: 'apache', compressible: !1, extensions: ['aac'] },
    'audio/x-aiff': { source: 'apache', extensions: ['aif', 'aiff', 'aifc'] },
    'audio/x-caf': { source: 'apache', compressible: !1, extensions: ['caf'] },
    'audio/x-flac': { source: 'apache', extensions: ['flac'] },
    'audio/x-m4a': { source: 'nginx', extensions: ['m4a'] },
    'audio/x-matroska': { source: 'apache', extensions: ['mka'] },
    'audio/x-mpegurl': { source: 'apache', extensions: ['m3u'] },
    'audio/x-ms-wax': { source: 'apache', extensions: ['wax'] },
    'audio/x-ms-wma': { source: 'apache', extensions: ['wma'] },
    'audio/x-pn-realaudio': { source: 'apache', extensions: ['ram', 'ra'] },
    'audio/x-pn-realaudio-plugin': { source: 'apache', extensions: ['rmp'] },
    'audio/x-realaudio': { source: 'nginx', extensions: ['ra'] },
    'audio/x-tta': { source: 'apache' },
    'audio/x-wav': { source: 'apache', extensions: ['wav'] },
    'audio/xm': { source: 'apache', extensions: ['xm'] },
    'chemical/x-cdx': { source: 'apache', extensions: ['cdx'] },
    'chemical/x-cif': { source: 'apache', extensions: ['cif'] },
    'chemical/x-cmdf': { source: 'apache', extensions: ['cmdf'] },
    'chemical/x-cml': { source: 'apache', extensions: ['cml'] },
    'chemical/x-csml': { source: 'apache', extensions: ['csml'] },
    'chemical/x-pdb': { source: 'apache' },
    'chemical/x-xyz': { source: 'apache', extensions: ['xyz'] },
    'font/collection': { source: 'iana', extensions: ['ttc'] },
    'font/otf': { source: 'iana', compressible: !0, extensions: ['otf'] },
    'font/sfnt': { source: 'iana' },
    'font/ttf': { source: 'iana', compressible: !0, extensions: ['ttf'] },
    'font/woff': { source: 'iana', extensions: ['woff'] },
    'font/woff2': { source: 'iana', extensions: ['woff2'] },
    'image/aces': { source: 'iana', extensions: ['exr'] },
    'image/apng': { compressible: !1, extensions: ['apng'] },
    'image/avci': { source: 'iana' },
    'image/avcs': { source: 'iana' },
    'image/avif': { source: 'iana', compressible: !1, extensions: ['avif'] },
    'image/bmp': { source: 'iana', compressible: !0, extensions: ['bmp'] },
    'image/cgm': { source: 'iana', extensions: ['cgm'] },
    'image/dicom-rle': { source: 'iana', extensions: ['drle'] },
    'image/emf': { source: 'iana', extensions: ['emf'] },
    'image/fits': { source: 'iana', extensions: ['fits'] },
    'image/g3fax': { source: 'iana', extensions: ['g3'] },
    'image/gif': { source: 'iana', compressible: !1, extensions: ['gif'] },
    'image/heic': { source: 'iana', extensions: ['heic'] },
    'image/heic-sequence': { source: 'iana', extensions: ['heics'] },
    'image/heif': { source: 'iana', extensions: ['heif'] },
    'image/heif-sequence': { source: 'iana', extensions: ['heifs'] },
    'image/hej2k': { source: 'iana', extensions: ['hej2'] },
    'image/hsj2': { source: 'iana', extensions: ['hsj2'] },
    'image/ief': { source: 'iana', extensions: ['ief'] },
    'image/jls': { source: 'iana', extensions: ['jls'] },
    'image/jp2': {
      source: 'iana',
      compressible: !1,
      extensions: ['jp2', 'jpg2']
    },
    'image/jpeg': {
      source: 'iana',
      compressible: !1,
      extensions: ['jpeg', 'jpg', 'jpe']
    },
    'image/jph': { source: 'iana', extensions: ['jph'] },
    'image/jphc': { source: 'iana', extensions: ['jhc'] },
    'image/jpm': { source: 'iana', compressible: !1, extensions: ['jpm'] },
    'image/jpx': {
      source: 'iana',
      compressible: !1,
      extensions: ['jpx', 'jpf']
    },
    'image/jxr': { source: 'iana', extensions: ['jxr'] },
    'image/jxra': { source: 'iana', extensions: ['jxra'] },
    'image/jxrs': { source: 'iana', extensions: ['jxrs'] },
    'image/jxs': { source: 'iana', extensions: ['jxs'] },
    'image/jxsc': { source: 'iana', extensions: ['jxsc'] },
    'image/jxsi': { source: 'iana', extensions: ['jxsi'] },
    'image/jxss': { source: 'iana', extensions: ['jxss'] },
    'image/ktx': { source: 'iana', extensions: ['ktx'] },
    'image/ktx2': { source: 'iana', extensions: ['ktx2'] },
    'image/naplps': { source: 'iana' },
    'image/pjpeg': { compressible: !1 },
    'image/png': { source: 'iana', compressible: !1, extensions: ['png'] },
    'image/prs.btif': { source: 'iana', extensions: ['btif'] },
    'image/prs.pti': { source: 'iana', extensions: ['pti'] },
    'image/pwg-raster': { source: 'iana' },
    'image/sgi': { source: 'apache', extensions: ['sgi'] },
    'image/svg+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['svg', 'svgz']
    },
    'image/t38': { source: 'iana', extensions: ['t38'] },
    'image/tiff': {
      source: 'iana',
      compressible: !1,
      extensions: ['tif', 'tiff']
    },
    'image/tiff-fx': { source: 'iana', extensions: ['tfx'] },
    'image/vnd.adobe.photoshop': {
      source: 'iana',
      compressible: !0,
      extensions: ['psd']
    },
    'image/vnd.airzip.accelerator.azv': { source: 'iana', extensions: ['azv'] },
    'image/vnd.cns.inf2': { source: 'iana' },
    'image/vnd.dece.graphic': {
      source: 'iana',
      extensions: ['uvi', 'uvvi', 'uvg', 'uvvg']
    },
    'image/vnd.djvu': { source: 'iana', extensions: ['djvu', 'djv'] },
    'image/vnd.dvb.subtitle': { source: 'iana', extensions: ['sub'] },
    'image/vnd.dwg': { source: 'iana', extensions: ['dwg'] },
    'image/vnd.dxf': { source: 'iana', extensions: ['dxf'] },
    'image/vnd.fastbidsheet': { source: 'iana', extensions: ['fbs'] },
    'image/vnd.fpx': { source: 'iana', extensions: ['fpx'] },
    'image/vnd.fst': { source: 'iana', extensions: ['fst'] },
    'image/vnd.fujixerox.edmics-mmr': { source: 'iana', extensions: ['mmr'] },
    'image/vnd.fujixerox.edmics-rlc': { source: 'iana', extensions: ['rlc'] },
    'image/vnd.globalgraphics.pgb': { source: 'iana' },
    'image/vnd.microsoft.icon': { source: 'iana', extensions: ['ico'] },
    'image/vnd.mix': { source: 'iana' },
    'image/vnd.mozilla.apng': { source: 'iana' },
    'image/vnd.ms-dds': { extensions: ['dds'] },
    'image/vnd.ms-modi': { source: 'iana', extensions: ['mdi'] },
    'image/vnd.ms-photo': { source: 'apache', extensions: ['wdp'] },
    'image/vnd.net-fpx': { source: 'iana', extensions: ['npx'] },
    'image/vnd.pco.b16': { source: 'iana', extensions: ['b16'] },
    'image/vnd.radiance': { source: 'iana' },
    'image/vnd.sealed.png': { source: 'iana' },
    'image/vnd.sealedmedia.softseal.gif': { source: 'iana' },
    'image/vnd.sealedmedia.softseal.jpg': { source: 'iana' },
    'image/vnd.svf': { source: 'iana' },
    'image/vnd.tencent.tap': { source: 'iana', extensions: ['tap'] },
    'image/vnd.valve.source.texture': { source: 'iana', extensions: ['vtf'] },
    'image/vnd.wap.wbmp': { source: 'iana', extensions: ['wbmp'] },
    'image/vnd.xiff': { source: 'iana', extensions: ['xif'] },
    'image/vnd.zbrush.pcx': { source: 'iana', extensions: ['pcx'] },
    'image/webp': { source: 'apache', extensions: ['webp'] },
    'image/wmf': { source: 'iana', extensions: ['wmf'] },
    'image/x-3ds': { source: 'apache', extensions: ['3ds'] },
    'image/x-cmu-raster': { source: 'apache', extensions: ['ras'] },
    'image/x-cmx': { source: 'apache', extensions: ['cmx'] },
    'image/x-freehand': {
      source: 'apache',
      extensions: ['fh', 'fhc', 'fh4', 'fh5', 'fh7']
    },
    'image/x-icon': { source: 'apache', compressible: !0, extensions: ['ico'] },
    'image/x-jng': { source: 'nginx', extensions: ['jng'] },
    'image/x-mrsid-image': { source: 'apache', extensions: ['sid'] },
    'image/x-ms-bmp': {
      source: 'nginx',
      compressible: !0,
      extensions: ['bmp']
    },
    'image/x-pcx': { source: 'apache', extensions: ['pcx'] },
    'image/x-pict': { source: 'apache', extensions: ['pic', 'pct'] },
    'image/x-portable-anymap': { source: 'apache', extensions: ['pnm'] },
    'image/x-portable-bitmap': { source: 'apache', extensions: ['pbm'] },
    'image/x-portable-graymap': { source: 'apache', extensions: ['pgm'] },
    'image/x-portable-pixmap': { source: 'apache', extensions: ['ppm'] },
    'image/x-rgb': { source: 'apache', extensions: ['rgb'] },
    'image/x-tga': { source: 'apache', extensions: ['tga'] },
    'image/x-xbitmap': { source: 'apache', extensions: ['xbm'] },
    'image/x-xcf': { compressible: !1 },
    'image/x-xpixmap': { source: 'apache', extensions: ['xpm'] },
    'image/x-xwindowdump': { source: 'apache', extensions: ['xwd'] },
    'message/cpim': { source: 'iana' },
    'message/delivery-status': { source: 'iana' },
    'message/disposition-notification': {
      source: 'iana',
      extensions: ['disposition-notification']
    },
    'message/external-body': { source: 'iana' },
    'message/feedback-report': { source: 'iana' },
    'message/global': { source: 'iana', extensions: ['u8msg'] },
    'message/global-delivery-status': { source: 'iana', extensions: ['u8dsn'] },
    'message/global-disposition-notification': {
      source: 'iana',
      extensions: ['u8mdn']
    },
    'message/global-headers': { source: 'iana', extensions: ['u8hdr'] },
    'message/http': { source: 'iana', compressible: !1 },
    'message/imdn+xml': { source: 'iana', compressible: !0 },
    'message/news': { source: 'iana' },
    'message/partial': { source: 'iana', compressible: !1 },
    'message/rfc822': {
      source: 'iana',
      compressible: !0,
      extensions: ['eml', 'mime']
    },
    'message/s-http': { source: 'iana' },
    'message/sip': { source: 'iana' },
    'message/sipfrag': { source: 'iana' },
    'message/tracking-status': { source: 'iana' },
    'message/vnd.si.simp': { source: 'iana' },
    'message/vnd.wfa.wsc': { source: 'iana', extensions: ['wsc'] },
    'model/3mf': { source: 'iana', extensions: ['3mf'] },
    'model/e57': { source: 'iana' },
    'model/gltf+json': {
      source: 'iana',
      compressible: !0,
      extensions: ['gltf']
    },
    'model/gltf-binary': {
      source: 'iana',
      compressible: !0,
      extensions: ['glb']
    },
    'model/iges': {
      source: 'iana',
      compressible: !1,
      extensions: ['igs', 'iges']
    },
    'model/mesh': {
      source: 'iana',
      compressible: !1,
      extensions: ['msh', 'mesh', 'silo']
    },
    'model/mtl': { source: 'iana', extensions: ['mtl'] },
    'model/obj': { source: 'iana', extensions: ['obj'] },
    'model/stl': { source: 'iana', extensions: ['stl'] },
    'model/vnd.collada+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['dae']
    },
    'model/vnd.dwf': { source: 'iana', extensions: ['dwf'] },
    'model/vnd.flatland.3dml': { source: 'iana' },
    'model/vnd.gdl': { source: 'iana', extensions: ['gdl'] },
    'model/vnd.gs-gdl': { source: 'apache' },
    'model/vnd.gs.gdl': { source: 'iana' },
    'model/vnd.gtw': { source: 'iana', extensions: ['gtw'] },
    'model/vnd.moml+xml': { source: 'iana', compressible: !0 },
    'model/vnd.mts': { source: 'iana', extensions: ['mts'] },
    'model/vnd.opengex': { source: 'iana', extensions: ['ogex'] },
    'model/vnd.parasolid.transmit.binary': {
      source: 'iana',
      extensions: ['x_b']
    },
    'model/vnd.parasolid.transmit.text': {
      source: 'iana',
      extensions: ['x_t']
    },
    'model/vnd.rosette.annotated-data-model': { source: 'iana' },
    'model/vnd.sap.vds': { source: 'iana', extensions: ['vds'] },
    'model/vnd.usdz+zip': {
      source: 'iana',
      compressible: !1,
      extensions: ['usdz']
    },
    'model/vnd.valve.source.compiled-map': {
      source: 'iana',
      extensions: ['bsp']
    },
    'model/vnd.vtu': { source: 'iana', extensions: ['vtu'] },
    'model/vrml': {
      source: 'iana',
      compressible: !1,
      extensions: ['wrl', 'vrml']
    },
    'model/x3d+binary': {
      source: 'apache',
      compressible: !1,
      extensions: ['x3db', 'x3dbz']
    },
    'model/x3d+fastinfoset': { source: 'iana', extensions: ['x3db'] },
    'model/x3d+vrml': {
      source: 'apache',
      compressible: !1,
      extensions: ['x3dv', 'x3dvz']
    },
    'model/x3d+xml': {
      source: 'iana',
      compressible: !0,
      extensions: ['x3d', 'x3dz']
    },
    'model/x3d-vrml': { source: 'iana', extensions: ['x3dv'] },
    'multipart/alternative': { source: 'iana', compressible: !1 },
    'multipart/appledouble': { source: 'iana' },
    'multipart/byteranges': { source: 'iana' },
    'multipart/digest': { source: 'iana' },
    'multipart/encrypted': { source: 'iana', compressible: !1 },
    'multipart/form-data': { source: 'iana', compressible: !1 },
    'multipart/header-set': { source: 'iana' },
    'multipart/mixed': { source: 'iana' },
    'multipart/multilingual': { source: 'iana' },
    'multipart/parallel': { source: 'iana' },
    'multipart/related': { source: 'iana', compressible: !1 },
    'multipart/report': { source: 'iana' },
    'multipart/signed': { source: 'iana', compressible: !1 },
    'multipart/vnd.bint.med-plus': { source: 'iana' },
    'multipart/voice-message': { source: 'iana' },
    'multipart/x-mixed-replace': { source: 'iana' },
    'text/1d-interleaved-parityfec': { source: 'iana' },
    'text/cache-manifest': {
      source: 'iana',
      compressible: !0,
      extensions: ['appcache', 'manifest']
    },
    'text/calendar': { source: 'iana', extensions: ['ics', 'ifb'] },
    'text/calender': { compressible: !0 },
    'text/cmd': { compressible: !0 },
    'text/coffeescript': { extensions: ['coffee', 'litcoffee'] },
    'text/cql': { source: 'iana' },
    'text/cql-expression': { source: 'iana' },
    'text/cql-identifier': { source: 'iana' },
    'text/css': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['css']
    },
    'text/csv': { source: 'iana', compressible: !0, extensions: ['csv'] },
    'text/csv-schema': { source: 'iana' },
    'text/directory': { source: 'iana' },
    'text/dns': { source: 'iana' },
    'text/ecmascript': { source: 'iana' },
    'text/encaprtp': { source: 'iana' },
    'text/enriched': { source: 'iana' },
    'text/fhirpath': { source: 'iana' },
    'text/flexfec': { source: 'iana' },
    'text/fwdred': { source: 'iana' },
    'text/gff3': { source: 'iana' },
    'text/grammar-ref-list': { source: 'iana' },
    'text/html': {
      source: 'iana',
      compressible: !0,
      extensions: ['html', 'htm', 'shtml']
    },
    'text/jade': { extensions: ['jade'] },
    'text/javascript': { source: 'iana', compressible: !0 },
    'text/jcr-cnd': { source: 'iana' },
    'text/jsx': { compressible: !0, extensions: ['jsx'] },
    'text/less': { compressible: !0, extensions: ['less'] },
    'text/markdown': {
      source: 'iana',
      compressible: !0,
      extensions: ['markdown', 'md']
    },
    'text/mathml': { source: 'nginx', extensions: ['mml'] },
    'text/mdx': { compressible: !0, extensions: ['mdx'] },
    'text/mizar': { source: 'iana' },
    'text/n3': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['n3']
    },
    'text/parameters': { source: 'iana', charset: 'UTF-8' },
    'text/parityfec': { source: 'iana' },
    'text/plain': {
      source: 'iana',
      compressible: !0,
      extensions: ['txt', 'text', 'conf', 'def', 'list', 'log', 'in', 'ini']
    },
    'text/provenance-notation': { source: 'iana', charset: 'UTF-8' },
    'text/prs.fallenstein.rst': { source: 'iana' },
    'text/prs.lines.tag': { source: 'iana', extensions: ['dsc'] },
    'text/prs.prop.logic': { source: 'iana' },
    'text/raptorfec': { source: 'iana' },
    'text/red': { source: 'iana' },
    'text/rfc822-headers': { source: 'iana' },
    'text/richtext': { source: 'iana', compressible: !0, extensions: ['rtx'] },
    'text/rtf': { source: 'iana', compressible: !0, extensions: ['rtf'] },
    'text/rtp-enc-aescm128': { source: 'iana' },
    'text/rtploopback': { source: 'iana' },
    'text/rtx': { source: 'iana' },
    'text/sgml': { source: 'iana', extensions: ['sgml', 'sgm'] },
    'text/shaclc': { source: 'iana' },
    'text/shex': { extensions: ['shex'] },
    'text/slim': { extensions: ['slim', 'slm'] },
    'text/spdx': { source: 'iana', extensions: ['spdx'] },
    'text/strings': { source: 'iana' },
    'text/stylus': { extensions: ['stylus', 'styl'] },
    'text/t140': { source: 'iana' },
    'text/tab-separated-values': {
      source: 'iana',
      compressible: !0,
      extensions: ['tsv']
    },
    'text/troff': {
      source: 'iana',
      extensions: ['t', 'tr', 'roff', 'man', 'me', 'ms']
    },
    'text/turtle': { source: 'iana', charset: 'UTF-8', extensions: ['ttl'] },
    'text/ulpfec': { source: 'iana' },
    'text/uri-list': {
      source: 'iana',
      compressible: !0,
      extensions: ['uri', 'uris', 'urls']
    },
    'text/vcard': { source: 'iana', compressible: !0, extensions: ['vcard'] },
    'text/vnd.a': { source: 'iana' },
    'text/vnd.abc': { source: 'iana' },
    'text/vnd.ascii-art': { source: 'iana' },
    'text/vnd.curl': { source: 'iana', extensions: ['curl'] },
    'text/vnd.curl.dcurl': { source: 'apache', extensions: ['dcurl'] },
    'text/vnd.curl.mcurl': { source: 'apache', extensions: ['mcurl'] },
    'text/vnd.curl.scurl': { source: 'apache', extensions: ['scurl'] },
    'text/vnd.debian.copyright': { source: 'iana', charset: 'UTF-8' },
    'text/vnd.dmclientscript': { source: 'iana' },
    'text/vnd.dvb.subtitle': { source: 'iana', extensions: ['sub'] },
    'text/vnd.esmertec.theme-descriptor': { source: 'iana', charset: 'UTF-8' },
    'text/vnd.ficlab.flt': { source: 'iana' },
    'text/vnd.fly': { source: 'iana', extensions: ['fly'] },
    'text/vnd.fmi.flexstor': { source: 'iana', extensions: ['flx'] },
    'text/vnd.gml': { source: 'iana' },
    'text/vnd.graphviz': { source: 'iana', extensions: ['gv'] },
    'text/vnd.hans': { source: 'iana' },
    'text/vnd.hgl': { source: 'iana' },
    'text/vnd.in3d.3dml': { source: 'iana', extensions: ['3dml'] },
    'text/vnd.in3d.spot': { source: 'iana', extensions: ['spot'] },
    'text/vnd.iptc.newsml': { source: 'iana' },
    'text/vnd.iptc.nitf': { source: 'iana' },
    'text/vnd.latex-z': { source: 'iana' },
    'text/vnd.motorola.reflex': { source: 'iana' },
    'text/vnd.ms-mediapackage': { source: 'iana' },
    'text/vnd.net2phone.commcenter.command': { source: 'iana' },
    'text/vnd.radisys.msml-basic-layout': { source: 'iana' },
    'text/vnd.senx.warpscript': { source: 'iana' },
    'text/vnd.si.uricatalogue': { source: 'iana' },
    'text/vnd.sosi': { source: 'iana' },
    'text/vnd.sun.j2me.app-descriptor': {
      source: 'iana',
      charset: 'UTF-8',
      extensions: ['jad']
    },
    'text/vnd.trolltech.linguist': { source: 'iana', charset: 'UTF-8' },
    'text/vnd.wap.si': { source: 'iana' },
    'text/vnd.wap.sl': { source: 'iana' },
    'text/vnd.wap.wml': { source: 'iana', extensions: ['wml'] },
    'text/vnd.wap.wmlscript': { source: 'iana', extensions: ['wmls'] },
    'text/vtt': {
      source: 'iana',
      charset: 'UTF-8',
      compressible: !0,
      extensions: ['vtt']
    },
    'text/x-asm': { source: 'apache', extensions: ['s', 'asm'] },
    'text/x-c': {
      source: 'apache',
      extensions: ['c', 'cc', 'cxx', 'cpp', 'h', 'hh', 'dic']
    },
    'text/x-component': { source: 'nginx', extensions: ['htc'] },
    'text/x-fortran': {
      source: 'apache',
      extensions: ['f', 'for', 'f77', 'f90']
    },
    'text/x-gwt-rpc': { compressible: !0 },
    'text/x-handlebars-template': { extensions: ['hbs'] },
    'text/x-java-source': { source: 'apache', extensions: ['java'] },
    'text/x-jquery-tmpl': { compressible: !0 },
    'text/x-lua': { extensions: ['lua'] },
    'text/x-markdown': { compressible: !0, extensions: ['mkd'] },
    'text/x-nfo': { source: 'apache', extensions: ['nfo'] },
    'text/x-opml': { source: 'apache', extensions: ['opml'] },
    'text/x-org': { compressible: !0, extensions: ['org'] },
    'text/x-pascal': { source: 'apache', extensions: ['p', 'pas'] },
    'text/x-processing': { compressible: !0, extensions: ['pde'] },
    'text/x-sass': { extensions: ['sass'] },
    'text/x-scss': { extensions: ['scss'] },
    'text/x-setext': { source: 'apache', extensions: ['etx'] },
    'text/x-sfv': { source: 'apache', extensions: ['sfv'] },
    'text/x-suse-ymp': { compressible: !0, extensions: ['ymp'] },
    'text/x-uuencode': { source: 'apache', extensions: ['uu'] },
    'text/x-vcalendar': { source: 'apache', extensions: ['vcs'] },
    'text/x-vcard': { source: 'apache', extensions: ['vcf'] },
    'text/xml': { source: 'iana', compressible: !0, extensions: ['xml'] },
    'text/xml-external-parsed-entity': { source: 'iana' },
    'text/yaml': { extensions: ['yaml', 'yml'] },
    'video/1d-interleaved-parityfec': { source: 'iana' },
    'video/3gpp': { source: 'iana', extensions: ['3gp', '3gpp'] },
    'video/3gpp-tt': { source: 'iana' },
    'video/3gpp2': { source: 'iana', extensions: ['3g2'] },
    'video/av1': { source: 'iana' },
    'video/bmpeg': { source: 'iana' },
    'video/bt656': { source: 'iana' },
    'video/celb': { source: 'iana' },
    'video/dv': { source: 'iana' },
    'video/encaprtp': { source: 'iana' },
    'video/ffv1': { source: 'iana' },
    'video/flexfec': { source: 'iana' },
    'video/h261': { source: 'iana', extensions: ['h261'] },
    'video/h263': { source: 'iana', extensions: ['h263'] },
    'video/h263-1998': { source: 'iana' },
    'video/h263-2000': { source: 'iana' },
    'video/h264': { source: 'iana', extensions: ['h264'] },
    'video/h264-rcdo': { source: 'iana' },
    'video/h264-svc': { source: 'iana' },
    'video/h265': { source: 'iana' },
    'video/iso.segment': { source: 'iana', extensions: ['m4s'] },
    'video/jpeg': { source: 'iana', extensions: ['jpgv'] },
    'video/jpeg2000': { source: 'iana' },
    'video/jpm': { source: 'apache', extensions: ['jpm', 'jpgm'] },
    'video/mj2': { source: 'iana', extensions: ['mj2', 'mjp2'] },
    'video/mp1s': { source: 'iana' },
    'video/mp2p': { source: 'iana' },
    'video/mp2t': { source: 'iana', extensions: ['ts'] },
    'video/mp4': {
      source: 'iana',
      compressible: !1,
      extensions: ['mp4', 'mp4v', 'mpg4']
    },
    'video/mp4v-es': { source: 'iana' },
    'video/mpeg': {
      source: 'iana',
      compressible: !1,
      extensions: ['mpeg', 'mpg', 'mpe', 'm1v', 'm2v']
    },
    'video/mpeg4-generic': { source: 'iana' },
    'video/mpv': { source: 'iana' },
    'video/nv': { source: 'iana' },
    'video/ogg': { source: 'iana', compressible: !1, extensions: ['ogv'] },
    'video/parityfec': { source: 'iana' },
    'video/pointer': { source: 'iana' },
    'video/quicktime': {
      source: 'iana',
      compressible: !1,
      extensions: ['qt', 'mov']
    },
    'video/raptorfec': { source: 'iana' },
    'video/raw': { source: 'iana' },
    'video/rtp-enc-aescm128': { source: 'iana' },
    'video/rtploopback': { source: 'iana' },
    'video/rtx': { source: 'iana' },
    'video/scip': { source: 'iana' },
    'video/smpte291': { source: 'iana' },
    'video/smpte292m': { source: 'iana' },
    'video/ulpfec': { source: 'iana' },
    'video/vc1': { source: 'iana' },
    'video/vc2': { source: 'iana' },
    'video/vnd.cctv': { source: 'iana' },
    'video/vnd.dece.hd': { source: 'iana', extensions: ['uvh', 'uvvh'] },
    'video/vnd.dece.mobile': { source: 'iana', extensions: ['uvm', 'uvvm'] },
    'video/vnd.dece.mp4': { source: 'iana' },
    'video/vnd.dece.pd': { source: 'iana', extensions: ['uvp', 'uvvp'] },
    'video/vnd.dece.sd': { source: 'iana', extensions: ['uvs', 'uvvs'] },
    'video/vnd.dece.video': { source: 'iana', extensions: ['uvv', 'uvvv'] },
    'video/vnd.directv.mpeg': { source: 'iana' },
    'video/vnd.directv.mpeg-tts': { source: 'iana' },
    'video/vnd.dlna.mpeg-tts': { source: 'iana' },
    'video/vnd.dvb.file': { source: 'iana', extensions: ['dvb'] },
    'video/vnd.fvt': { source: 'iana', extensions: ['fvt'] },
    'video/vnd.hns.video': { source: 'iana' },
    'video/vnd.iptvforum.1dparityfec-1010': { source: 'iana' },
    'video/vnd.iptvforum.1dparityfec-2005': { source: 'iana' },
    'video/vnd.iptvforum.2dparityfec-1010': { source: 'iana' },
    'video/vnd.iptvforum.2dparityfec-2005': { source: 'iana' },
    'video/vnd.iptvforum.ttsavc': { source: 'iana' },
    'video/vnd.iptvforum.ttsmpeg2': { source: 'iana' },
    'video/vnd.motorola.video': { source: 'iana' },
    'video/vnd.motorola.videop': { source: 'iana' },
    'video/vnd.mpegurl': { source: 'iana', extensions: ['mxu', 'm4u'] },
    'video/vnd.ms-playready.media.pyv': { source: 'iana', extensions: ['pyv'] },
    'video/vnd.nokia.interleaved-multimedia': { source: 'iana' },
    'video/vnd.nokia.mp4vr': { source: 'iana' },
    'video/vnd.nokia.videovoip': { source: 'iana' },
    'video/vnd.objectvideo': { source: 'iana' },
    'video/vnd.radgamettools.bink': { source: 'iana' },
    'video/vnd.radgamettools.smacker': { source: 'iana' },
    'video/vnd.sealed.mpeg1': { source: 'iana' },
    'video/vnd.sealed.mpeg4': { source: 'iana' },
    'video/vnd.sealed.swf': { source: 'iana' },
    'video/vnd.sealedmedia.softseal.mov': { source: 'iana' },
    'video/vnd.uvvu.mp4': { source: 'iana', extensions: ['uvu', 'uvvu'] },
    'video/vnd.vivo': { source: 'iana', extensions: ['viv'] },
    'video/vnd.youtube.yt': { source: 'iana' },
    'video/vp8': { source: 'iana' },
    'video/webm': { source: 'apache', compressible: !1, extensions: ['webm'] },
    'video/x-f4v': { source: 'apache', extensions: ['f4v'] },
    'video/x-fli': { source: 'apache', extensions: ['fli'] },
    'video/x-flv': { source: 'apache', compressible: !1, extensions: ['flv'] },
    'video/x-m4v': { source: 'apache', extensions: ['m4v'] },
    'video/x-matroska': {
      source: 'apache',
      compressible: !1,
      extensions: ['mkv', 'mk3d', 'mks']
    },
    'video/x-mng': { source: 'apache', extensions: ['mng'] },
    'video/x-ms-asf': { source: 'apache', extensions: ['asf', 'asx'] },
    'video/x-ms-vob': { source: 'apache', extensions: ['vob'] },
    'video/x-ms-wm': { source: 'apache', extensions: ['wm'] },
    'video/x-ms-wmv': {
      source: 'apache',
      compressible: !1,
      extensions: ['wmv']
    },
    'video/x-ms-wmx': { source: 'apache', extensions: ['wmx'] },
    'video/x-ms-wvx': { source: 'apache', extensions: ['wvx'] },
    'video/x-msvideo': { source: 'apache', extensions: ['avi'] },
    'video/x-sgi-movie': { source: 'apache', extensions: ['movie'] },
    'video/x-smv': { source: 'apache', extensions: ['smv'] },
    'x-conference/x-cooltalk': { source: 'apache', extensions: ['ice'] },
    'x-shader/x-fragment': { compressible: !0 },
    'x-shader/x-vertex': { compressible: !0 }
  }
})
var id = y((TC, ed) => {
  ed.exports = Zu()
})
var ad = y(he => {
  'use strict'
  var yn = id(),
    Zb = require('path').extname,
    td = /^\s*([^;\s]*)(?:;|\s|$)/,
    ey = /^text\//i
  he.charset = nd
  he.charsets = { lookup: nd }
  he.contentType = iy
  he.extension = ty
  he.extensions = Object.create(null)
  he.lookup = ny
  he.types = Object.create(null)
  ay(he.extensions, he.types)
  function nd (e) {
    if (!e || typeof e != 'string') return !1
    var i = td.exec(e),
      t = i && yn[i[1].toLowerCase()]
    return t && t.charset ? t.charset : i && ey.test(i[1]) ? 'UTF-8' : !1
  }
  function iy (e) {
    if (!e || typeof e != 'string') return !1
    var i = e.indexOf('/') === -1 ? he.lookup(e) : e
    if (!i) return !1
    if (i.indexOf('charset') === -1) {
      var t = he.charset(i)
      t && (i += '; charset=' + t.toLowerCase())
    }
    return i
  }
  function ty (e) {
    if (!e || typeof e != 'string') return !1
    var i = td.exec(e),
      t = i && he.extensions[i[1].toLowerCase()]
    return !t || !t.length ? !1 : t[0]
  }
  function ny (e) {
    if (!e || typeof e != 'string') return !1
    var i = Zb('x.' + e)
      .toLowerCase()
      .substr(1)
    return (i && he.types[i]) || !1
  }
  function ay (e, i) {
    var t = ['nginx', 'apache', void 0, 'iana']
    Object.keys(yn).forEach(function (a) {
      var s = yn[a],
        r = s.extensions
      if (!(!r || !r.length)) {
        e[a] = r
        for (var o = 0; o < r.length; o++) {
          var c = r[o]
          if (i[c]) {
            var d = t.indexOf(yn[i[c]].source),
              l = t.indexOf(s.source)
            if (
              i[c] !== 'application/octet-stream' &&
              (d > l || (d === l && i[c].substr(0, 12) === 'application/'))
            )
              continue
          }
          i[c] = a
        }
      }
    })
  }
})
var rd = y((qC, sd) => {
  var sy = require('path')
  function ry (e, i = 'html') {
    return sy.extname(e) ? e : i === 'html' ? `${e}/index.html` : `${e}.${i}`
  }
  sd.exports = { pathnameToFile: ry }
})
var Cs = y((PC, od) => {
  function oy () {
    let e = process.hrtime()
    return () => {
      let [i, t] = process.hrtime(e),
        n = t / 1e6
      return i < 1
        ? (n >= 1 ? n.toFixed(0) : n.toFixed(2)) + 'ms'
        : i + '.' + n.toFixed(0) + 's'
    }
  }
  od.exports = { timer: oy }
})
var ld = y((HC, cd) => {
  cd.exports = function (e, i) {
    if (e instanceof RegExp) return { keys: !1, pattern: e }
    var t,
      n,
      a,
      s,
      r = [],
      o = '',
      c = e.split('/')
    for (c[0] || c.shift(); (a = c.shift()); )
      (t = a[0]),
        t === '*'
          ? (r.push('wild'), (o += '/(.*)'))
          : t === ':'
          ? ((n = a.indexOf('?', 1)),
            (s = a.indexOf('.', 1)),
            r.push(a.substring(1, ~n ? n : ~s ? s : a.length)),
            (o += !!~n && !~s ? '(?:/([^/]+?))?' : '/([^/]+?)'),
            ~s && (o += (~n ? '?' : '') + '\\' + a.substring(s)))
          : (o += '/' + a)
    return {
      keys: r,
      pattern: new RegExp('^' + o + (i ? '(?=$|/)' : '/?$'), 'i')
    }
  }
})
var ud = y((MC, pd) => {
  var En = ld()
  En = En.default || En
  function cy (e, i) {
    let t = 0,
      n = {},
      a = i.pattern.exec(e)
    for (; t < i.keys.length; ) n[i.keys[t]] = a[++t] || null
    return n
  }
  function ly (e, i) {
    return cy(e, En(i))
  }
  pd.exports = { getRouteParams: ly }
})
var hd = y(($C, dd) => {
  'use strict'
  var dy = function (i) {
    return py(i) && !uy(i)
  }
  function py (e) {
    return !!e && typeof e == 'object'
  }
  function uy (e) {
    var i = Object.prototype.toString.call(e)
    return i === '[object RegExp]' || i === '[object Date]' || my(e)
  }
  var fy = typeof Symbol == 'function' && Symbol.for,
    hy = fy ? Symbol.for('react.element') : 60103
  function my (e) {
    return e.$$typeof === hy
  }
  function xy (e) {
    return Array.isArray(e) ? [] : {}
  }
  function lt (e, i) {
    return i.clone !== !1 && i.isMergeableObject(e) ? Bi(xy(e), e, i) : e
  }
  function vy (e, i, t) {
    return e.concat(i).map(function (n) {
      return lt(n, t)
    })
  }
  function gy (e, i) {
    if (!i.customMerge) return Bi
    var t = i.customMerge(e)
    return typeof t == 'function' ? t : Bi
  }
  function Ay (e) {
    return Object.getOwnPropertySymbols
      ? Object.getOwnPropertySymbols(e).filter(function (i) {
          return e.propertyIsEnumerable(i)
        })
      : []
  }
  function md (e) {
    return Object.keys(e).concat(Ay(e))
  }
  function fd (e, i) {
    try {
      return i in e
    } catch (t) {
      return !1
    }
  }
  function by (e, i) {
    return (
      fd(e, i) &&
      !(
        Object.hasOwnProperty.call(e, i) &&
        Object.propertyIsEnumerable.call(e, i)
      )
    )
  }
  function yy (e, i, t) {
    var n = {}
    return (
      t.isMergeableObject(e) &&
        md(e).forEach(function (a) {
          n[a] = lt(e[a], t)
        }),
      md(i).forEach(function (a) {
        by(e, a) ||
          (fd(e, a) && t.isMergeableObject(i[a])
            ? (n[a] = gy(a, t)(e[a], i[a], t))
            : (n[a] = lt(i[a], t)))
      }),
      n
    )
  }
  function Bi (e, i, t) {
    ;(t = t || {}),
      (t.arrayMerge = t.arrayMerge || vy),
      (t.isMergeableObject = t.isMergeableObject || dy),
      (t.cloneUnlessOtherwiseSpecified = lt)
    var n = Array.isArray(i),
      a = Array.isArray(e),
      s = n === a
    return s ? (n ? t.arrayMerge(e, i, t) : yy(e, i, t)) : lt(i, t)
  }
  Bi.all = function (i, t) {
    if (!Array.isArray(i)) throw new Error('first argument should be an array')
    return i.reduce(function (n, a) {
      return Bi(n, a, t)
    }, {})
  }
  var Ey = Bi
  dd.exports = Ey
})
var vd = y((GC, xd) => {
  var wy = hd()
  function Cy (e) {
    return wy(
      {
        path: '',
        headers: {},
        params: {},
        query: {},
        lambda: { event: {}, context: {} }
      },
      e
    )
  }
  xd.exports = { createContext: Cy }
})
var Ad = y((UC, gd) => {
  function _y (e) {
    return typeof e == 'object' ? JSON.stringify(e) : e
  }
  function ky (e) {
    let {
        isBase64Encoded: i = !1,
        statusCode: t = 200,
        headers: n = {},
        multiValueHeaders: a = {},
        body: s,
        html: r,
        json: o,
        xml: c
      } = typeof e == 'object' ? e : { body: e },
      d = 'text/html; charset=utf-8'
    return (
      o
        ? (d = 'application/json; charset=utf-8')
        : c && (d = 'application/xml; charset=utf-8'),
      {
        isBase64Encoded: i,
        statusCode: t,
        headers: k({ 'Content-Type': d }, n),
        multiValueHeaders: a,
        body: _y(s || r || o || c || '')
      }
    )
  }
  gd.exports = { normalizeResponse: ky }
})
var Ed = y((zC, bd) => {
  var pt = require('fs'),
    By = require('path'),
    yd = process.env.PRESTA_ENV || 'production'
  function _s (e, i) {
    yd !== 'production' && pt.writeFileSync(e, JSON.stringify(i), 'utf-8')
  }
  function Sy (e) {
    return yd === 'production'
      ? {}
      : (pt.existsSync(e) || pt.writeFileSync(e, '{}', 'utf-8'),
        JSON.parse(pt.readFileSync(e)))
  }
  function Qy (e, { dir: i = process.cwd() } = {}) {
    let t = '.' + e,
      n = By.join(i, t),
      a = Sy(n)
    return {
      get (s) {
        let [r, o] = a[s] || []
        if (o !== null && Date.now() > o) {
          delete a[s], _s(n, a)
          return
        } else return r
      },
      set (s, r, o) {
        let c = o ? Date.now() + o : null
        ;(a[s] = [r, c]), c && _s(n, a)
      },
      clear (s) {
        delete a[s], _s(n, a)
      },
      clearAllMemory () {
        for (let s of Object.keys(a)) {
          let [r, o] = a[s] || []
          o || delete a[s]
        }
      },
      cleanup () {
        a = {}
        try {
          pt.unlinkSync(n)
        } catch (s) {}
      },
      dump () {
        let s = {}
        for (let r of Object.keys(a)) s[r] = a[r][0]
        return s
      }
    }
  }
  bd.exports = { createCache: Qy }
})
var kd = y((KC, wd) => {
  var Iy = yi(),
    { createCache: Ry } = Ed(),
    { NODE_ENV: Fy } = process.env,
    Si = {},
    ks = {},
    ri = Ry('presta-load-cache')
  function Oy (e) {
    Fy !== 'test' && console.log(e)
  }
  function Cd (e, i) {
    Oy(`
  ${Iy.red('error')} load { ${e} }

${i}
`),
      (ks[e] = i),
      delete Si[e]
  }
  function Ly (e, i, t) {
    ri.set(e, i, t)
  }
  async function Ny (e, { key: i, duration: t }) {
    let n = ri.get(i)
    return n || ((n = await e()), ri.set(i, n, t)), n
  }
  function jy (e, { key: i, duration: t }) {
    let n = ri.get(i)
    if (!n && !ks[i])
      try {
        ;(Si[i] = e()),
          Si[i]
            .then(a => {
              ri.set(i, a, t), delete Si[i]
            })
            .catch(a => Cd(i, a))
      } catch (a) {
        Cd(i, a)
      }
    return delete ks[i], n
  }
  async function _d (e, i = {}) {
    let t = e()
    return Object.keys(Si).length
      ? (await Promise.allSettled(Object.values(Si)), _d(e, i))
      : { content: t, data: ri.dump() }
  }
  wd.exports = { loadCache: ri, prime: Ly, cache: Ny, load: jy, flush: _d }
})
var Bs = y((WC, Bd) => {
  var Ty = {}
  Bd.exports = { builtStaticFiles: Ty }
})
var Ss = y((JC, Sd) => {
  var Dy = Ve(),
    qy = require('path'),
    { OUTPUT_STATIC_DIR: Py } = cn()
  function Hy (e, i) {
    debug('removing static file', e), Dy.remove(qy.join(i.merged.output, Py, e))
  }
  Sd.exports = { removeBuiltStaticFile: Hy }
})
var Od = y((YC, Qd) => {
  var My = Ve(),
    $y = require('path'),
    Qs = yi(),
    Gy = ad(),
    { debug: Uy } = ki(),
    { OUTPUT_STATIC_DIR: zy } = cn(),
    { pathnameToFile: Ky } = rd(),
    { log: Id, formatLog: Rd } = dn(),
    { timer: Wy } = Cs(),
    { getRouteParams: Jy } = ud(),
    { createContext: Yy } = vd(),
    { normalizeResponse: Xy } = Ad(),
    { loadCache: Vy } = kd(),
    { builtStaticFiles: Is } = Bs(),
    { removeBuiltStaticFile: Fd } = Ss()
  function Zy (e, i, t = {}) {
    return new Promise(async (n, a) => {
      Uy('renderStaticEntries', e)
      let s = []
      for (let r of e) {
        let o = r.replace(i.cwd, '')
        try {
          delete require.cache[r]
          let c = require(r),
            d = await c.getStaticPaths(),
            l = (Is[r] = Is[r] || []),
            p = []
          if (!d || !d.length) {
            Rd({
              color: 'yellow',
              action: 'build',
              meta: ' ',
              description: `${o} - no paths to render`
            }),
              l.forEach(u => Fd(u, i))
            continue
          }
          for (let u of d) {
            let m = Wy(),
              f = Yy({ path: u, params: c.route ? Jy(u, c.route) : {} }),
              h = Xy(await c.handler(f)),
              x = h.headers['Content-Type'],
              v = x ? Gy.extension(x) : 'html',
              w = Ky(u, v)
            s.push(w),
              p.push(w),
              My.outputFileSync(
                $y.join(i.merged.output, zy, w),
                h.body,
                'utf-8'
              ),
              Rd({
                color: 'green',
                action: 'build',
                meta: '\u2022 ' + m(),
                description: u
              })
          }
          for (let u of l) p.includes(u) || Fd(u, i)
          Is[r] = p
        } catch (c) {
          i.env === 'development'
            ? (Id(`
  ${Qs.red('error')} ${o}

  > ${c.stack || c}

${Qs.gray('  errors detected, pausing...')}
`),
              n({ allGeneratedFiles: s }))
            : (Id(`
  ${Qs.red('error')} ${o}

  > ${c.stack || c}
`),
              a(c))
          break
        }
      }
      Vy.clearAllMemory(), n({ allGeneratedFiles: s })
    })
  }
  Qd.exports = { renderStaticEntries: Zy }
})
var Hd = y((VC, Ld) => {
  var Rs = Ve(),
    ut = yi(),
    eE = Gu(),
    iE = rs(),
    tE = mi(),
    { debug: dt } = ki(),
    { createDynamicEntry: nE } = zu(),
    { log: mt, formatLog: aE } = dn(),
    { getFiles: Nd, isStatic: jd, isDynamic: wn, isPrestaFile: XC } = Xu(),
    { renderStaticEntries: Td } = Od(),
    { timer: sE } = Cs(),
    { createConfig: Dd, removeConfigValues: rE, getConfigFile: qd } = fn(),
    { builtStaticFiles: oE } = Bs(),
    { removeBuiltStaticFile: cE } = Ss()
  function Fs (e, i) {
    let t = sE()
    nE(e, i),
      delete require.cache[i.dynamicEntryFilepath],
      e.length &&
        aE({
          color: 'green',
          action: 'build',
          meta: '\u26A1\uFE0E' + t(),
          description: ''
        })
  }
  async function Pd (e, i) {
    if (!e.length) return
    let t = e.filter(jd)
    t.length && (await Td(t, i)),
      i.emitter.emit('refresh'),
      i.emitter.emit('done', e)
  }
  async function lE (e) {
    dt('watch initialized with config', e)
    let i = Nd(e),
      t = Rs.existsSync(e.configFilepath)
    i.length ||
      mt(`  ${ut.gray('no files configured')}
`),
      Fs(i.filter(wn), e)
    let n = eE({ alias: { '@': e.cwd } }),
      a = iE.watch(e.cwd, {
        ignoreInitial: !0,
        ignored: [e.merged.output, e.merged.assets]
      })
    async function s () {
      ;(i = Nd(e)), Pd(i, e)
    }
    async function r (o) {
      jd(o) && (await Td([o], e)),
        wn(o) &&
          (delete require.cache[e.dynamicEntryFilepath], Fs(i.filter(wn), e)),
        e.emitter.emit('refresh'),
        e.emitter.emit('done', [o])
    }
    n.on('remove', ([o]) => {
      dt('fileWatcher - removed', o),
        i.splice(i.indexOf(o), 1),
        Fs(i.filter(wn), e),
        o === e.configFilepath && ((e = rE()), (t = !1), s()),
        (oE[o] || []).forEach(c => cE(c, e)),
        e.emitter.emit('remove', o)
    }),
      n.on('change', ([o]) => {
        if ((dt('fileWatcher - changed', o), o === e.configFilepath)) {
          delete require.cache[e.configFilepath]
          try {
            ;(e = Dd({ configFile: qd(e.configFilepath) })), s()
          } catch (c) {
            mt(`
  ${ut.red('error')}

  > ${c.stack || c}
`)
          }
        } else r(o)
        e.emitter.emit('change', o)
      }),
      n.on('error', o => {
        mt(`
  ${ut.red('error')}

  > ${o.stack || o}
`)
      }),
      a.on('all', async (o, c) => {
        if (
          !(
            !/add|change/.test(o) ||
            !Rs.existsSync(c) ||
            Rs.lstatSync(c).isDirectory()
          )
        ) {
          if (
            (tE(e.merged.files)(c) &&
              !i.includes(c) &&
              (dt('globalWatcher - add file'), i.push(c), n.add(c), r(c)),
            c === e.configFilepath && !t)
          ) {
            dt('globalWatcher - add config file'), n.add(e.configFilepath)
            try {
              ;(e = Dd({ configFile: qd(e.configFilepath) })), (t = !0), s()
            } catch (d) {
              mt(`
  ${ut.red('error')}

  > ${d.stack || d}
`)
            }
          }
          e.emitter.emit('add', c)
        }
      }),
      n.add(i),
      t && n.add(e.configFilepath)
    try {
      i.map(require)
    } catch (o) {
      mt(`
  ${ut.red('error')}

  > ${o.stack || o}
`)
    }
  }
  Ld.exports = { buildFiles: Pd, watch: lE }
})
var Os = Ve(),
  Qi = require('path'),
  pE = Ea(),
  uE = rs(),
  Md = mi(),
  dE = require('assert'),
  { getCurrentConfig: mE } = fn(),
  { buildFiles: fE } = Hd(),
  { debug: hE } = ki(),
  $d,
  Ls,
  We = process.pid,
  ZC = process.cwd(),
  xE = { [We]: {} },
  vE = { [We]: {} },
  gE = { [We]: {} },
  AE = { [We]: {} }
function Gd ({ filepath: e, baseDir: i }) {
  return e.split(i)[1].split('.')[0]
}
var bE = {
  default (e, i) {
    return { [Gd({ filepath: e, baseDir: i })]: Os.readFileSync(e, 'utf8') }
  }
}
function yE (e, i, { extensions: t = {} } = {}) {
  return n => {
    dE(
      Qi.isAbsolute(n),
      'root file should be an absolute path \u2014 did you use __filename?'
    )
    let a = xE[We],
      s = vE[We],
      r = gE[We],
      o = AE[We],
      c = mE(),
      { env: d, emitter: l } = c
    ;(e = Qi.resolve(Qi.dirname(n), e)),
      (i = [].concat(i).map(h => Qi.resolve(e, h))),
      (t = k(k({}, bE), t)),
      hE('source', { baseDir: e, globs: i })
    let p = i
      .map(h => pE.sync(h, { cwd: e }))
      .flat()
      .map(h => Qi.resolve(e, h))
    if (d === 'development') {
      let h = function (x, v) {
        ;(s[x] = s[x] || new Set()),
          s[x].add(v),
          (r[v] = r[v] || new Set()),
          r[v].add(x)
      }
      var m = h
      ;(o[n] = i), (a[n] = a[n] || { prevCallCount: 0, callCount: 0 })
      for (let x of p) h(x, n)
      if (!$d) {
        let x = function (v) {
          for (let w of r[v]) s[w].delete(v)
          delete r[v], delete a[v], delete o[v]
        }
        var f = x
        ;($d = !0),
          l.on('done', ([v]) => {
            let w = Object.keys(a).find(C => C === v)
            if (w) {
              let C = a[w]
              C.callCount === C.prevCallCount
                ? x(w)
                : (a[w].prevCallCount = a[w].callCount)
            }
          }),
          l.on('remove', ([v]) => {
            let w = Object.keys(a).find(C => C === v)
            w && x(w)
          })
      }
      Ls ||
        ((Ls = uE.watch(e, { ignoreInitial: !0 })),
        Ls.on('all', (x, v) => {
          if (Os.existsSync(v) && Os.lstatSync(v).isDirectory()) return
          if (/add|change/.test(x))
            for (let C of Object.keys(o)) Md.isMatch(v, o[C]) && h(v, C)
          let w = Array.from(s[v] || [])
          if ((w.length && fE(w, c), x === 'unlink'))
            for (let C of Object.keys(o))
              Md.isMatch(v, o[C]) && (s[v].delete(C), r[C].delete(v))
        })),
        ++a[n].callCount
    }
    let u = p.map(h => {
      let x = Qi.extname(h).split('.')[1],
        v = t[x]
      return v ? v(h, e) : t.default(h, e)
    })
    return {
      filepaths: p,
      paths: u.reduce((h, x) => h.concat(Object.keys(x)), []),
      sources: u.reduce((h, x) => Object.assign(h, x), {})
    }
  }
}
module.exports = { createUrlFromFilepath: Gd, source: yE }
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * strip-comments <https://github.com/jonschlinkert/strip-comments>
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
//# sourceMappingURL=data:application/json;base64,
